--- Execution profile ---
Total samples       : 4472
unknown_Java        : 84 (1.88%)

--- 9306031480 ns (13.01%), 572 samples
  [ 0] __GI___pthread_mutex_unlock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 5605969103 ns (7.84%), 367 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 3643294755 ns (5.09%), 225 samples
  [ 0] __GI___pthread_mutex_unlock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 3007273922 ns (4.20%), 168 samples
  [ 0] __pthread_cond_signal
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 2862267180 ns (4.00%), 177 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 2667704956 ns (3.73%), 172 samples
  [ 0] __pthread_cond_signal
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 6] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [11] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [12] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [16] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [18] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [19] kotlinx.coroutines.DispatchedTask.run
  [20] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [21] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [22] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [23] kotlinx.coroutines.BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [25] kotlinx.coroutines.BuildersKt.runBlocking$default
  [26] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [27] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [29] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [31] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [32] java.lang.reflect.Method.invoke
  [33] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] java.util.concurrent.FutureTask.run
  [36] java.util.concurrent.Executors$RunnableAdapter.call
  [37] java.util.concurrent.FutureTask.run
  [38] java.util.concurrent.ThreadPoolExecutor.runWorker
  [39] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [40] java.lang.Thread.run

--- 2248433390 ns (3.14%), 139 samples
  [ 0] __pthread_cond_signal
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 4] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 5] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 6] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 7] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 8] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 9] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [10] io.ktor.utils.io.ByteBufferChannel.flush
  [11] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [12] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [13] io.ktor.utils.io.ByteBufferChannel.writeFully
  [14] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [15] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [16] kotlinx.coroutines.DispatchedTask.run
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 2123764965 ns (2.97%), 139 samples
  [ 0] __tls_get_addr
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 2062564962 ns (2.88%), 125 samples
  [ 0] jlong_disjoint_arraycopy
  [ 1] java.nio.Buffer.position
  [ 2] java.nio.ByteBuffer.position
  [ 3] java.nio.MappedByteBuffer.position
  [ 4] java.nio.DirectByteBuffer.get
  [ 5] java.nio.HeapByteBuffer.put
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [15] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [16] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [17] kotlinx.coroutines.BuildersKt.runBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [19] kotlinx.coroutines.BuildersKt.runBlocking$default
  [20] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [21] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [22] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [23] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [24] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [25] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [26] java.lang.reflect.Method.invoke
  [27] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [28] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.Executors$RunnableAdapter.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.ThreadPoolExecutor.runWorker
  [33] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [34] java.lang.Thread.run

--- 1580034068 ns (2.21%), 101 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 830229079 ns (1.16%), 46 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 810206482 ns (1.13%), 48 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 810071842 ns (1.13%), 61 samples
  [ 0] [vdso]
  [ 1] clock_gettime
  [ 2] [unknown_Java]

--- 779835329 ns (1.09%), 55 samples
  [ 0] __tls_get_addr
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking$default
  [10] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [15] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.run

--- 758898395 ns (1.06%), 56 samples
  [ 0] jdk.internal.misc.Unsafe.park
  [ 1] java.util.concurrent.locks.LockSupport.parkNanos
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 748818870 ns (1.05%), 48 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking$default
  [10] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [15] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.run

--- 646812760 ns (0.90%), 40 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 596653056 ns (0.83%), 38 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 595213041 ns (0.83%), 37 samples
  [ 0] jlong_disjoint_arraycopy
  [ 1] jdk.internal.misc.Unsafe.copyMemory
  [ 2] java.nio.DirectByteBuffer.put
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.writeFully
  [ 6] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 543873930 ns (0.76%), 32 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.setNextParkedWorker
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 543700505 ns (0.76%), 34 samples
  [ 0] jdk.internal.misc.Unsafe.park
  [ 1] java.util.concurrent.locks.LockSupport.parkNanos
  [ 2] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 3] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 7] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 492690539 ns (0.69%), 34 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 471233830 ns (0.66%), 22 samples
  [ 0] __futex_abstimed_wait_cancelable64
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 460811385 ns (0.64%), 30 samples
  [ 0] jlong_disjoint_arraycopy
  [ 1] jdk.internal.misc.Unsafe.copyMemory
  [ 2] java.nio.DirectByteBuffer.put
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.access$writeSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 451532728 ns (0.63%), 23 samples
  [ 0] __GI___pthread_mutex_lock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 5] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 6] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [10] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [11] io.ktor.utils.io.ByteBufferChannel.flush
  [12] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [13] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [14] io.ktor.utils.io.ByteBufferChannel.writeFully
  [15] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [16] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [17] kotlinx.coroutines.DispatchedTask.run
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 441124533 ns (0.62%), 26 samples
  [ 0] kotlinx.coroutines.EventLoopImplBase.dequeue
  [ 1] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 2] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 3] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 7] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 441094354 ns (0.62%), 27 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 440521612 ns (0.62%), 23 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryAcquireCpuPermit
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 368905509 ns (0.52%), 24 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 359113424 ns (0.50%), 25 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 8] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 328061985 ns (0.46%), 23 samples
  [ 0] pthread_cond_timedwait@@GLIBC_2.3.2
  [ 1] [unknown]
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 328031335 ns (0.46%), 19 samples
  [ 0] io.ktor.utils.io.pool.DefaultPool.popTop
  [ 1] io.ktor.utils.io.pool.DefaultPool.tryPop
  [ 2] io.ktor.utils.io.pool.DefaultPool.borrow
  [ 3] io.ktor.utils.io.ByteBufferChannel.newBuffer
  [ 4] io.ktor.utils.io.ByteBufferChannel.setupStateForWrite$ktor_io
  [ 5] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 6] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$writeSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 307829059 ns (0.43%), 20 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryAcquireCpuPermit
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 307783269 ns (0.43%), 14 samples
  [ 0] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 1] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 297261948 ns (0.42%), 15 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 5] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 6] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [10] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [11] io.ktor.utils.io.ByteBufferChannel.flush
  [12] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [13] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [14] io.ktor.utils.io.ByteBufferChannel.writeFully
  [15] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [16] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [17] kotlinx.coroutines.DispatchedTask.run
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 287245237 ns (0.40%), 15 samples
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.internal.RingBufferCapacity.tryReadAtMost
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [11] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [15] kotlinx.coroutines.BuildersKt.runBlocking$default
  [16] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [21] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [22] java.lang.reflect.Method.invoke
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.Executors$RunnableAdapter.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.ThreadPoolExecutor.runWorker
  [29] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [30] java.lang.Thread.run

--- 276807145 ns (0.39%), 12 samples
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.internal.RingBufferCapacity.completeRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 256511367 ns (0.36%), 18 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 6] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [11] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [12] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [16] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [18] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [19] kotlinx.coroutines.DispatchedTask.run
  [20] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [21] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [22] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [23] kotlinx.coroutines.BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [25] kotlinx.coroutines.BuildersKt.runBlocking$default
  [26] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [27] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [29] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [31] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [32] java.lang.reflect.Method.invoke
  [33] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] java.util.concurrent.FutureTask.run
  [36] java.util.concurrent.Executors$RunnableAdapter.call
  [37] java.util.concurrent.FutureTask.run
  [38] java.util.concurrent.ThreadPoolExecutor.runWorker
  [39] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [40] java.lang.Thread.run

--- 256077041 ns (0.36%), 17 samples
  [ 0] io.ktor.utils.io.internal.RingBufferCapacity.tryWriteAtMost
  [ 1] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 2] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeFully
  [ 4] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 246228505 ns (0.34%), 17 samples
  [ 0] __GI___pthread_mutex_lock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 246148432 ns (0.34%), 18 samples
  [ 0] __GI___pthread_mutex_lock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 236136845 ns (0.33%), 10 samples
  [ 0] java.util.concurrent.locks.LockSupport.unpark
  [ 1] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 2] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 3] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 4] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 5] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 6] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [16] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [17] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [18] kotlinx.coroutines.BuildersKt.runBlocking
  [19] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [20] kotlinx.coroutines.BuildersKt.runBlocking$default
  [21] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [22] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [23] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [24] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [25] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [26] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [27] java.lang.reflect.Method.invoke
  [28] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [29] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [30] java.util.concurrent.FutureTask.run
  [31] java.util.concurrent.Executors$RunnableAdapter.call
  [32] java.util.concurrent.FutureTask.run
  [33] java.util.concurrent.ThreadPoolExecutor.runWorker
  [34] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [35] java.lang.Thread.run

--- 235969828 ns (0.33%), 18 samples
  [ 0] io.ktor.utils.io.internal.RingBufferCapacity.tryLockForRelease
  [ 1] io.ktor.utils.io.ByteBufferChannel.restoreStateAfterRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.access$restoreStateAfterRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 225715664 ns (0.32%), 12 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 225615192 ns (0.32%), 10 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 215399469 ns (0.30%), 10 samples
  [ 0] io.ktor.utils.io.internal.ReadWriteBufferState$Initial.startWriting$ktor_io
  [ 1] io.ktor.utils.io.ByteBufferChannel.setupStateForWrite$ktor_io
  [ 2] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.access$writeSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 205497107 ns (0.29%), 10 samples
  [ 0] clock_gettime
  [ 1] [unknown_Java]

--- 205225149 ns (0.29%), 12 samples
  [ 0] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsKt.getCOROUTINE_SUSPENDED
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 4] io.ktor.benchmarks.FileBenchmarks$testKtorFakeFileRead$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 8] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 9] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [10] kotlinx.coroutines.BuildersKt.runBlocking
  [11] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [12] kotlinx.coroutines.BuildersKt.runBlocking$default
  [13] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [14] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [15] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [16] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [18] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [19] java.lang.reflect.Method.invoke
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.Executors$RunnableAdapter.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.ThreadPoolExecutor.runWorker
  [26] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [27] java.lang.Thread.run

--- 205209428 ns (0.29%), 15 samples
  [ 0] pthread_cond_timedwait@@GLIBC_2.3.2
  [ 1] [unknown]
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 205163075 ns (0.29%), 11 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 205041538 ns (0.29%), 12 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 195094718 ns (0.27%), 10 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [10] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [11] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [14] kotlinx.coroutines.BuildersKt.runBlocking$default
  [15] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [20] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [21] java.lang.reflect.Method.invoke
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.Executors$RunnableAdapter.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.ThreadPoolExecutor.runWorker
  [28] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [29] java.lang.Thread.run

--- 195080232 ns (0.27%), 15 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 194922642 ns (0.27%), 13 samples
  [ 0] __GI___pthread_mutex_trylock
  [ 1] [unknown]
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 194512753 ns (0.27%), 11 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 1] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 2] kotlin.coroutines.CombinedContext.fold
  [ 3] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 4] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 5] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 6] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 7] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 8] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 9] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [10] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [11] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [12] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [13] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [14] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [15] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [16] io.ktor.utils.io.ByteBufferChannel.writeFully
  [17] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [18] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [19] kotlinx.coroutines.DispatchedTask.run
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [22] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [23] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 184723959 ns (0.26%), 10 samples
  [ 0] java.lang.Object.equals
  [ 1] kotlin.coroutines.CoroutineContext$Element$DefaultImpls.get
  [ 2] kotlinx.coroutines.Job$DefaultImpls.get
  [ 3] kotlinx.coroutines.JobSupport.get
  [ 4] kotlin.coroutines.CombinedContext.get
  [ 5] io.ktor.utils.io.internal.CancellableReusableContinuation.parent
  [ 6] io.ktor.utils.io.internal.CancellableReusableContinuation.completeSuspendBlock
  [ 7] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [12] io.ktor.benchmarks.FileBenchmarks$testKtorFakeFileRead$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [16] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [17] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [18] kotlinx.coroutines.BuildersKt.runBlocking
  [19] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [20] kotlinx.coroutines.BuildersKt.runBlocking$default
  [21] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [22] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [23] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [24] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [25] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [26] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [27] java.lang.reflect.Method.invoke
  [28] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [29] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [30] java.util.concurrent.FutureTask.run
  [31] java.util.concurrent.Executors$RunnableAdapter.call
  [32] java.util.concurrent.FutureTask.run
  [33] java.util.concurrent.ThreadPoolExecutor.runWorker
  [34] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [35] java.lang.Thread.run

--- 184636240 ns (0.26%), 10 samples
  [ 0] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 1] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 184575411 ns (0.26%), 11 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [11] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [15] kotlinx.coroutines.BuildersKt.runBlocking$default
  [16] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [21] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [22] java.lang.reflect.Method.invoke
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.Executors$RunnableAdapter.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.ThreadPoolExecutor.runWorker
  [29] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [30] java.lang.Thread.run

--- 184515805 ns (0.26%), 12 samples
  [ 0] io.ktor.utils.io.pool.DefaultPool.popTop
  [ 1] io.ktor.utils.io.pool.DefaultPool.tryPop
  [ 2] io.ktor.utils.io.pool.DefaultPool.borrow
  [ 3] io.ktor.utils.io.ByteBufferChannel.newBuffer
  [ 4] io.ktor.utils.io.ByteBufferChannel.setupStateForWrite$ktor_io
  [ 5] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 6] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.writeFully
  [ 8] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 184442350 ns (0.26%), 12 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.<init>
  [ 1] kotlin.coroutines.jvm.internal.ContinuationImpl.<init>
  [ 2] kotlin.coroutines.jvm.internal.ContinuationImpl.<init>
  [ 3] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.<init>
  [ 4] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [ 7] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.writeFully
  [10] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [11] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [12] kotlinx.coroutines.DispatchedTask.run
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 184330067 ns (0.26%), 13 samples
  [ 0] kotlin.coroutines.CombinedContext.fold
  [ 1] kotlin.coroutines.CombinedContext.fold
  [ 2] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 3] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 4] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 5] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 6] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 7] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 8] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 9] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [10] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [11] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [13] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [14] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.writeFully
  [16] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [17] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [18] kotlinx.coroutines.DispatchedTask.run
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [22] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 184302279 ns (0.26%), 10 samples
  [ 0] kotlinx.coroutines.scheduling.LimitingDispatcher.afterTask
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 174486941 ns (0.24%), 13 samples
  [ 0] __GI___pthread_mutex_unlock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 174326993 ns (0.24%), 9 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 174224909 ns (0.24%), 11 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 1] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 2] kotlin.coroutines.CoroutineContext$Element$DefaultImpls.fold
  [ 3] kotlin.coroutines.AbstractCoroutineContextElement.fold
  [ 4] kotlin.coroutines.CombinedContext.fold
  [ 5] kotlin.coroutines.CombinedContext.fold
  [ 6] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 8] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 9] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [10] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [11] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [12] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [13] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [14] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [15] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [16] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [17] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [18] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [19] io.ktor.utils.io.ByteBufferChannel.writeFully
  [20] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [21] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [22] kotlinx.coroutines.DispatchedTask.run
  [23] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [24] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [25] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [26] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 173968466 ns (0.24%), 11 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.<init>
  [ 1] kotlin.coroutines.jvm.internal.ContinuationImpl.<init>
  [ 2] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.<init>
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.access$writeSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 165423720 ns (0.23%), 8 samples
  [ 0] kotlin.coroutines.CombinedContext.get
  [ 1] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 2] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 3] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 4] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 5] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 6] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [ 9] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [10] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [11] io.ktor.utils.io.ByteBufferChannel.writeFully
  [12] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 164258243 ns (0.23%), 10 samples
  [ 0] [vdso]
  [ 1] clock_gettime
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 164227817 ns (0.23%), 13 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 1] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 2] kotlin.coroutines.CoroutineContext$Element$DefaultImpls.fold
  [ 3] kotlinx.coroutines.Job$DefaultImpls.fold
  [ 4] kotlinx.coroutines.JobSupport.fold
  [ 5] kotlin.coroutines.CombinedContext.fold
  [ 6] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 8] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 9] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [10] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [11] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.benchmarks.FileBenchmarks$testKtorFakeFileRead$1.invokeSuspend
  [17] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [18] kotlinx.coroutines.DispatchedTask.run
  [19] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [20] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [21] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [22] kotlinx.coroutines.BuildersKt.runBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [24] kotlinx.coroutines.BuildersKt.runBlocking$default
  [25] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [26] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [27] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [28] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [29] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [30] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [31] java.lang.reflect.Method.invoke
  [32] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [33] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [34] java.util.concurrent.FutureTask.run
  [35] java.util.concurrent.Executors$RunnableAdapter.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.ThreadPoolExecutor.runWorker
  [38] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [39] java.lang.Thread.run

--- 164220220 ns (0.23%), 8 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryAcquireCpuPermit
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 164161576 ns (0.23%), 13 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [11] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [15] kotlinx.coroutines.BuildersKt.runBlocking$default
  [16] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [21] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [22] java.lang.reflect.Method.invoke
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.Executors$RunnableAdapter.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.ThreadPoolExecutor.runWorker
  [29] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [30] java.lang.Thread.run

--- 163881271 ns (0.23%), 7 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 163843318 ns (0.23%), 10 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 155609260 ns (0.22%), 9 samples
  [ 0] [vdso]
  [ 1] [unknown_Java]

--- 153984733 ns (0.22%), 11 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 2] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 3] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 4] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 5] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 6] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 7] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 8] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.flush
  [10] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [11] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.writeFully
  [13] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 153966200 ns (0.22%), 12 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [11] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [15] kotlinx.coroutines.BuildersKt.runBlocking$default
  [16] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [21] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [22] java.lang.reflect.Method.invoke
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.Executors$RunnableAdapter.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.ThreadPoolExecutor.runWorker
  [29] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [30] java.lang.Thread.run

--- 153841353 ns (0.22%), 9 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryReleaseCpu
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 153795140 ns (0.21%), 10 samples
  [ 0] __GI___pthread_mutex_unlock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 153745184 ns (0.21%), 11 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 144171794 ns (0.20%), 10 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 143707687 ns (0.20%), 7 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [ 1] io.ktor.utils.io.ByteBufferChannel$writeFullySuspend$5.invokeSuspend
  [ 2] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 3] kotlinx.coroutines.DispatchedTask.run
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 143685662 ns (0.20%), 10 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 143529500 ns (0.20%), 9 samples
  [ 0] itable stub
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 143490312 ns (0.20%), 9 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 4] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 5] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 6] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 7] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 8] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 9] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [10] io.ktor.utils.io.ByteBufferChannel.flush
  [11] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [12] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [13] io.ktor.utils.io.ByteBufferChannel.writeFully
  [14] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [15] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [16] kotlinx.coroutines.DispatchedTask.run
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 143405145 ns (0.20%), 10 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 1] kotlin.coroutines.CombinedContext.fold
  [ 2] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 3] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 4] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 5] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 6] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 7] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 8] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 9] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [10] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [11] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [13] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [14] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.writeFully
  [16] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [17] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [18] kotlinx.coroutines.DispatchedTask.run
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [22] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 143313520 ns (0.20%), 10 samples
  [ 0] java.nio.DirectByteBuffer.put
  [ 1] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 2] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeFully
  [ 4] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 133362165 ns (0.19%), 3 samples
  [ 0] __pthread_mutex_cond_lock
  [ 1] [unknown]
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 133306331 ns (0.19%), 6 samples
  [ 0] java.lang.invoke.VarHandleObjects$Array.setVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LIL_V
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.set
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 4] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 124641906 ns (0.17%), 8 samples
  [ 0] __GI___pthread_mutex_trylock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 123133688 ns (0.17%), 7 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.<init>
  [ 1] kotlin.coroutines.jvm.internal.ContinuationImpl.<init>
  [ 2] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.<init>
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 9] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [10] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [11] kotlinx.coroutines.BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [13] kotlinx.coroutines.BuildersKt.runBlocking$default
  [14] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [15] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [19] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [20] java.lang.reflect.Method.invoke
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.Executors$RunnableAdapter.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.ThreadPoolExecutor.runWorker
  [27] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [28] java.lang.Thread.run

--- 123065867 ns (0.17%), 7 samples
  [ 0] __futex_abstimed_wait_cancelable64
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 8] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 123042236 ns (0.17%), 9 samples
  [ 0] java.lang.invoke.VarHandleObjects$Array.getVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 4] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 122938207 ns (0.17%), 7 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 122904807 ns (0.17%), 9 samples
  [ 0] java.nio.DirectByteBuffer.put
  [ 1] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 2] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.access$writeSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 122771011 ns (0.17%), 7 samples
  [ 0] kotlin.Result.exceptionOrNull-impl
  [ 1] kotlinx.coroutines.CompletionStateKt.toState
  [ 2] kotlinx.coroutines.CompletionStateKt.toState$default
  [ 3] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 4] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 5] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 6] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.flush
  [ 8] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 9] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.writeFully
  [11] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 113034292 ns (0.16%), 5 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 1] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.access$writeSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 112800129 ns (0.16%), 6 samples
  [ 0] itable stub
  [ 1] kotlin.coroutines.CombinedContext.get
  [ 2] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 3] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 4] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 5] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 6] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 7] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [10] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [11] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.writeFully
  [13] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 112790761 ns (0.16%), 7 samples
  [ 0] itable stub
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 112754613 ns (0.16%), 5 samples
  [ 0] java.lang.invoke.VarHandleObjects$Array.setVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LIL_V
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.set
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 4] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 112690355 ns (0.16%), 6 samples
  [ 0] java.nio.Buffer.position
  [ 1] java.nio.ByteBuffer.position
  [ 2] java.nio.MappedByteBuffer.position
  [ 3] java.nio.DirectByteBuffer.put
  [ 4] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 5] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.writeFully
  [ 7] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 112628475 ns (0.16%), 10 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 112560471 ns (0.16%), 7 samples
  [ 0] java.lang.invoke.VarForm.getMemberName
  [ 1] java.lang.invoke.VarHandleGuards.guard_LIL_V
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.set
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 4] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 102666172 ns (0.14%), 4 samples
  [ 0] jdk.internal.misc.Unsafe.unpark
  [ 1] java.util.concurrent.locks.LockSupport.unpark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 5] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [10] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [11] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [15] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [16] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [17] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [18] kotlinx.coroutines.DispatchedTask.run
  [19] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [20] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [21] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [22] kotlinx.coroutines.BuildersKt.runBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [24] kotlinx.coroutines.BuildersKt.runBlocking$default
  [25] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [26] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [27] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [28] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [29] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [30] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [31] java.lang.reflect.Method.invoke
  [32] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [33] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [34] java.util.concurrent.FutureTask.run
  [35] java.util.concurrent.Executors$RunnableAdapter.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.ThreadPoolExecutor.runWorker
  [38] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [39] java.lang.Thread.run

--- 102664648 ns (0.14%), 6 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.getState
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.benchmarks.FileBenchmarks$testKtorFakeFileRead$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 9] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [10] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [11] kotlinx.coroutines.BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [13] kotlinx.coroutines.BuildersKt.runBlocking$default
  [14] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [15] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [19] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [20] java.lang.reflect.Method.invoke
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.Executors$RunnableAdapter.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.ThreadPoolExecutor.runWorker
  [27] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [28] java.lang.Thread.run

--- 102630642 ns (0.14%), 8 samples
  [ 0] java.lang.Thread.interrupted
  [ 1] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 2] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 3] kotlinx.coroutines.BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 6] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 102547380 ns (0.14%), 6 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 102528978 ns (0.14%), 6 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] io.ktor.utils.io.pool.DefaultPool.pushTop
  [ 2] io.ktor.utils.io.pool.DefaultPool.tryPush
  [ 3] io.ktor.utils.io.pool.DefaultPool.recycle
  [ 4] io.ktor.utils.io.ByteBufferChannel.releaseBuffer
  [ 5] io.ktor.utils.io.ByteBufferChannel.restoreStateAfterRead
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$restoreStateAfterRead
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [16] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [17] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [18] kotlinx.coroutines.BuildersKt.runBlocking
  [19] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [20] kotlinx.coroutines.BuildersKt.runBlocking$default
  [21] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [22] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [23] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [24] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [25] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [26] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [27] java.lang.reflect.Method.invoke
  [28] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [29] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [30] java.util.concurrent.FutureTask.run
  [31] java.util.concurrent.Executors$RunnableAdapter.call
  [32] java.util.concurrent.FutureTask.run
  [33] java.util.concurrent.ThreadPoolExecutor.runWorker
  [34] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [35] java.lang.Thread.run

--- 102528867 ns (0.14%), 6 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  [ 1] kotlinx.coroutines.EventLoopImplBase.enqueueImpl
  [ 2] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 3] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 4] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 5] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 6] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 7] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.access$flushImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [10] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [11] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [12] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [13] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [14] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [15] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [16] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [17] io.ktor.utils.io.ByteBufferChannel.writeFully
  [18] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [22] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [23] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [24] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 102450643 ns (0.14%), 6 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.afterTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 102384731 ns (0.14%), 5 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 102265188 ns (0.14%), 5 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForWrite$ktor_io
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.createTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 3] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 4] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 5] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 6] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 7] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 8] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 9] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [10] io.ktor.utils.io.ByteBufferChannel.flush
  [11] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [12] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [13] io.ktor.utils.io.ByteBufferChannel.access$writeSuspend
  [14] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
  [15] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [16] kotlinx.coroutines.DispatchedTask.run
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 92344008 ns (0.13%), 6 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForWrite$ktor_io
  [ 1] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 2] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.access$writeSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 92304104 ns (0.13%), 6 samples
  [ 0] io.ktor.benchmarks.FileBenchmarks$testKtorFakeFileRead$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 92297882 ns (0.13%), 5 samples
  [ 0] vtable stub
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 92264909 ns (0.13%), 5 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.releaseBuffer
  [ 1] io.ktor.utils.io.ByteBufferChannel.restoreStateAfterRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.access$restoreStateAfterRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 92225656 ns (0.13%), 4 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 92170926 ns (0.13%), 5 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 2] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 3] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 4] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 5] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 6] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 7] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 8] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.flush
  [10] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [11] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.writeFully
  [13] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 92110139 ns (0.13%), 7 samples
  [ 0] __GI___pthread_mutex_unlock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 5] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 6] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [10] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [11] io.ktor.utils.io.ByteBufferChannel.flush
  [12] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [13] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [14] io.ktor.utils.io.ByteBufferChannel.writeFully
  [15] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [16] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [17] kotlinx.coroutines.DispatchedTask.run
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 92100837 ns (0.13%), 5 samples
  [ 0] java.lang.invoke.VarHandleObjects$Array.setVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LIL_V
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.set
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 4] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 92086293 ns (0.13%), 6 samples
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.getAndSet
  [ 1] io.ktor.utils.io.internal.RingBufferCapacity.flush
  [ 2] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.flush
  [ 4] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 5] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.writeFully
  [ 7] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 92021524 ns (0.13%), 5 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 1] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [ 4] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.writeFully
  [ 7] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 82185767 ns (0.11%), 4 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.ByteBufferChannel.suspensionForSize
  [ 2] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.benchmarks.FileBenchmarks$testKtorFakeFileRead$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [11] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [15] kotlinx.coroutines.BuildersKt.runBlocking$default
  [16] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [21] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [22] java.lang.reflect.Method.invoke
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.Executors$RunnableAdapter.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.ThreadPoolExecutor.runWorker
  [29] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [30] java.lang.Thread.run

--- 82181116 ns (0.11%), 5 samples
  [ 0] java.nio.Buffer.position
  [ 1] java.nio.ByteBuffer.position
  [ 2] java.nio.MappedByteBuffer.position
  [ 3] java.nio.DirectByteBuffer.put
  [ 4] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 5] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [ 7] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.writeFully
  [10] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [11] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [12] kotlinx.coroutines.DispatchedTask.run
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 82175392 ns (0.11%), 3 samples
  [ 0] jdk.internal.misc.Unsafe.park
  [ 1] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 2] kotlinx.coroutines.BuildersKt.runBlocking
  [ 3] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 4] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 5] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 82142982 ns (0.11%), 7 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.inStack
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 82121190 ns (0.11%), 5 samples
  [ 0] kotlinx.coroutines.JobSupport.get
  [ 1] kotlin.coroutines.CombinedContext.get
  [ 2] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 3] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 4] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 9] io.ktor.benchmarks.FileBenchmarks$testKtorFakeFileRead$1.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [13] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt.runBlocking
  [16] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [17] kotlinx.coroutines.BuildersKt.runBlocking$default
  [18] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [20] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [22] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [23] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [24] java.lang.reflect.Method.invoke
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.Executors$RunnableAdapter.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.ThreadPoolExecutor.runWorker
  [31] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [32] java.lang.Thread.run

--- 82089673 ns (0.11%), 5 samples
  [ 0] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 1] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [ 4] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.writeFully
  [ 7] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 82072783 ns (0.11%), 4 samples
  [ 0] kotlinx.coroutines.DispatchedTask.run
  [ 1] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 2] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 3] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 7] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 82003689 ns (0.11%), 3 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 81889706 ns (0.11%), 6 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 72188067 ns (0.10%), 3 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  [ 1] kotlinx.coroutines.EventLoopImplBase.enqueueImpl
  [ 2] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 3] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 4] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 5] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 6] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 7] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.flush
  [ 9] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [10] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [11] io.ktor.utils.io.ByteBufferChannel.writeFully
  [12] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 71878645 ns (0.10%), 4 samples
  [ 0] jlong_arraycopy
  [ 1] jdk.internal.misc.Unsafe.copyMemory
  [ 2] java.nio.DirectByteBuffer.put
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.access$writeSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 71841678 ns (0.10%), 3 samples
  [ 0] kotlinx.coroutines.EventLoop.processUnconfinedEvent
  [ 1] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 2] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 3] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 7] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 71838128 ns (0.10%), 4 samples
  [ 0] jlong_arraycopy
  [ 1] java.nio.Buffer.position
  [ 2] java.nio.ByteBuffer.position
  [ 3] java.nio.MappedByteBuffer.position
  [ 4] java.nio.DirectByteBuffer.get
  [ 5] java.nio.HeapByteBuffer.put
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [15] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [16] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [17] kotlinx.coroutines.BuildersKt.runBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [19] kotlinx.coroutines.BuildersKt.runBlocking$default
  [20] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [21] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [22] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [23] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [24] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [25] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [26] java.lang.reflect.Method.invoke
  [27] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [28] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.Executors$RunnableAdapter.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.ThreadPoolExecutor.runWorker
  [33] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [34] java.lang.Thread.run

--- 71821282 ns (0.10%), 4 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryAcquireCpuPermit
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 71760731 ns (0.10%), 5 samples
  [ 0] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 1] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 2] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 3] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 4] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 5] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [15] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [16] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [17] kotlinx.coroutines.BuildersKt.runBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [19] kotlinx.coroutines.BuildersKt.runBlocking$default
  [20] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [21] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [22] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [23] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [24] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [25] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [26] java.lang.reflect.Method.invoke
  [27] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [28] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.Executors$RunnableAdapter.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.ThreadPoolExecutor.runWorker
  [33] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [34] java.lang.Thread.run

--- 71750378 ns (0.10%), 6 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [11] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [15] kotlinx.coroutines.BuildersKt.runBlocking$default
  [16] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [21] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [22] java.lang.reflect.Method.invoke
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.Executors$RunnableAdapter.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.ThreadPoolExecutor.runWorker
  [29] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [30] java.lang.Thread.run

--- 71729959 ns (0.10%), 4 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  [ 1] kotlinx.coroutines.EventLoopImplBase.enqueueImpl
  [ 2] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 3] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 4] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 5] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 6] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 7] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.flush
  [ 9] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [10] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [11] io.ktor.utils.io.ByteBufferChannel.access$writeSuspend
  [12] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 71725592 ns (0.10%), 5 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.<init>
  [ 1] kotlin.coroutines.jvm.internal.ContinuationImpl.<init>
  [ 2] kotlin.coroutines.jvm.internal.ContinuationImpl.<init>
  [ 3] io.ktor.utils.io.ByteBufferChannel$writeFullySuspend$5.<init>
  [ 4] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.writeFully
  [ 7] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 71631514 ns (0.10%), 5 samples
  [ 0] kotlinx.coroutines.DispatchedTask.run
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 71608537 ns (0.10%), 5 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.addLast
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.addLast
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 4] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 5] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [10] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [11] io.ktor.utils.io.ByteBufferChannel.flush
  [12] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [13] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [14] io.ktor.utils.io.ByteBufferChannel.writeFully
  [15] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [16] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [17] kotlinx.coroutines.DispatchedTask.run
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 71558657 ns (0.10%), 4 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 1] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.access$writeSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 61693138 ns (0.09%), 5 samples
  [ 0] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 61606219 ns (0.09%), 1 sample
  [ 0] kotlin.coroutines.CoroutineContext$Element$DefaultImpls.get
  [ 1] kotlinx.coroutines.Job$DefaultImpls.get
  [ 2] kotlinx.coroutines.JobSupport.get
  [ 3] kotlin.coroutines.CombinedContext.get
  [ 4] io.ktor.utils.io.internal.CancellableReusableContinuation.parent
  [ 5] io.ktor.utils.io.internal.CancellableReusableContinuation.completeSuspendBlock
  [ 6] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.benchmarks.FileBenchmarks$testKtorFakeFileRead$1.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [15] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [16] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [17] kotlinx.coroutines.BuildersKt.runBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [19] kotlinx.coroutines.BuildersKt.runBlocking$default
  [20] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [21] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [22] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [23] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [24] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [25] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [26] java.lang.reflect.Method.invoke
  [27] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [28] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.Executors$RunnableAdapter.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.ThreadPoolExecutor.runWorker
  [33] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [34] java.lang.Thread.run

--- 61549155 ns (0.09%), 3 samples
  [ 0] java.nio.ByteBuffer.order
  [ 1] io.ktor.utils.io.ByteBufferChannel.prepareBuffer
  [ 2] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [13] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt.runBlocking
  [16] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [17] kotlinx.coroutines.BuildersKt.runBlocking$default
  [18] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [20] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [22] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [23] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [24] java.lang.reflect.Method.invoke
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.Executors$RunnableAdapter.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.ThreadPoolExecutor.runWorker
  [31] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [32] java.lang.Thread.run

--- 61542426 ns (0.09%), 5 samples
  [ 0] jdk.internal.misc.Unsafe.unpark
  [ 1] java.util.concurrent.locks.LockSupport.unpark
  [ 2] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 3] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 4] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 5] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 6] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 7] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 8] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.flush
  [10] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [11] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.writeFully
  [13] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 61535175 ns (0.09%), 3 samples
  [ 0] java.lang.invoke.VarHandleObjects$Array.runtimeTypeCheck
  [ 1] java.lang.invoke.VarHandleObjects$Array.compareAndSet
  [ 2] java.lang.invoke.VarHandleGuards.guard_LILL_Z
  [ 3] java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet
  [ 4] io.ktor.utils.io.pool.DefaultPool.tryPush
  [ 5] io.ktor.utils.io.pool.DefaultPool.recycle
  [ 6] io.ktor.utils.io.ByteBufferChannel.releaseBuffer
  [ 7] io.ktor.utils.io.ByteBufferChannel.restoreStateAfterRead
  [ 8] io.ktor.utils.io.ByteBufferChannel.access$restoreStateAfterRead
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [13] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [14] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [15] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [16] kotlinx.coroutines.DispatchedTask.run
  [17] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [18] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [19] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [20] kotlinx.coroutines.BuildersKt.runBlocking
  [21] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [22] kotlinx.coroutines.BuildersKt.runBlocking$default
  [23] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [24] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [25] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [26] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [27] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [28] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [29] java.lang.reflect.Method.invoke
  [30] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [31] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [32] java.util.concurrent.FutureTask.run
  [33] java.util.concurrent.Executors$RunnableAdapter.call
  [34] java.util.concurrent.FutureTask.run
  [35] java.util.concurrent.ThreadPoolExecutor.runWorker
  [36] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [37] java.lang.Thread.run

--- 61519972 ns (0.09%), 3 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 3] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 8] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 61505263 ns (0.09%), 4 samples
  [ 0] __vdso_clock_gettime
  [ 1] [unknown_Java]

--- 61504317 ns (0.09%), 3 samples
  [ 0] kotlinx.coroutines.CoroutineDispatcher.get
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.benchmarks.FileBenchmarks$testKtorFakeFileRead$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 9] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [10] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [11] kotlinx.coroutines.BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [13] kotlinx.coroutines.BuildersKt.runBlocking$default
  [14] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [15] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [19] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [20] java.lang.reflect.Method.invoke
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.Executors$RunnableAdapter.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.ThreadPoolExecutor.runWorker
  [27] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [28] java.lang.Thread.run

--- 61494904 ns (0.09%), 3 samples
  [ 0] java.nio.MappedByteBuffer.position
  [ 1] java.nio.DirectByteBuffer.put
  [ 2] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.writeFully
  [ 5] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 61396700 ns (0.09%), 6 samples
  [ 0] io.ktor.utils.io.pool.DefaultPool.popTop
  [ 1] io.ktor.utils.io.pool.DefaultPool.tryPop
  [ 2] io.ktor.utils.io.pool.DefaultPool.borrow
  [ 3] io.ktor.utils.io.ByteBufferChannel.newBuffer
  [ 4] io.ktor.utils.io.ByteBufferChannel.setupStateForWrite$ktor_io
  [ 5] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 6] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [ 8] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.writeFully
  [11] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51445762 ns (0.07%), 3 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueueCore.addLast
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueue.addLast
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 5] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [11] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [12] io.ktor.utils.io.ByteBufferChannel.flush
  [13] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.writeFully
  [16] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [17] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [18] kotlinx.coroutines.DispatchedTask.run
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [22] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51399800 ns (0.07%), 1 sample
  [ 0] jdk.internal.misc.Unsafe.checkPointer
  [ 1] jdk.internal.misc.Unsafe.checkPrimitivePointer
  [ 2] jdk.internal.misc.Unsafe.copyMemoryChecks
  [ 3] jdk.internal.misc.Unsafe.copyMemory
  [ 4] java.nio.DirectByteBuffer.put
  [ 5] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 6] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.writeFully
  [ 8] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51348584 ns (0.07%), 3 samples
  [ 0] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 1] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 2] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 3] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 4] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 9] io.ktor.benchmarks.FileBenchmarks$testKtorFakeFileRead$1.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [13] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt.runBlocking
  [16] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [17] kotlinx.coroutines.BuildersKt.runBlocking$default
  [18] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [20] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [22] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [23] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [24] java.lang.reflect.Method.invoke
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.Executors$RunnableAdapter.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.ThreadPoolExecutor.runWorker
  [31] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [32] java.lang.Thread.run

--- 51336712 ns (0.07%), 2 samples
  [ 0] pthread_mutex_unlock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51320944 ns (0.07%), 3 samples
  [ 0] kotlin.coroutines.ContinuationInterceptor$DefaultImpls.get
  [ 1] kotlinx.coroutines.CoroutineDispatcher.get
  [ 2] kotlin.coroutines.CombinedContext.get
  [ 3] io.ktor.utils.io.internal.CancellableReusableContinuation.parent
  [ 4] io.ktor.utils.io.internal.CancellableReusableContinuation.completeSuspendBlock
  [ 5] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [10] io.ktor.benchmarks.FileBenchmarks$testKtorFakeFileRead$1.invokeSuspend
  [11] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [12] kotlinx.coroutines.DispatchedTask.run
  [13] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [14] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [16] kotlinx.coroutines.BuildersKt.runBlocking
  [17] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [18] kotlinx.coroutines.BuildersKt.runBlocking$default
  [19] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [20] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [21] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [22] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [23] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [24] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [25] java.lang.reflect.Method.invoke
  [26] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [27] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.Executors$RunnableAdapter.call
  [30] java.util.concurrent.FutureTask.run
  [31] java.util.concurrent.ThreadPoolExecutor.runWorker
  [32] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [33] java.lang.Thread.run

--- 51309116 ns (0.07%), 4 samples
  [ 0] __GI___pthread_mutex_trylock
  [ 1] [unknown]
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 51308058 ns (0.07%), 3 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 7] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking
  [10] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [11] kotlinx.coroutines.BuildersKt.runBlocking$default
  [12] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [13] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [14] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [15] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [16] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [17] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.run

--- 51305640 ns (0.07%), 4 samples
  [ 0] io.ktor.utils.io.internal.RingBufferCapacity.resetForWrite
  [ 1] io.ktor.utils.io.ByteBufferChannel.newBuffer
  [ 2] io.ktor.utils.io.ByteBufferChannel.setupStateForWrite$ktor_io
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.access$writeSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51302311 ns (0.07%), 4 samples
  [ 0] kotlinx.coroutines.CoroutineDispatcher.get
  [ 1] kotlin.coroutines.CombinedContext.get
  [ 2] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 3] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 4] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 5] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 6] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 7] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [10] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [11] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.writeFully
  [13] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51300486 ns (0.07%), 3 samples
  [ 0] __tls_get_addr
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51294536 ns (0.07%), 3 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51281882 ns (0.07%), 5 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.inStack
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51280659 ns (0.07%), 3 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 51279988 ns (0.07%), 4 samples
  [ 0] [vdso]
  [ 1] clock_gettime
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 51276254 ns (0.07%), 4 samples
  [ 0] __pthread_enable_asynccancel
  [ 1] [unknown]
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 51268614 ns (0.07%), 4 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 51264100 ns (0.07%), 2 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 4] io.ktor.benchmarks.FileBenchmarks$testKtorFakeFileRead$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 8] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 9] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [10] kotlinx.coroutines.BuildersKt.runBlocking
  [11] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [12] kotlinx.coroutines.BuildersKt.runBlocking$default
  [13] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [14] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [15] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [16] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [18] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [19] java.lang.reflect.Method.invoke
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.Executors$RunnableAdapter.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.ThreadPoolExecutor.runWorker
  [26] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [27] java.lang.Thread.run

--- 51246351 ns (0.07%), 3 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
  [ 1] java.lang.Integer.valueOf
  [ 2] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 3] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 4] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 5] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 6] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 7] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 8] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 9] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [10] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [11] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [13] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [14] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.writeFully
  [16] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [17] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [18] kotlinx.coroutines.DispatchedTask.run
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [22] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51231536 ns (0.07%), 4 samples
  [ 0] clock_gettime
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51224040 ns (0.07%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForWrite$ktor_io
  [ 1] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 2] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeFully
  [ 4] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51209017 ns (0.07%), 4 samples
  [ 0] __pthread_mutex_unlock_usercnt
  [ 1] [unknown]
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51208814 ns (0.07%), 3 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 1] io.ktor.utils.io.ByteBufferChannel.flush
  [ 2] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.writeFully
  [ 5] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51199218 ns (0.07%), 2 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 1] kotlin.coroutines.CombinedContext.fold
  [ 2] kotlin.coroutines.CombinedContext.fold
  [ 3] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 4] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 5] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 6] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 7] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 8] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 9] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [10] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [11] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [12] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [13] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [14] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [15] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [16] io.ktor.utils.io.ByteBufferChannel.writeFully
  [17] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [18] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [19] kotlinx.coroutines.DispatchedTask.run
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [22] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [23] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51179118 ns (0.07%), 2 samples
  [ 0] kotlin.coroutines.CombinedContext.fold
  [ 1] kotlin.coroutines.CombinedContext.fold
  [ 2] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 3] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 4] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 5] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 6] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 7] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 8] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 9] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [10] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [11] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [13] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [14] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.writeFully
  [16] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [17] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [18] kotlinx.coroutines.DispatchedTask.run
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [22] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51175653 ns (0.07%), 4 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryReleaseCpu
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51172864 ns (0.07%), 4 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.addLast
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.addLast
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 4] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 5] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [10] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [11] io.ktor.utils.io.ByteBufferChannel.flush
  [12] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [13] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [14] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [15] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [16] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [17] io.ktor.utils.io.ByteBufferChannel.writeFully
  [18] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [22] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [23] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [24] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51164486 ns (0.07%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 1] io.ktor.utils.io.ByteBufferChannel.writeAvailable$suspendImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.writeAvailable
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.writeFully
  [ 6] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51162970 ns (0.07%), 4 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51144133 ns (0.07%), 4 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51136986 ns (0.07%), 4 samples
  [ 0] pthread_cond_timedwait@@GLIBC_2.3.2
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51098129 ns (0.07%), 2 samples
  [ 0] jdk.internal.misc.Unsafe.park
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 41150352 ns (0.06%), 1 sample
  [ 0] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 41147647 ns (0.06%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel.newBuffer
  [ 1] io.ktor.utils.io.ByteBufferChannel.setupStateForWrite$ktor_io
  [ 2] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.access$writeSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 41125835 ns (0.06%), 2 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.inStack
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 41108740 ns (0.06%), 2 samples
  [ 0] java.util.concurrent.locks.LockSupport.setBlocker
  [ 1] java.util.concurrent.locks.LockSupport.parkNanos
  [ 2] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 3] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 7] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 41107404 ns (0.06%), 2 samples
  [ 0] pthread_cond_timedwait
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 41104319 ns (0.06%), 3 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 41087483 ns (0.06%), 1 sample
  [ 0] kotlinx.coroutines.EventLoopImplBase.enqueueImpl
  [ 1] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 2] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 3] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 4] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 5] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [15] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [16] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [17] kotlinx.coroutines.BuildersKt.runBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [19] kotlinx.coroutines.BuildersKt.runBlocking$default
  [20] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [21] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [22] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [23] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [24] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [25] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [26] java.lang.reflect.Method.invoke
  [27] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [28] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.Executors$RunnableAdapter.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.ThreadPoolExecutor.runWorker
  [33] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [34] java.lang.Thread.run

--- 41082323 ns (0.06%), 1 sample
  [ 0] io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 41057013 ns (0.06%), 3 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.restoreStateAfterRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.getClosed
  [ 2] io.ktor.utils.io.ByteBufferChannel.tryTerminate$ktor_io
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 41051363 ns (0.06%), 2 samples
  [ 0] kotlin.coroutines.CoroutineContext$Element$DefaultImpls.fold
  [ 1] kotlinx.coroutines.Job$DefaultImpls.fold
  [ 2] kotlinx.coroutines.JobSupport.fold
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [10] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [11] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [14] kotlinx.coroutines.BuildersKt.runBlocking$default
  [15] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [20] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [21] java.lang.reflect.Method.invoke
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.Executors$RunnableAdapter.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.ThreadPoolExecutor.runWorker
  [28] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [29] java.lang.Thread.run

--- 41038791 ns (0.06%), 3 samples
  [ 0] __GI___pthread_mutex_trylock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 41037135 ns (0.06%), 2 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.getState
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$getState
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [11] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [15] kotlinx.coroutines.BuildersKt.runBlocking$default
  [16] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [21] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [22] java.lang.reflect.Method.invoke
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.Executors$RunnableAdapter.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.ThreadPoolExecutor.runWorker
  [29] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [30] java.lang.Thread.run

--- 41035661 ns (0.06%), 4 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 41030383 ns (0.06%), 3 samples
  [ 0] kotlinx.coroutines.internal.DispatchedContinuation.getReusableCancellableContinuation
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 6] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking
  [ 9] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [10] kotlinx.coroutines.BuildersKt.runBlocking$default
  [11] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [13] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [15] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [16] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.run

--- 41029988 ns (0.06%), 1 sample
  [ 0] jdk.internal.misc.Unsafe.unpark
  [ 1] java.util.concurrent.locks.LockSupport.unpark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 41029195 ns (0.06%), 4 samples
  [ 0] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 1] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testKtorFakeFileRead
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFakeFileRead_jmhTest.testKtorFakeFileRead_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 41026912 ns (0.06%), 3 samples
  [ 0] java.nio.MappedByteBuffer.position
  [ 1] java.nio.DirectByteBuffer.put
  [ 2] io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.access$writeSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

          ns  percent  samples  top
  ----------  -------  -------  ---
 14599885759   20.41%      932  /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
 13369718455   18.69%      827  __GI___pthread_mutex_unlock
  7923412268   11.08%      479  __pthread_cond_signal
  3128840305    4.37%      193  jlong_disjoint_arraycopy
  3006016713    4.20%      201  __tls_get_addr
  2003703990    2.80%      129  kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  1446193659    2.02%       96  jdk.internal.misc.Unsafe.park
  1220224359    1.71%       70  java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  1191433036    1.67%       85  [vdso]
   943909665    1.32%       58  __GI___pthread_mutex_lock
   737840898    1.03%       48  kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
   625102133    0.87%       31  __futex_abstimed_wait_cancelable64
   604991209    0.85%       44  pthread_cond_timedwait@@GLIBC_2.3.2
   584563933    0.82%       28  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
   573943840    0.80%       37  io.ktor.utils.io.pool.DefaultPool.popTop
   564197462    0.79%       30  kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
   543873930    0.76%       32  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.setNextParkedWorker
   523208210    0.73%       32  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
   513056476    0.72%       32  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryAcquireCpuPermit
   512256180    0.72%       28  kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
   481838431    0.67%       31  itable stub
   471442039    0.66%       32  kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
   451392450    0.63%       27  kotlinx.coroutines.EventLoopImplBase.dequeue
   420945612    0.59%       26  java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
   411912455    0.58%       28  __GI___pthread_mutex_trylock
   379173724    0.53%       20  java.lang.invoke.VarHandleObjects$Array.setVolatile
   378949288    0.53%       21  kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
   359111921    0.50%       29  io.ktor.utils.io.ByteBufferChannel.setupStateForRead
   358573684    0.50%       22  kotlin.coroutines.jvm.internal.ContinuationImpl.<init>
   338033414    0.47%       19  io.ktor.utils.io.ByteBufferChannel.setupStateForWrite$ktor_io
   307531408    0.43%       21  kotlin.coroutines.jvm.internal.BaseContinuationImpl.<init>
   307232208    0.43%       23  java.nio.DirectByteBuffer.put
   307225524    0.43%       20  io.ktor.utils.io.internal.RingBufferCapacity.tryWriteAtMost
   297053253    0.42%       19  io.ktor.utils.io.ByteBufferChannel.writeFullySuspend
   287523437    0.40%       17  clock_gettime
   277153945    0.39%       12  java.util.concurrent.locks.LockSupport.unpark
   276800185    0.39%       19  io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
   266546893    0.37%       14  io.ktor.utils.io.ByteBufferChannel.writeAsMuchAsPossible
   256409574    0.36%       17  kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue
   255944983    0.36%       17  kotlin.coroutines.CombinedContext.fold
   235969828    0.33%       18  io.ktor.utils.io.internal.RingBufferCapacity.tryLockForRelease
   235955906    0.33%       12  jdk.internal.misc.Unsafe.unpark
   225657920    0.32%       12  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
   225399260    0.32%       16  kotlinx.coroutines.DispatchedTask.run
   216757996    0.30%       13  kotlin.coroutines.CombinedContext.get
   215399469    0.30%       10  io.ktor.utils.io.internal.ReadWriteBufferState$Initial.startWriting$ktor_io
   215265393    0.30%       14  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryReleaseCpu
   214944260    0.30%       14  io.ktor.utils.io.ByteBufferChannel.flushImpl
   205266666    0.29%       12  io.ktor.benchmarks.StupidChannelKt$readChannel$1.invokeSuspend
   205245472    0.29%       11  java.lang.Object.equals
   205225149    0.29%       12  kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsKt.getCOROUTINE_SUSPENDED
   205170175    0.29%       12  io.ktor.utils.io.ByteBufferChannel.getState
   205135493    0.29%       12  java.nio.Buffer.position
   195094718    0.27%       10  io.ktor.utils.io.ByteBufferChannel.bytesRead
   184809556    0.26%       15  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.inStack
   184302279    0.26%       10  kotlinx.coroutines.scheduling.LimitingDispatcher.afterTask
   174381355    0.24%       12  vtable stub
   174344034    0.24%        9  io.ktor.benchmarks.FileBenchmarks$testKtorFakeFileRead$1.invokeSuspend
   174017159    0.24%       12  kotlinx.coroutines.internal.LockFreeTaskQueueCore.addLast
   153871700    0.22%       10  java.lang.invoke.VarHandleObjects$Array.getVolatile
   143716773    0.20%        8  jlong_arraycopy
   143566606    0.20%        9  kotlinx.coroutines.CoroutineDispatcher.get
   143562744    0.20%        9  kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
   133543258    0.19%        8  io.ktor.utils.io.ByteBufferChannel.writeSuspend
   133362165    0.19%        3  __pthread_mutex_cond_lock
   133203253    0.19%        8  java.nio.MappedByteBuffer.position
   133159690    0.19%        9  kotlin.coroutines.ContinuationInterceptor$DefaultImpls.get
   133025134    0.19%        9  java.lang.invoke.VarForm.getMemberName
   122938207    0.17%        7  io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
   122771011    0.17%        7  kotlin.Result.exceptionOrNull-impl
   112893270    0.16%        9  java.lang.Thread.interrupted
   112799090    0.16%        4  kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
   112712529    0.16%        8  kotlinx.coroutines.EventLoopImplPlatform.unpark
   102450643    0.14%        6  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.afterTask
   102413733    0.14%        5  kotlinx.coroutines.internal.DispatchedContinuation.takeState$kotlinx_coroutines_core
    92308694    0.13%        7  io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
    92278757    0.13%        7  __pthread_enable_asynccancel
    92264909    0.13%        5  io.ktor.utils.io.ByteBufferChannel.releaseBuffer
    92225656    0.13%        4  io.ktor.utils.io.ByteBufferChannel$writeSuspend$1.invokeSuspend
    92086293    0.13%        6  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.getAndSet
    82122287    0.11%        5  io.ktor.utils.io.ByteBufferChannel.restoreStateAfterRead
    82121190    0.11%        5  kotlinx.coroutines.JobSupport.get
    82036984    0.11%        4  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
    71841678    0.10%        3  kotlinx.coroutines.EventLoop.processUnconfinedEvent
    71827766    0.10%        4  io.ktor.utils.io.ByteBufferChannel.newBuffer
    71789376    0.10%        6  kotlinx.coroutines.internal.DispatchedContinuation.getReusableCancellableContinuation
    71787090    0.10%        5  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
    71782970    0.10%        5  io.ktor.utils.io.ByteBufferChannel$writeFullySuspend$5.invokeSuspend
    71752684    0.10%        4  java.nio.ByteBuffer.order
    71745311    0.10%        4  java.lang.invoke.VarHandleObjects$Array.runtimeTypeCheck
    71740236    0.10%        5  __vdso_clock_gettime
    71725605    0.10%        5  __pthread_mutex_unlock_usercnt
    71678670    0.10%        5  io.ktor.utils.io.ByteBufferChannel.writeFully$suspendImpl
    71555383    0.10%        3  pthread_mutex_unlock@plt
    61642750    0.09%        2  jdk.internal.misc.Unsafe.checkPointer
    61606219    0.09%        1  kotlin.coroutines.CoroutineContext$Element$DefaultImpls.get
    61592507    0.09%        5  kotlinx.coroutines.scheduling.CoroutineScheduler.createTask
    61577213    0.09%        3  kotlinx.coroutines.scheduling.CoroutineScheduler.submitToLocalQueue
    61557824    0.09%        4  kotlinx.coroutines.internal.DispatchedContinuation.<init>
    61451971    0.09%        4  pthread_mutex_lock
    61404588    0.09%        3  __tls_get_addr@plt
    61376385    0.09%        5  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
    51400090    0.07%        3  java.util.concurrent.locks.LockSupport.setBlocker
    51336712    0.07%        2  pthread_mutex_unlock
    51308058    0.07%        3  io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
    51305640    0.07%        4  io.ktor.utils.io.internal.RingBufferCapacity.resetForWrite
    51294116    0.07%        3  pthread_cond_timedwait
    51264100    0.07%        2  io.ktor.utils.io.ByteBufferChannel.readSuspend
    51259155    0.07%        5  io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
    51238797    0.07%        4  kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
    51213319    0.07%        5  jdk.internal.misc.Unsafe.checkPrimitiveArray
    51177672    0.07%        5  java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.getAndSet
    51177022    0.07%        3  __pthread_disable_asynccancel
    51146222    0.07%        4  io.ktor.utils.io.ByteBufferChannel.access$getState
    41150352    0.06%        1  kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
    41087483    0.06%        1  kotlinx.coroutines.EventLoopImplBase.enqueueImpl
    41057342    0.06%        3  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.getAndAdd
    41055908    0.06%        2  io.ktor.utils.io.ByteBufferChannel.prepareBuffer
    41051363    0.06%        2  kotlin.coroutines.CoroutineContext$Element$DefaultImpls.fold
    41024345    0.06%        4  java.lang.Integer.intValue
    41013742    0.06%        2  kotlinx.coroutines.JobSupport.getState$kotlinx_coroutines_core
    41000627    0.06%        3  io.ktor.utils.io.ByteBufferChannel.getClosed
    40952851    0.06%        3  java.util.concurrent.ConcurrentLinkedQueue.poll
    40926913    0.06%        3  jdk.internal.misc.Unsafe.copyMemory
    40902839    0.06%        3  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
    31025012    0.04%        3  kotlinx.coroutines.internal.DispatchedContinuation.getContext
    30809331    0.04%        2  java.lang.invoke.VarHandleObjects$Array.compareAndSet
    30797621    0.04%        2  kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush
    30793255    0.04%        3  pthread_cond_signal
    30777445    0.04%        2  kotlinx.coroutines.CompletionStateKt.toState
    30772988    0.04%        1  java.nio.HeapByteBuffer.put
    30765771    0.04%        2  io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
    30746425    0.04%        3  io.ktor.utils.io.ByteBufferChannel.resumeReadOp
    30731203    0.04%        2  io.ktor.utils.io.ByteBufferChannel.setTotalBytesRead$ktor_io
    30724094    0.04%        3  kotlinx.coroutines.scheduling.CoroutineScheduler.currentWorker
    30708582    0.04%        2  jdk.internal.misc.Unsafe.checkNativeAddress
    30695833    0.04%        1  java.nio.Buffer.limit
    20615346    0.03%        2  kotlinx.coroutines.EventLoopImplBase.processNextEvent
    20590926    0.03%        1  java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.accessCheck
    20576428    0.03%        2  kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
    20564846    0.03%        1  java.lang.invoke.VarHandleGuards.guard_LIL_V
    20558317    0.03%        1  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.getIndexInArray
    20524110    0.03%        1  jdk.internal.misc.Unsafe.checkSize
    20522876    0.03%        1  kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion.updateHead
    20513835    0.03%        2  io.ktor.utils.io.ByteBufferChannel.writeSuspendPredicate
    20512521    0.03%        2  kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
    20510298    0.03%        2  io.ktor.utils.io.core.ByteOrder.getNioOrder
    20505618    0.03%        2  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
    20502795    0.03%        1  kotlinx.coroutines.internal.DispatchedContinuation.awaitReusability
    20502308    0.03%        2  kotlin.coroutines.jvm.internal.Boxing.boxInt
    20500174    0.03%        2  kotlinx.coroutines.BlockingCoroutine.joinBlocking
    20499200    0.03%        2  java.util.concurrent.locks.LockSupport.parkNanos
    20487169    0.03%        1  java.util.concurrent.atomic.AtomicReferenceArray.get
    20481587    0.03%        1  kotlinx.coroutines.JobSupport.fold
    20461774    0.03%        1  kotlinx.coroutines.scheduling.LimitingDispatcher.getTaskMode
    10283409    0.01%        1  io.ktor.utils.io.ByteBufferChannel.getWriteByteOrder
    10278227    0.01%        1  io.ktor.utils.io.pool.DefaultPool.tryPush
    10278199    0.01%        1  __pthread_cleanup_push
    10273885    0.01%        1  io.ktor.utils.io.ByteBufferChannel.suspensionForSize
    10267908    0.01%        1  kotlinx.coroutines.JobSupport.nextChild
    10262943    0.01%        1  jdk.internal.misc.Unsafe.copyMemoryChecks
    10254752    0.01%        1  io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
    10254743    0.01%        1  kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource
    10254005    0.01%        1  kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
    10251255    0.01%        1  io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
    10250981    0.01%        1  io.ktor.utils.io.internal.RingBufferCapacity.completeRead
    10249833    0.01%        1  java.util.concurrent.atomic.AtomicReferenceArray.set
    10245660    0.01%        1  kotlin.coroutines.AbstractCoroutineContextElement.fold
    10245226    0.01%        1  unsafe_arraycopy
    10240738    0.01%        1  java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.valueCheck
    10240244    0.01%        1  io.ktor.utils.io.pool.DefaultPool.pushTop
    10237543    0.01%        1  kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
    10235578    0.01%        1  kotlinx.coroutines.scheduling.CoroutineScheduler.isTerminated
    10231292    0.01%        1  kotlinx.coroutines.EventLoopImplBase.enqueue
    10228327    0.01%        1  pthread_mutex_trylock@plt
    10224358    0.01%        1  java.lang.invoke.VarHandleObjects$Array.getAndSet
    10222868    0.01%        1  kotlinx.coroutines.internal.DispatchedContinuationKt.resumeCancellableWith
    10218070    0.01%        1  kotlinx.coroutines.DispatchedTask.getExceptionalResult$kotlinx_coroutines_core
    10214281    0.01%        1  kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
    10210274    0.01%        1  io.ktor.utils.io.ByteBufferChannel.access$writeSuspendPredicate
    10207241    0.01%        1  io.ktor.utils.io.ByteBufferChannel.bytesWritten
    10197236    0.01%        1  kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackNextIndex
    10182635    0.01%        1  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.accessCheck
    10181324    0.01%        1  io.ktor.utils.io.ByteBufferChannel.getWriteOp

