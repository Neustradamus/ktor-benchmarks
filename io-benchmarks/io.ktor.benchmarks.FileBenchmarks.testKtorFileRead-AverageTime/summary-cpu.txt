--- Execution profile ---
Total samples       : 5106
unknown_Java        : 7 (0.14%)

--- 13590000000 ns (26.62%), 1359 samples
  [ 0] __psynch_cvwait
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking$default
  [10] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [15] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.run

--- 4650000000 ns (9.11%), 465 samples
  [ 0] __psynch_cvwait
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 4540000000 ns (8.89%), 454 samples
  [ 0] __psynch_cvsignal
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 3700000000 ns (7.25%), 370 samples
  [ 0] __psynch_cvwait
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 2000000000 ns (3.92%), 200 samples
  [ 0] jdk.internal.misc.Unsafe.park
  [ 1] java.util.concurrent.locks.LockSupport.parkNanos
  [ 2] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 3] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 7] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 1550000000 ns (3.04%), 155 samples
  [ 0] read
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1540000000 ns (3.02%), 154 samples
  [ 0] __gettimeofday
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking$default
  [10] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [15] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.run

--- 1390000000 ns (2.72%), 139 samples
  [ 0] __psynch_cvwait
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1240000000 ns (2.43%), 124 samples
  [ 0] __psynch_cvsignal
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 930000000 ns (1.82%), 93 samples
  [ 0] jdk.internal.misc.Unsafe.park
  [ 1] java.util.concurrent.locks.LockSupport.parkNanos
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 570000000 ns (1.12%), 57 samples
  [ 0] __psynch_cvsignal
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 550000000 ns (1.08%), 55 samples
  [ 0] __psynch_cvsignal
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 5] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 6] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [10] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [11] io.ktor.utils.io.ByteBufferChannel.flush
  [12] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 450000000 ns (0.88%), 45 samples
  [ 0] read
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 430000000 ns (0.84%), 43 samples
  [ 0] read
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 420000000 ns (0.82%), 42 samples
  [ 0] jlong_disjoint_arraycopy
  [ 1] java.nio.Buffer.position
  [ 2] java.nio.ByteBuffer.position
  [ 3] java.nio.MappedByteBuffer.position
  [ 4] java.nio.MappedByteBuffer.position
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [11] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [12] kotlinx.coroutines.DispatchedTask.run
  [13] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [14] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [16] kotlinx.coroutines.BuildersKt.runBlocking
  [17] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [18] kotlinx.coroutines.BuildersKt.runBlocking$default
  [19] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [20] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [21] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [22] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [23] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [24] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [25] java.lang.reflect.Method.invoke
  [26] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [27] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.Executors$RunnableAdapter.call
  [30] java.util.concurrent.FutureTask.run
  [31] java.util.concurrent.ThreadPoolExecutor.runWorker
  [32] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [33] java.lang.Thread.run

--- 390000000 ns (0.76%), 39 samples
  [ 0] __gettimeofday
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 360000000 ns (0.71%), 36 samples
  [ 0] __os_ch_md_redzone_cookie
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking$default
  [10] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [15] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.run

--- 350000000 ns (0.69%), 35 samples
  [ 0] __psynch_cvsignal
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 5] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 6] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [10] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [11] io.ktor.utils.io.ByteBufferChannel.flush
  [12] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 330000000 ns (0.65%), 33 samples
  [ 0] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 8] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 330000000 ns (0.65%), 33 samples
  [ 0] __gettimeofday
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 310000000 ns (0.61%), 31 samples
  [ 0] __psynch_cvsignal
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 300000000 ns (0.59%), 30 samples
  [ 0] jdk.internal.misc.Unsafe.park
  [ 1] java.util.concurrent.locks.LockSupport.parkNanos
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 290000000 ns (0.57%), 29 samples
  [ 0] err_codes_mach_rcv
  [ 1] __os_ch_md_redzone_cookie
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking
  [ 9] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [10] kotlinx.coroutines.BuildersKt.runBlocking$default
  [11] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [13] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [15] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [16] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.run

--- 230000000 ns (0.45%), 23 samples
  [ 0] Parker::park(bool, long)
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 230000000 ns (0.45%), 23 samples
  [ 0] jlong_disjoint_arraycopy
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [10] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [11] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [14] kotlinx.coroutines.BuildersKt.runBlocking$default
  [15] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [20] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [21] java.lang.reflect.Method.invoke
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.Executors$RunnableAdapter.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.ThreadPoolExecutor.runWorker
  [28] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [29] java.lang.Thread.run

--- 220000000 ns (0.43%), 22 samples
  [ 0] err_codes_mach_rcv
  [ 1] Parker::unpark()
  [ 2] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 3] jdk.internal.misc.Unsafe.unpark
  [ 4] java.util.concurrent.locks.LockSupport.unpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 8] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [11] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [12] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [13] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [14] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [17] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [19] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [20] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [21] kotlinx.coroutines.DispatchedTask.run
  [22] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [23] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [24] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt.runBlocking
  [26] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [27] kotlinx.coroutines.BuildersKt.runBlocking$default
  [28] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [30] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [32] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [33] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [34] java.lang.reflect.Method.invoke
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [37] java.util.concurrent.FutureTask.run
  [38] java.util.concurrent.Executors$RunnableAdapter.call
  [39] java.util.concurrent.FutureTask.run
  [40] java.util.concurrent.ThreadPoolExecutor.runWorker
  [41] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [42] java.lang.Thread.run

--- 200000000 ns (0.39%), 20 samples
  [ 0] os::javaTimeNanos()
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.createTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 3] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 4] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 5] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 6] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 7] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 8] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [13] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [14] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [15] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [16] kotlinx.coroutines.DispatchedTask.run
  [17] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [18] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [19] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [20] kotlinx.coroutines.BuildersKt.runBlocking
  [21] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [22] kotlinx.coroutines.BuildersKt.runBlocking$default
  [23] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [24] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [25] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [26] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [27] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [28] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [29] java.lang.reflect.Method.invoke
  [30] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [31] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [32] java.util.concurrent.FutureTask.run
  [33] java.util.concurrent.Executors$RunnableAdapter.call
  [34] java.util.concurrent.FutureTask.run
  [35] java.util.concurrent.ThreadPoolExecutor.runWorker
  [36] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [37] java.lang.Thread.run

--- 180000000 ns (0.35%), 18 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 170000000 ns (0.33%), 17 samples
  [ 0] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 1] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 170000000 ns (0.33%), 17 samples
  [ 0] __psynch_cvsignal
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 5] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 6] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [10] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [11] io.ktor.utils.io.ByteBufferChannel.flush
  [12] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 160000000 ns (0.31%), 16 samples
  [ 0] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 160000000 ns (0.31%), 16 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.createTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 2] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 3] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 4] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 5] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 6] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 7] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [13] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [17] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [19] kotlinx.coroutines.BuildersKt.runBlocking
  [20] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [21] kotlinx.coroutines.BuildersKt.runBlocking$default
  [22] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [23] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [24] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [25] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [26] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [27] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [28] java.lang.reflect.Method.invoke
  [29] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [30] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.Executors$RunnableAdapter.call
  [33] java.util.concurrent.FutureTask.run
  [34] java.util.concurrent.ThreadPoolExecutor.runWorker
  [35] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [36] java.lang.Thread.run

--- 150000000 ns (0.29%), 15 samples
  [ 0] kotlinx.coroutines.EventLoop.processUnconfinedEvent
  [ 1] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 2] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 3] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 7] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 150000000 ns (0.29%), 15 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 1] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 2] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 3] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 4] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 5] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [10] io.ktor.benchmarks.FileBenchmarks$testKtorFileRead$1.invokeSuspend
  [11] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [12] kotlinx.coroutines.DispatchedTask.run
  [13] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [14] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [16] kotlinx.coroutines.BuildersKt.runBlocking
  [17] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [18] kotlinx.coroutines.BuildersKt.runBlocking$default
  [19] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [20] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [21] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [22] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [23] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [24] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [25] java.lang.reflect.Method.invoke
  [26] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [27] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.Executors$RunnableAdapter.call
  [30] java.util.concurrent.FutureTask.run
  [31] java.util.concurrent.ThreadPoolExecutor.runWorker
  [32] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [33] java.lang.Thread.run

--- 140000000 ns (0.27%), 14 samples
  [ 0] __psynch_cvwait
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 130000000 ns (0.25%), 13 samples
  [ 0] err_codes_iokit_usb
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking$default
  [10] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [15] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.run

--- 120000000 ns (0.24%), 12 samples
  [ 0] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 6] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [11] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [12] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [16] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [18] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [19] kotlinx.coroutines.DispatchedTask.run
  [20] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [21] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [22] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [23] kotlinx.coroutines.BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [25] kotlinx.coroutines.BuildersKt.runBlocking$default
  [26] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [27] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [29] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [31] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [32] java.lang.reflect.Method.invoke
  [33] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] java.util.concurrent.FutureTask.run
  [36] java.util.concurrent.Executors$RunnableAdapter.call
  [37] java.util.concurrent.FutureTask.run
  [38] java.util.concurrent.ThreadPoolExecutor.runWorker
  [39] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [40] java.lang.Thread.run

--- 120000000 ns (0.24%), 12 samples
  [ 0] kotlin.coroutines.jvm.internal.Boxing.boxBoolean
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.benchmarks.FileBenchmarks$testKtorFileRead$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 9] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [10] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [11] kotlinx.coroutines.BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [13] kotlinx.coroutines.BuildersKt.runBlocking$default
  [14] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [15] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [19] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [20] java.lang.reflect.Method.invoke
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.Executors$RunnableAdapter.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.ThreadPoolExecutor.runWorker
  [27] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [28] java.lang.Thread.run

--- 120000000 ns (0.24%), 12 samples
  [ 0] err_codes_mach_rcv
  [ 1] Mutex::lock_without_safepoint_check()
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking
  [ 9] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [10] kotlinx.coroutines.BuildersKt.runBlocking$default
  [11] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [13] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [15] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [16] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.run

--- 120000000 ns (0.24%), 12 samples
  [ 0] __commpage_gettimeofday_internal
  [ 1] [unknown]
  [ 2] [unknown]
  [ 3] to_abstime(timespec*, long, bool, bool)
  [ 4] Parker::park(bool, long)
  [ 5] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 6] jdk.internal.misc.Unsafe.park
  [ 7] java.util.concurrent.locks.LockSupport.parkNanos
  [ 8] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 9] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [10] kotlinx.coroutines.BuildersKt.runBlocking
  [11] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [12] kotlinx.coroutines.BuildersKt.runBlocking$default
  [13] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [14] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [15] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [16] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [18] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [19] java.lang.reflect.Method.invoke
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.Executors$RunnableAdapter.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.ThreadPoolExecutor.runWorker
  [26] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [27] java.lang.Thread.run

--- 90000000 ns (0.18%), 9 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  [ 1] kotlinx.coroutines.EventLoopImplBase.dequeue
  [ 2] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 3] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 8] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 90000000 ns (0.18%), 9 samples
  [ 0] itable stub
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 90000000 ns (0.18%), 9 samples
  [ 0] __os_ch_md_redzone_cookie
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 90000000 ns (0.18%), 9 samples
  [ 0] __gettimeofday
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 90000000 ns (0.18%), 9 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [11] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [15] kotlinx.coroutines.BuildersKt.runBlocking$default
  [16] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [21] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [22] java.lang.reflect.Method.invoke
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.Executors$RunnableAdapter.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.ThreadPoolExecutor.runWorker
  [29] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [30] java.lang.Thread.run

--- 90000000 ns (0.18%), 9 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 3] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 8] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 80000000 ns (0.16%), 8 samples
  [ 0] java.lang.Thread.interrupted
  [ 1] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 2] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 3] kotlinx.coroutines.BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 6] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 80000000 ns (0.16%), 8 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 80000000 ns (0.16%), 8 samples
  [ 0] java.nio.Buffer.scope
  [ 1] java.nio.ByteBuffer.putBuffer
  [ 2] java.nio.ByteBuffer.put
  [ 3] java.nio.HeapByteBuffer.put
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [13] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt.runBlocking
  [16] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [17] kotlinx.coroutines.BuildersKt.runBlocking$default
  [18] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [20] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [22] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [23] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [24] java.lang.reflect.Method.invoke
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.Executors$RunnableAdapter.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.ThreadPoolExecutor.runWorker
  [31] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [32] java.lang.Thread.run

--- 70000000 ns (0.14%), 7 samples
  [ 0] read
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 70000000 ns (0.14%), 7 samples
  [ 0] internal_catch_exc_subsystem
  [ 1] __os_ch_md_redzone_cookie
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking
  [ 9] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [10] kotlinx.coroutines.BuildersKt.runBlocking$default
  [11] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [13] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [15] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [16] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.run

--- 70000000 ns (0.14%), 7 samples
  [ 0] java_lang_Thread::set_thread_status(oopDesc*, JavaThreadStatus)
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 70000000 ns (0.14%), 7 samples
  [ 0] Parker::park(bool, long)
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 70000000 ns (0.14%), 7 samples
  [ 0] internal_catch_exc_subsystem
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking$default
  [10] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [15] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.run

--- 70000000 ns (0.14%), 7 samples
  [ 0] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 1] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 70000000 ns (0.14%), 7 samples
  [ 0] kotlin.coroutines.jvm.internal.Boxing.boxBoolean
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 8] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 9] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [10] kotlinx.coroutines.BuildersKt.runBlocking
  [11] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [12] kotlinx.coroutines.BuildersKt.runBlocking$default
  [13] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [14] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [15] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [16] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [18] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [19] java.lang.reflect.Method.invoke
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.Executors$RunnableAdapter.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.ThreadPoolExecutor.runWorker
  [26] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [27] java.lang.Thread.run

--- 70000000 ns (0.14%), 7 samples
  [ 0] __psynch_mutexwait
  [ 1] err_codes_iokit_usb
  [ 2] Parker::unpark()
  [ 3] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 4] jdk.internal.misc.Unsafe.unpark
  [ 5] java.util.concurrent.locks.LockSupport.unpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 9] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [10] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [11] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [12] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [13] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [14] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [15] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [17] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [18] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [19] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [20] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [21] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [22] kotlinx.coroutines.DispatchedTask.run
  [23] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [24] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [26] kotlinx.coroutines.BuildersKt.runBlocking
  [27] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [28] kotlinx.coroutines.BuildersKt.runBlocking$default
  [29] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [30] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [31] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [32] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [33] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [34] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [35] java.lang.reflect.Method.invoke
  [36] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [37] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.Executors$RunnableAdapter.call
  [40] java.util.concurrent.FutureTask.run
  [41] java.util.concurrent.ThreadPoolExecutor.runWorker
  [42] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [43] java.lang.Thread.run

--- 70000000 ns (0.14%), 7 samples
  [ 0] err_codes_mach_rcv
  [ 1] __os_ch_md_redzone_cookie
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 70000000 ns (0.14%), 7 samples
  [ 0] Parker::park(bool, long)
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 70000000 ns (0.14%), 7 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.flush
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 70000000 ns (0.14%), 7 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.suspensionForSize
  [ 1] kotlin.coroutines.jvm.internal.Boxing.boxBoolean
  [ 2] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.benchmarks.FileBenchmarks$testKtorFileRead$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [10] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [11] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [14] kotlinx.coroutines.BuildersKt.runBlocking$default
  [15] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [20] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [21] java.lang.reflect.Method.invoke
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.Executors$RunnableAdapter.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.ThreadPoolExecutor.runWorker
  [28] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [29] java.lang.Thread.run

--- 70000000 ns (0.14%), 7 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [11] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [15] kotlinx.coroutines.BuildersKt.runBlocking$default
  [16] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [21] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [22] java.lang.reflect.Method.invoke
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.Executors$RunnableAdapter.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.ThreadPoolExecutor.runWorker
  [29] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [30] java.lang.Thread.run

--- 60000000 ns (0.12%), 6 samples
  [ 0] __psynch_cvsignal
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60000000 ns (0.12%), 6 samples
  [ 0] err_codes_mach_rcv
  [ 1] Parker::unpark()
  [ 2] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 3] jdk.internal.misc.Unsafe.unpark
  [ 4] java.util.concurrent.locks.LockSupport.unpark
  [ 5] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 6] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 7] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [11] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [12] io.ktor.utils.io.ByteBufferChannel.flush
  [13] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60000000 ns (0.12%), 6 samples
  [ 0] ThreadsListHandle::ThreadsListHandle(Thread*)
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 60000000 ns (0.12%), 6 samples
  [ 0] ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**)
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 60000000 ns (0.12%), 6 samples
  [ 0] err_codes_mach_rcv
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking$default
  [10] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [15] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.run

--- 60000000 ns (0.12%), 6 samples
  [ 0] err_codes_mach_rcv
  [ 1] __os_ch_md_redzone_cookie
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60000000 ns (0.12%), 6 samples
  [ 0] err_codes_iokit_usb
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 60000000 ns (0.12%), 6 samples
  [ 0] io.ktor.utils.io.core.ByteOrder.getNioOrder
  [ 1] io.ktor.utils.io.ByteBufferChannel.prepareBuffer
  [ 2] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [13] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt.runBlocking
  [16] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [17] kotlinx.coroutines.BuildersKt.runBlocking$default
  [18] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [20] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [22] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [23] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [24] java.lang.reflect.Method.invoke
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.Executors$RunnableAdapter.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.ThreadPoolExecutor.runWorker
  [31] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [32] java.lang.Thread.run

--- 50000000 ns (0.10%), 5 samples
  [ 0] [unknown]
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking$default
  [10] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [15] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.run

--- 50000000 ns (0.10%), 5 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [11] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [15] kotlinx.coroutines.BuildersKt.runBlocking$default
  [16] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [21] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [22] java.lang.reflect.Method.invoke
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.Executors$RunnableAdapter.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.ThreadPoolExecutor.runWorker
  [29] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [30] java.lang.Thread.run

--- 50000000 ns (0.10%), 5 samples
  [ 0] kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource
  [ 1] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 2] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 3] kotlinx.coroutines.BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 6] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 50000000 ns (0.10%), 5 samples
  [ 0] JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool)
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 50000000 ns (0.10%), 5 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryReleaseCpu
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] java.nio.Buffer.scope
  [ 1] java.nio.ByteBuffer.putBuffer
  [ 2] java.nio.ByteBuffer.put
  [ 3] java.nio.HeapByteBuffer.put
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [13] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt.runBlocking
  [16] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [17] kotlinx.coroutines.BuildersKt.runBlocking$default
  [18] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [20] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [22] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [23] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [24] java.lang.reflect.Method.invoke
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.Executors$RunnableAdapter.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.ThreadPoolExecutor.runWorker
  [31] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [32] java.lang.Thread.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] __os_ch_md_redzone_cookie
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] jlong_disjoint_arraycopy
  [ 1] java.nio.MappedByteBuffer.position
  [ 2] java.nio.MappedByteBuffer.position
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.internal.RingBufferCapacity.tryWriteAtLeast
  [ 2] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] io.ktor.benchmarks.FileBenchmarks$testKtorFileRead$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] jdk.internal.misc.Unsafe.checkPrimitivePointer
  [ 1] jdk.internal.misc.Unsafe.copyMemoryChecks
  [ 2] jdk.internal.misc.Unsafe.copyMemory
  [ 3] jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal
  [ 4] jdk.internal.misc.ScopedMemoryAccess.copyMemory
  [ 5] java.nio.ByteBuffer.putBuffer
  [ 6] java.nio.ByteBuffer.put
  [ 7] java.nio.HeapByteBuffer.put
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [13] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [17] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [19] kotlinx.coroutines.BuildersKt.runBlocking
  [20] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [21] kotlinx.coroutines.BuildersKt.runBlocking$default
  [22] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [23] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [24] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [25] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [26] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [27] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [28] java.lang.reflect.Method.invoke
  [29] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [30] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.Executors$RunnableAdapter.call
  [33] java.util.concurrent.FutureTask.run
  [34] java.util.concurrent.ThreadPoolExecutor.runWorker
  [35] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [36] java.lang.Thread.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.accessCheck
  [ 1] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 3] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 8] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] __os_ch_md_redzone_cookie
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] java_lang_Thread::set_thread_status(oopDesc*, JavaThreadStatus)
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.flush
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] JavaThread::threadObj() const
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] internal_catch_exc_subsystem
  [ 1] __os_ch_md_redzone_cookie
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ull, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ull>::oop_access_barrier(void*)
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 40000000 ns (0.08%), 4 samples
  [ 0] kotlin.coroutines.ContinuationInterceptor$DefaultImpls.get
  [ 1] kotlinx.coroutines.CoroutineDispatcher.get
  [ 2] kotlin.coroutines.CombinedContext.get
  [ 3] io.ktor.utils.io.internal.CancellableReusableContinuation.parent
  [ 4] io.ktor.utils.io.internal.CancellableReusableContinuation.completeSuspendBlock
  [ 5] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [13] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt.runBlocking
  [16] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [17] kotlinx.coroutines.BuildersKt.runBlocking$default
  [18] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [20] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [22] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [23] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [24] java.lang.reflect.Method.invoke
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.Executors$RunnableAdapter.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.ThreadPoolExecutor.runWorker
  [31] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [32] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] [unknown]
  [ 1] [unknown]
  [ 2] to_abstime(timespec*, long, bool, bool)
  [ 3] Parker::park(bool, long)
  [ 4] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 5] jdk.internal.misc.Unsafe.park
  [ 6] java.util.concurrent.locks.LockSupport.parkNanos
  [ 7] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking
  [10] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [11] kotlinx.coroutines.BuildersKt.runBlocking$default
  [12] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [13] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [14] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [15] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [16] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [17] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] java_lang_Thread::set_thread_status(oopDesc*, JavaThreadStatus)
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 8] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] to_abstime(timespec*, long, bool, bool)
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking$default
  [10] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [15] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] java.nio.DirectByteBuffer.duplicate
  [ 1] io.ktor.util.BufferViewJvmKt.read
  [ 2] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] mach_absolute_time
  [ 1] __commpage_gettimeofday_internal
  [ 2] [unknown]
  [ 3] [unknown]
  [ 4] to_abstime(timespec*, long, bool, bool)
  [ 5] Parker::park(bool, long)
  [ 6] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 7] jdk.internal.misc.Unsafe.park
  [ 8] java.util.concurrent.locks.LockSupport.parkNanos
  [ 9] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [10] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [11] kotlinx.coroutines.BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [13] kotlinx.coroutines.BuildersKt.runBlocking$default
  [14] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [15] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [19] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [20] java.lang.reflect.Method.invoke
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.Executors$RunnableAdapter.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.ThreadPoolExecutor.runWorker
  [27] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [28] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] sun.nio.ch.FileDispatcherImpl.read0
  [ 1] sun.nio.ch.FileDispatcherImpl.read
  [ 2] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 3] sun.nio.ch.IOUtil.read
  [ 4] sun.nio.ch.FileChannelImpl.read
  [ 5] io.ktor.util.BufferViewJvmKt.read
  [ 6] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] err_codes_mach_rcv
  [ 1] Mutex::lock_without_safepoint_check()
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] java.nio.Buffer.remaining
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [10] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [11] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [14] kotlinx.coroutines.BuildersKt.runBlocking$default
  [15] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [20] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [21] java.lang.reflect.Method.invoke
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.Executors$RunnableAdapter.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.ThreadPoolExecutor.runWorker
  [28] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [29] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [10] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [11] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [14] kotlinx.coroutines.BuildersKt.runBlocking$default
  [15] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [20] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [21] java.lang.reflect.Method.invoke
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.Executors$RunnableAdapter.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.ThreadPoolExecutor.runWorker
  [28] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [29] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] SafeThreadsListPtr::release_stable_list()
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.addLast
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.addLast
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 4] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 5] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 9] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [10] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [14] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [15] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [16] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [17] kotlinx.coroutines.DispatchedTask.run
  [18] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [19] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [20] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [21] kotlinx.coroutines.BuildersKt.runBlocking
  [22] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [23] kotlinx.coroutines.BuildersKt.runBlocking$default
  [24] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [25] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [26] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [27] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [28] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [29] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [30] java.lang.reflect.Method.invoke
  [31] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [32] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [33] java.util.concurrent.FutureTask.run
  [34] java.util.concurrent.Executors$RunnableAdapter.call
  [35] java.util.concurrent.FutureTask.run
  [36] java.util.concurrent.ThreadPoolExecutor.runWorker
  [37] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [38] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.createTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 2] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 3] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 4] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 5] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 6] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 7] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [13] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [17] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [19] kotlinx.coroutines.BuildersKt.runBlocking
  [20] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [21] kotlinx.coroutines.BuildersKt.runBlocking$default
  [22] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [23] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [24] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [25] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [26] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [27] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [28] java.lang.reflect.Method.invoke
  [29] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [30] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.Executors$RunnableAdapter.call
  [33] java.util.concurrent.FutureTask.run
  [34] java.util.concurrent.ThreadPoolExecutor.runWorker
  [35] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [36] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] mach_host_special_port_for_id.hsp_ids
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] Mutex::lock_without_safepoint_check()
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking$default
  [10] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [15] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] os::javaTimeNanos()
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 2] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 3] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 4] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 5] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 6] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 7] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [13] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [17] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [19] kotlinx.coroutines.BuildersKt.runBlocking
  [20] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [21] kotlinx.coroutines.BuildersKt.runBlocking$default
  [22] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [23] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [24] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [25] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [26] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [27] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [28] java.lang.reflect.Method.invoke
  [29] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [30] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.Executors$RunnableAdapter.call
  [33] java.util.concurrent.FutureTask.run
  [34] java.util.concurrent.ThreadPoolExecutor.runWorker
  [35] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [36] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] jdk.internal.misc.Unsafe.unpark
  [ 1] java.util.concurrent.locks.LockSupport.unpark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 5] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [10] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [11] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [15] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [16] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [17] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [18] kotlinx.coroutines.DispatchedTask.run
  [19] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [20] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [21] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [22] kotlinx.coroutines.BuildersKt.runBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [24] kotlinx.coroutines.BuildersKt.runBlocking$default
  [25] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [26] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [27] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [28] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [29] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [30] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [31] java.lang.reflect.Method.invoke
  [32] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [33] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [34] java.util.concurrent.FutureTask.run
  [35] java.util.concurrent.Executors$RunnableAdapter.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.ThreadPoolExecutor.runWorker
  [38] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [39] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] err_codes_iokit_usb
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.accessCheck
  [ 1] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] itable stub
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] [unknown]
  [ 1] to_abstime(timespec*, long, bool, bool)
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking
  [ 9] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [10] kotlinx.coroutines.BuildersKt.runBlocking$default
  [11] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [13] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [15] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [16] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] java.nio.ByteBuffer.put
  [ 1] java.nio.HeapByteBuffer.put
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [11] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [15] kotlinx.coroutines.BuildersKt.runBlocking$default
  [16] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [21] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [22] java.lang.reflect.Method.invoke
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.Executors$RunnableAdapter.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.ThreadPoolExecutor.runWorker
  [29] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [30] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] vtable stub
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 1] kotlin.coroutines.CombinedContext.fold
  [ 2] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 3] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 4] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 5] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 6] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 7] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [12] io.ktor.benchmarks.FileBenchmarks$testKtorFileRead$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [16] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [17] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [18] kotlinx.coroutines.BuildersKt.runBlocking
  [19] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [20] kotlinx.coroutines.BuildersKt.runBlocking$default
  [21] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [22] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [23] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [24] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [25] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [26] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [27] java.lang.reflect.Method.invoke
  [28] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [29] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [30] java.util.concurrent.FutureTask.run
  [31] java.util.concurrent.Executors$RunnableAdapter.call
  [32] java.util.concurrent.FutureTask.run
  [33] java.util.concurrent.ThreadPoolExecutor.runWorker
  [34] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [35] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.suspensionForSize
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.benchmarks.FileBenchmarks$testKtorFileRead$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [10] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [11] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [14] kotlinx.coroutines.BuildersKt.runBlocking$default
  [15] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [20] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [21] java.lang.reflect.Method.invoke
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.Executors$RunnableAdapter.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.ThreadPoolExecutor.runWorker
  [28] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [29] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] java_lang_Thread::get_thread_status(oopDesc*)
  [ 1] JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking$default
  [10] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [15] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] err_codes_iokit_usb
  [ 1] Parker::unpark()
  [ 2] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 3] jdk.internal.misc.Unsafe.unpark
  [ 4] java.util.concurrent.locks.LockSupport.unpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 8] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [11] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [12] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [13] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [14] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [17] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [19] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [20] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [21] kotlinx.coroutines.DispatchedTask.run
  [22] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [23] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [24] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt.runBlocking
  [26] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [27] kotlinx.coroutines.BuildersKt.runBlocking$default
  [28] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [30] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [32] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [33] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [34] java.lang.reflect.Method.invoke
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [37] java.util.concurrent.FutureTask.run
  [38] java.util.concurrent.Executors$RunnableAdapter.call
  [39] java.util.concurrent.FutureTask.run
  [40] java.util.concurrent.ThreadPoolExecutor.runWorker
  [41] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [42] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.flush
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] jdk.internal.misc.Unsafe.unpark
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.addLast
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 4] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 5] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 9] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [10] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [14] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [15] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [16] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [17] kotlinx.coroutines.DispatchedTask.run
  [18] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [19] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [20] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [21] kotlinx.coroutines.BuildersKt.runBlocking
  [22] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [23] kotlinx.coroutines.BuildersKt.runBlocking$default
  [24] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [25] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [26] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [27] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [28] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [29] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [30] java.lang.reflect.Method.invoke
  [31] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [32] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [33] java.util.concurrent.FutureTask.run
  [34] java.util.concurrent.Executors$RunnableAdapter.call
  [35] java.util.concurrent.FutureTask.run
  [36] java.util.concurrent.ThreadPoolExecutor.runWorker
  [37] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [38] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] err_codes_mach_rcv
  [ 1] Parker::unpark()
  [ 2] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 3] jdk.internal.misc.Unsafe.unpark
  [ 4] java.util.concurrent.locks.LockSupport.unpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] mach_absolute_time
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] __commpage_gettimeofday
  [ 1] [unknown]
  [ 2] to_abstime(timespec*, long, bool, bool)
  [ 3] Parker::park(bool, long)
  [ 4] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 5] jdk.internal.misc.Unsafe.park
  [ 6] java.util.concurrent.locks.LockSupport.parkNanos
  [ 7] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking
  [10] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [11] kotlinx.coroutines.BuildersKt.runBlocking$default
  [12] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [13] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [14] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [15] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [16] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [17] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [18] java.lang.reflect.Method.invoke
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.Executors$RunnableAdapter.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.ThreadPoolExecutor.runWorker
  [25] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [26] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] __psynch_cvsignal
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 5] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 6] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [10] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [11] io.ktor.utils.io.ByteBufferChannel.flush
  [12] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] io.ktor.utils.io.internal.RingBufferCapacity.tryWriteAtLeast
  [ 1] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 2] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] Parker::park(bool, long)
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] JavaFrameAnchor::make_walkable(JavaThread*)
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 1] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 2] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 3] kotlinx.coroutines.BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 6] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] err_codes_iokit_usb
  [ 1] Parker::unpark()
  [ 2] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 3] jdk.internal.misc.Unsafe.unpark
  [ 4] java.util.concurrent.locks.LockSupport.unpark
  [ 5] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 6] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 7] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [11] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [12] io.ktor.utils.io.ByteBufferChannel.flush
  [13] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] err_codes_mach_rcv
  [ 1] __os_ch_md_redzone_cookie
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 30000000 ns (0.06%), 3 samples
  [ 0] PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&, Node_List&, bool)
  [ 1] PhaseChaitin::post_allocate_copy_removal()
  [ 2] PhaseChaitin::Register_Allocate()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] __os_ch_md_redzone_cookie
  [12] internal_catch_exc_subsystem

--- 20000000 ns (0.04%), 2 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueueCore.addLast
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueue.addLast
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 6] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [11] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [12] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [16] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [18] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [19] kotlinx.coroutines.DispatchedTask.run
  [20] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [21] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [22] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [23] kotlinx.coroutines.BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [25] kotlinx.coroutines.BuildersKt.runBlocking$default
  [26] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [27] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [29] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [31] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [32] java.lang.reflect.Method.invoke
  [33] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] java.util.concurrent.FutureTask.run
  [36] java.util.concurrent.Executors$RunnableAdapter.call
  [37] java.util.concurrent.FutureTask.run
  [38] java.util.concurrent.ThreadPoolExecutor.runWorker
  [39] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [40] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] internal_catch_exc_subsystem
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] kotlin.coroutines.CombinedContext.fold
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 2] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 3] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 4] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 5] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 6] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.benchmarks.FileBenchmarks$testKtorFileRead$1.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [15] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [16] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [17] kotlinx.coroutines.BuildersKt.runBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [19] kotlinx.coroutines.BuildersKt.runBlocking$default
  [20] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [21] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [22] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [23] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [24] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [25] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [26] java.lang.reflect.Method.invoke
  [27] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [28] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.Executors$RunnableAdapter.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.ThreadPoolExecutor.runWorker
  [33] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [34] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 6] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking
  [ 9] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [10] kotlinx.coroutines.BuildersKt.runBlocking$default
  [11] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [13] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [15] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [16] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [17] java.lang.reflect.Method.invoke
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.Executors$RunnableAdapter.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.ThreadPoolExecutor.runWorker
  [24] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [25] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] __os_ch_md_redzone_cookie
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 5] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 6] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [10] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [11] io.ktor.utils.io.ByteBufferChannel.flush
  [12] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] JavaThread::is_interrupted(bool)
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking$default
  [10] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [15] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool)
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] [unknown]
  [ 1] to_abstime(timespec*, long, bool, bool)
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] itable stub
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] err_codes_iokit_usb
  [ 1] Parker::unpark()
  [ 2] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 3] jdk.internal.misc.Unsafe.unpark
  [ 4] java.util.concurrent.locks.LockSupport.unpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [11] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [15] kotlinx.coroutines.BuildersKt.runBlocking$default
  [16] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [21] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [22] java.lang.reflect.Method.invoke
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.Executors$RunnableAdapter.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.ThreadPoolExecutor.runWorker
  [29] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [30] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 3] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 8] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] os::javaTimeNanos()
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] err_codes_mach_rcv
  [ 1] Parker::unpark()
  [ 2] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 3] jdk.internal.misc.Unsafe.unpark
  [ 4] java.util.concurrent.locks.LockSupport.unpark
  [ 5] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 6] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 7] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [11] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [12] io.ktor.utils.io.ByteBufferChannel.flush
  [13] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.access$flushImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 4] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 5] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 6] io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] os::javaTimeNanos()
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryReleaseCpu
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 1] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 2] kotlinx.coroutines.BuildersKt.runBlocking
  [ 3] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 4] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 5] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] io.ktor.utils.io.internal.RingBufferCapacity.tryWriteAtLeast
  [ 1] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 2] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.getWriteOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 3] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 8] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] internal_catch_exc_subsystem
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] err_codes_iokit_usb
  [ 1] Parker::unpark()
  [ 2] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 3] jdk.internal.misc.Unsafe.unpark
  [ 4] java.util.concurrent.locks.LockSupport.unpark
  [ 5] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 6] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 7] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [11] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [12] io.ktor.utils.io.ByteBufferChannel.flush
  [13] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] __psynch_mutexwait
  [ 1] err_codes_iokit_usb
  [ 2] Parker::unpark()
  [ 3] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 4] jdk.internal.misc.Unsafe.unpark
  [ 5] java.util.concurrent.locks.LockSupport.unpark
  [ 6] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 7] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 8] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 9] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [10] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [12] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [13] io.ktor.utils.io.ByteBufferChannel.flush
  [14] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [15] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [16] kotlinx.coroutines.DispatchedTask.run
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] oopDesc::address_field(int) const
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] io.ktor.benchmarks.FileBenchmarks$testKtorFileRead$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.accessCheck
  [ 1] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] PhaseChaitin::gather_lrg_masks(bool)
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 20000000 ns (0.04%), 2 samples
  [ 0] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ull, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ull>::oop_access_barrier(void*)
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 8] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] I2C/C2I adapters
  [ 1] [unknown_Java]

--- 20000000 ns (0.04%), 2 samples
  [ 0] kotlinx.coroutines.DispatchedTask.run
  [ 1] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 2] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 3] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 7] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 1] kotlin.coroutines.jvm.internal.Boxing.boxBoolean
  [ 2] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 9] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [10] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [11] kotlinx.coroutines.BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [13] kotlinx.coroutines.BuildersKt.runBlocking$default
  [14] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [15] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [19] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [20] java.lang.reflect.Method.invoke
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.Executors$RunnableAdapter.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.ThreadPoolExecutor.runWorker
  [27] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [28] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.valueCheck
  [ 1] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  [ 2] io.ktor.utils.io.internal.CancellableReusableContinuation.completeSuspendBlock
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [11] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [15] kotlinx.coroutines.BuildersKt.runBlocking$default
  [16] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [21] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [22] java.lang.reflect.Method.invoke
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.Executors$RunnableAdapter.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.ThreadPoolExecutor.runWorker
  [29] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [30] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] __os_ch_md_redzone_cookie
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] io.ktor.utils.io.internal.RingBufferCapacity.tryReadAtMost
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [10] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [11] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [14] kotlinx.coroutines.BuildersKt.runBlocking$default
  [15] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [20] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [21] java.lang.reflect.Method.invoke
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.Executors$RunnableAdapter.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.ThreadPoolExecutor.runWorker
  [28] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [29] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] java.lang.Integer.intValue
  [ 1] io.ktor.benchmarks.FileBenchmarks$testKtorFileRead$1.invokeSuspend
  [ 2] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 3] kotlinx.coroutines.DispatchedTask.run
  [ 4] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 5] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking
  [ 8] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 9] kotlinx.coroutines.BuildersKt.runBlocking$default
  [10] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [12] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [14] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [15] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [16] java.lang.reflect.Method.invoke
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.Executors$RunnableAdapter.call
  [21] java.util.concurrent.FutureTask.run
  [22] java.util.concurrent.ThreadPoolExecutor.runWorker
  [23] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [24] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.accessCheck
  [ 1] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] kotlinx.coroutines.scheduling.LimitingDispatcher.afterTask
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] semaphore_wait_trap
  [ 1] GangWorker::loop()
  [ 2] Thread::call_run()
  [ 3] thread_native_entry(Thread*)
  [ 4] __os_ch_md_redzone_cookie
  [ 5] internal_catch_exc_subsystem

--- 20000000 ns (0.04%), 2 samples
  [ 0] __psynch_cvwait
  [ 1] os::PlatformMonitor::wait(long)
  [ 2] Monitor::wait_without_safepoint_check(long long)
  [ 3] WatcherThread::sleep() const
  [ 4] WatcherThread::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 20000000 ns (0.04%), 2 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.accessCheck
  [ 1] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 2] io.ktor.utils.io.internal.RingBufferCapacity.tryReadAtMost
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] jdk.internal.misc.Unsafe.checkPrimitivePointer
  [ 1] jdk.internal.misc.Unsafe.copyMemoryChecks
  [ 2] jdk.internal.misc.Unsafe.copyMemory
  [ 3] jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal
  [ 4] jdk.internal.misc.ScopedMemoryAccess.copyMemory
  [ 5] java.nio.ByteBuffer.putBuffer
  [ 6] java.nio.ByteBuffer.put
  [ 7] java.nio.HeapByteBuffer.put
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [13] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [17] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [19] kotlinx.coroutines.BuildersKt.runBlocking
  [20] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [21] kotlinx.coroutines.BuildersKt.runBlocking$default
  [22] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [23] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [24] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [25] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [26] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [27] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [28] java.lang.reflect.Method.invoke
  [29] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [30] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.Executors$RunnableAdapter.call
  [33] java.util.concurrent.FutureTask.run
  [34] java.util.concurrent.ThreadPoolExecutor.runWorker
  [35] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [36] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] fdval
  [ 1] Java_sun_nio_ch_FileDispatcherImpl_read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read0
  [ 3] sun.nio.ch.FileDispatcherImpl.read
  [ 4] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 5] sun.nio.ch.IOUtil.read
  [ 6] sun.nio.ch.FileChannelImpl.read
  [ 7] io.ktor.util.BufferViewJvmKt.read
  [ 8] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] java.util.concurrent.locks.LockSupport.setBlocker
  [ 1] java.util.concurrent.locks.LockSupport.parkNanos
  [ 2] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 3] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 7] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] __psynch_mutexwait
  [ 1] err_codes_iokit_usb
  [ 2] Parker::unpark()
  [ 3] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 4] jdk.internal.misc.Unsafe.unpark
  [ 5] java.util.concurrent.locks.LockSupport.unpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] internal_catch_exc_subsystem
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 4] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 5] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 6] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 7] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 8] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 9] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [10] io.ktor.utils.io.ByteBufferChannel.flush
  [11] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] Mutex::lock_without_safepoint_check()
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] __psynch_mutexwait
  [ 1] err_codes_iokit_usb
  [ 2] Parker::unpark()
  [ 3] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 4] jdk.internal.misc.Unsafe.unpark
  [ 5] java.util.concurrent.locks.LockSupport.unpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.internal.RingBufferCapacity.tryWriteAtLeast
  [ 2] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 1] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 2] io.ktor.utils.io.internal.RingBufferCapacity.tryReadAtMost
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] os::javaTimeNanos()
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 2] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 3] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 4] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 5] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 6] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 7] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [13] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [17] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [19] kotlinx.coroutines.BuildersKt.runBlocking
  [20] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [21] kotlinx.coroutines.BuildersKt.runBlocking$default
  [22] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [23] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [24] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [25] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [26] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [27] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [28] java.lang.reflect.Method.invoke
  [29] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [30] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.Executors$RunnableAdapter.call
  [33] java.util.concurrent.FutureTask.run
  [34] java.util.concurrent.ThreadPoolExecutor.runWorker
  [35] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [36] java.lang.Thread.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] java.nio.DirectByteBuffer.duplicate
  [ 1] io.ktor.util.BufferViewJvmKt.read
  [ 2] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 20000000 ns (0.04%), 2 samples
  [ 0] jlong_arraycopy
  [ 1] java.nio.Buffer.position
  [ 2] java.nio.ByteBuffer.position
  [ 3] java.nio.MappedByteBuffer.position
  [ 4] java.nio.MappedByteBuffer.position
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [11] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [12] kotlinx.coroutines.DispatchedTask.run
  [13] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [14] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [16] kotlinx.coroutines.BuildersKt.runBlocking
  [17] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [18] kotlinx.coroutines.BuildersKt.runBlocking$default
  [19] io.ktor.benchmarks.FileBenchmarks.testKtorFileRead
  [20] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_avgt_jmhStub
  [21] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileRead_jmhTest.testKtorFileRead_AverageTime
  [22] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [23] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [24] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [25] java.lang.reflect.Method.invoke
  [26] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [27] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.Executors$RunnableAdapter.call
  [30] java.util.concurrent.FutureTask.run
  [31] java.util.concurrent.ThreadPoolExecutor.runWorker
  [32] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [33] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] java.nio.DirectByteBuffer.duplicate
  [ 1] io.ktor.util.BufferViewJvmKt.read
  [ 2] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

          ns  percent  samples  top
  ----------  -------  -------  ---
 23510000000   46.04%     2351  __psynch_cvwait
  7820000000   15.32%      782  __psynch_cvsignal
  3250000000    6.37%      325  jdk.internal.misc.Unsafe.park
  2500000000    4.90%      250  read
  2360000000    4.62%      236  __gettimeofday
  1060000000    2.08%      106  err_codes_mach_rcv
   690000000    1.35%       69  jlong_disjoint_arraycopy
   620000000    1.21%       62  __os_ch_md_redzone_cookie
   540000000    1.06%       54  Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
   400000000    0.78%       40  Parker::park(bool, long)
   350000000    0.69%       35  err_codes_iokit_usb
   330000000    0.65%       33  os::javaTimeNanos()
   260000000    0.51%       26  kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
   260000000    0.51%       26  internal_catch_exc_subsystem
   190000000    0.37%       19  [unknown]
   190000000    0.37%       19  kotlinx.coroutines.scheduling.CoroutineScheduler.createTask
   190000000    0.37%       19  kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
   190000000    0.37%       19  kotlin.coroutines.jvm.internal.Boxing.boxBoolean
   180000000    0.35%       18  kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
   180000000    0.35%       18  Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
   170000000    0.33%       17  io.ktor.utils.io.ByteBufferChannel.setupStateForRead
   160000000    0.31%       16  kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
   160000000    0.31%       16  io.ktor.utils.io.ByteBufferChannel.resumeReadOp
   160000000    0.31%       16  itable stub
   150000000    0.29%       15  __commpage_gettimeofday_internal
   150000000    0.29%       15  kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
   150000000    0.29%       15  kotlinx.coroutines.EventLoop.processUnconfinedEvent
   150000000    0.29%       15  java_lang_Thread::set_thread_status(oopDesc*, JavaThreadStatus)
   140000000    0.27%       14  __psynch_mutexwait
   140000000    0.27%       14  mach_absolute_time
   130000000    0.25%       13  java.nio.Buffer.scope
   120000000    0.24%       12  kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
   110000000    0.22%       11  java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.accessCheck
   110000000    0.22%       11  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ull, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ull>::oop_access_barrier(void*)
   110000000    0.22%       11  java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
   110000000    0.22%       11  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
   100000000    0.20%       10  java.lang.invoke.VarHandleGuards.guard_LI_L
   100000000    0.20%       10  io.ktor.utils.io.ByteBufferChannel.suspensionForSize
    90000000    0.18%        9  io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
    90000000    0.18%        9  io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
    90000000    0.18%        9  JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool)
    80000000    0.16%        8  java.lang.Thread.interrupted
    80000000    0.16%        8  ThreadsListHandle::ThreadsListHandle(Thread*)
    80000000    0.16%        8  jdk.internal.misc.Unsafe.unpark
    80000000    0.16%        8  Mutex::lock_without_safepoint_check()
    70000000    0.14%        7  JavaThread::threadObj() const
    70000000    0.14%        7  io.ktor.benchmarks.FileBenchmarks$testKtorFileRead$1.invokeSuspend
    70000000    0.14%        7  to_abstime(timespec*, long, bool, bool)
    70000000    0.14%        7  ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**)
    70000000    0.14%        7  java.nio.DirectByteBuffer.duplicate
    60000000    0.12%        6  io.ktor.utils.io.internal.RingBufferCapacity.tryWriteAtLeast
    60000000    0.12%        6  io.ktor.utils.io.core.ByteOrder.getNioOrder
    60000000    0.12%        6  kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
    60000000    0.12%        6  jdk.internal.misc.Unsafe.checkPrimitivePointer
    60000000    0.12%        6  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryReleaseCpu
    60000000    0.12%        6  mach_host_special_port_for_id.hsp_ids
    60000000    0.12%        6  SafeThreadsListPtr::release_stable_list()
    50000000    0.10%        5  kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource
    50000000    0.10%        5  oopDesc::address_field(int) const
    40000000    0.08%        4  __commpage_gettimeofday
    40000000    0.08%        4  java.nio.Buffer.remaining
    40000000    0.08%        4  kotlinx.coroutines.DispatchedTask.run
    40000000    0.08%        4  java.lang.invoke.VarHandleReferences$Array.getVolatile
    40000000    0.08%        4  kotlin.coroutines.ContinuationInterceptor$DefaultImpls.get
    40000000    0.08%        4  kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
    40000000    0.08%        4  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
    40000000    0.08%        4  java_lang_Thread::get_thread_status(oopDesc*)
    30000000    0.06%        3  JavaFrameAnchor::make_walkable(JavaThread*)
    30000000    0.06%        3  JavaThread::is_Java_thread() const
    30000000    0.06%        3  io.ktor.utils.io.ByteBufferChannel.bytesRead
    30000000    0.06%        3  io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
    30000000    0.06%        3  io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
    30000000    0.06%        3  JavaThread::is_interrupted(bool)
    30000000    0.06%        3  I2C/C2I adapters
    30000000    0.06%        3  kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
    30000000    0.06%        3  jlong_arraycopy
    30000000    0.06%        3  kotlinx.coroutines.internal.LockFreeTaskQueueCore.addLast
    30000000    0.06%        3  java.nio.ByteBuffer.put
    30000000    0.06%        3  semaphore_wait_trap
    30000000    0.06%        3  kotlinx.coroutines.EventLoopImplBase.processNextEvent
    30000000    0.06%        3  kotlin.coroutines.CombinedContext.get
    30000000    0.06%        3  PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&, Node_List&, bool)
    30000000    0.06%        3  io.ktor.utils.io.internal.RingBufferCapacity.tryReadAtMost
    30000000    0.06%        3  kotlinx.coroutines.BlockingCoroutine.joinBlocking
    30000000    0.06%        3  sun.nio.ch.FileDispatcherImpl.read0
    30000000    0.06%        3  SystemDictionaryShared::validate_before_archiving(InstanceKlass*) (.cold.1)
    30000000    0.06%        3  vtable stub
    20000000    0.04%        2  java.lang.Integer.intValue
    20000000    0.04%        2  PhaseChaitin::gather_lrg_masks(bool)
    20000000    0.04%        2  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<544868ull, G1BarrierSet>, (AccessInternal::BarrierType)2, 544868ull>::oop_access_barrier(void*)
    20000000    0.04%        2  java.io.ObjectOutputStream.defaultWriteFields
    20000000    0.04%        2  CodeHeap::find_blob_unsafe(void*) const
    20000000    0.04%        2  kotlinx.coroutines.scheduling.LimitingDispatcher.afterTask
    20000000    0.04%        2  kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue
    20000000    0.04%        2  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
    20000000    0.04%        2  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
    20000000    0.04%        2  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.inStack
    20000000    0.04%        2  Interpreter
    20000000    0.04%        2  kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion.updateHead
    20000000    0.04%        2  Method::get_c2i_entry()
    20000000    0.04%        2  java.lang.invoke.VarHandleGuards.guard_LIL_V
    20000000    0.04%        2  kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
    20000000    0.04%        2  io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
    20000000    0.04%        2  _platform_bzero$VARIANT$Haswell
    20000000    0.04%        2  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.accessCheck
    20000000    0.04%        2  kotlin.coroutines.CombinedContext.fold
    20000000    0.04%        2  fdval
    20000000    0.04%        2  java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
    20000000    0.04%        2  gCRAnnotations
    20000000    0.04%        2  jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal
    20000000    0.04%        2  io.ktor.utils.io.ByteBufferChannel.getWriteOp
    20000000    0.04%        2  java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.valueCheck
    20000000    0.04%        2  io.ktor.utils.io.ByteBufferChannel.getClosed
    20000000    0.04%        2  java.util.concurrent.locks.LockSupport.setBlocker
    10000000    0.02%        1  java.util.concurrent.locks.LockSupport.parkNanos
    10000000    0.02%        1  io.ktor.utils.io.ByteBufferChannel.getState
    10000000    0.02%        1  java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire
    10000000    0.02%        1  java_lang_Thread::thread(oopDesc*)
    10000000    0.02%        1  java.util.concurrent.atomic.AtomicReferenceArray.set
    10000000    0.02%        1  io.ktor.utils.io.ByteBufferChannel.access$getJoining$p
    10000000    0.02%        1  io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
    10000000    0.02%        1  io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.create
    10000000    0.02%        1  java.util.concurrent.atomic.AtomicReferenceArray.get
    10000000    0.02%        1  io.ktor.utils.io.ByteBufferChannel.isClosedForRead
    10000000    0.02%        1  io.ktor.utils.io.ByteBufferChannel.prepareBuffer
    10000000    0.02%        1  java.nio.HeapByteBuffer.put
    10000000    0.02%        1  __open
    10000000    0.02%        1  java.nio.ByteBuffer.putBuffer
    10000000    0.02%        1  TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int)
    10000000    0.02%        1  State::MachOperGenerator(int)
    10000000    0.02%        1  RegionNode::optimize_trichotomy(PhaseIterGVN*)
    10000000    0.02%        1  PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber)
    10000000    0.02%        1  PhaseIterGVN::remove_globally_dead_node(Node*)
    10000000    0.02%        1  io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
    10000000    0.02%        1  kotlinx.coroutines.CompletionStateKt.toState$default
    10000000    0.02%        1  PhaseCFG::create_loop_tree()
    10000000    0.02%        1  Parker::unpark()
    10000000    0.02%        1  kotlinx.coroutines.EventLoopImplBase.getNextTime
    10000000    0.02%        1  java.nio.ByteBuffer.limit
    10000000    0.02%        1  kotlinx.coroutines.JobSupport.getState$kotlinx_coroutines_core
    10000000    0.02%        1  Matcher::init_first_stack_mask()
    10000000    0.02%        1  io.ktor.utils.io.ByteBufferChannel.writeSuspendPredicate
    10000000    0.02%        1  MachProjNode::ideal_reg() const
    10000000    0.02%        1  MachNode::memory_inputs(Node*&, Node*&) const
    10000000    0.02%        1  LocationValue::write_on(DebugInfoWriteStream*)
    10000000    0.02%        1  Java_sun_nio_ch_FileDispatcherImpl_read0
    10000000    0.02%        1  io.ktor.utils.io.internal.RingBufferCapacity.completeRead
    10000000    0.02%        1  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.afterTask
    10000000    0.02%        1  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
    10000000    0.02%        1  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
    10000000    0.02%        1  InstanceKlass::find_method_index(Array<Method*> const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode)
    10000000    0.02%        1  java.nio.Buffer.position
    10000000    0.02%        1  java.nio.Buffer.limit
    10000000    0.02%        1  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
    10000000    0.02%        1  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
    10000000    0.02%        1  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryAcquireCpuPermit
    10000000    0.02%        1  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
    10000000    0.02%        1  IndexSetIterator::advance_and_next()
    10000000    0.02%        1  java.nio.Buffer.hasRemaining
    10000000    0.02%        1  java.nio.Buffer.checkScope
    10000000    0.02%        1  GrowableArrayWithAllocator<ciSymbol*, GrowableArray<ciSymbol*> >::grow(int)
    10000000    0.02%        1  GCId::current_or_undefined()
    10000000    0.02%        1  java.nio.Buffer.<init>
    10000000    0.02%        1  kotlinx.coroutines.scheduling.WorkQueue.pollBuffer
    10000000    0.02%        1  Dict::Insert(void*, void*, bool)
    10000000    0.02%        1  DIR_Chunk* GrowableArrayWithAllocator<DIR_Chunk*, GrowableArray<DIR_Chunk*> >::insert_sorted<&(DIR_Chunk::compare(DIR_Chunk* const&, DIR_Chunk* const&))>(DIR_Chunk* const&)
    10000000    0.02%        1  mach_task_special_port_for_id.tsp_ids
    10000000    0.02%        1  nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool)
    10000000    0.02%        1  nmethodBucket::next_not_unloading()
    10000000    0.02%        1  CompileBroker::invoke_compiler_on_method(CompileTask*)
    10000000    0.02%        1  Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason)
    10000000    0.02%        1  pthread_dependency_wait_np.cold.3
    10000000    0.02%        1  Compile::identify_useful_nodes(Unique_Node_List&)
    10000000    0.02%        1  io.ktor.utils.io.internal.RingBufferCapacity.completeWrite
    10000000    0.02%        1  ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum)
    10000000    0.02%        1  BarrierSetC1::resolve_address(LIRAccess&, bool)
    10000000    0.02%        1  unsafe_arraycopy
    10000000    0.02%        1  vmSymbols::find_sid(Symbol const*)
    10000000    0.02%        1  java.lang.invoke.VarForm.getMemberName

