--- Execution profile ---
Total samples       : 4419

--- 36460000000 ns (82.51%), 3646 samples
  [ 0] read
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 1330000000 ns (3.01%), 133 samples
  [ 0] jlong_disjoint_arraycopy
  [ 1] java.lang.ThreadLocal$ThreadLocalMap.getEntry
  [ 2] java.lang.ThreadLocal.get
  [ 3] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 740000000 ns (1.67%), 74 samples
  [ 0] sun.nio.ch.FileDispatcherImpl.read0
  [ 1] sun.nio.ch.FileDispatcherImpl.read
  [ 2] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 3] sun.nio.ch.IOUtil.read
  [ 4] sun.nio.ch.FileChannelImpl.read
  [ 5] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 570000000 ns (1.29%), 57 samples
  [ 0] Java_sun_nio_ch_FileDispatcherImpl_read0
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 380000000 ns (0.86%), 38 samples
  [ 0] java.nio.channels.spi.AbstractInterruptibleChannel.begin
  [ 1] sun.nio.ch.FileChannelImpl.beginBlocking
  [ 2] sun.nio.ch.FileChannelImpl.read
  [ 3] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 280000000 ns (0.63%), 28 samples
  [ 0] sun.nio.ch.FileChannelImpl.endBlocking
  [ 1] sun.nio.ch.FileChannelImpl.read
  [ 2] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 280000000 ns (0.63%), 28 samples
  [ 0] java.nio.DirectByteBuffer.address
  [ 1] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 2] sun.nio.ch.IOUtil.read
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 240000000 ns (0.54%), 24 samples
  [ 0] sun.nio.ch.NativeThreadSet.remove
  [ 1] sun.nio.ch.FileChannelImpl.read
  [ 2] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 220000000 ns (0.50%), 22 samples
  [ 0] java.nio.channels.spi.AbstractInterruptibleChannel.isOpen
  [ 1] sun.nio.ch.FileChannelImpl.read
  [ 2] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 210000000 ns (0.48%), 21 samples
  [ 0] sun.nio.ch.Util$BufferCache.get
  [ 1] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 2] sun.nio.ch.IOUtil.read
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 200000000 ns (0.45%), 20 samples
  [ 0] sun.nio.ch.FileChannelImpl.read
  [ 1] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 2] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 200000000 ns (0.45%), 20 samples
  [ 0] java.lang.Thread.blockedOn
  [ 1] java.lang.System$2.blockedOn
  [ 2] java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn
  [ 3] java.nio.channels.spi.AbstractInterruptibleChannel.end
  [ 4] sun.nio.ch.FileChannelImpl.endBlocking
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 190000000 ns (0.43%), 19 samples
  [ 0] sun.nio.ch.NativeThreadSet.add
  [ 1] sun.nio.ch.FileChannelImpl.read
  [ 2] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 170000000 ns (0.38%), 17 samples
  [ 0] sun.nio.ch.NativeThread.current
  [ 1] sun.nio.ch.NativeThreadSet.add
  [ 2] sun.nio.ch.FileChannelImpl.read
  [ 3] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 160000000 ns (0.36%), 16 samples
  [ 0] convertReturnVal
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 150000000 ns (0.34%), 15 samples
  [ 0] java.nio.channels.spi.AbstractInterruptibleChannel.isOpen
  [ 1] sun.nio.ch.FileChannelImpl.ensureOpen
  [ 2] sun.nio.ch.FileChannelImpl.read
  [ 3] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 140000000 ns (0.32%), 14 samples
  [ 0] sun.nio.ch.Util$BufferCache.get
  [ 1] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 2] sun.nio.ch.IOUtil.read
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 120000000 ns (0.27%), 12 samples
  [ 0] java.lang.Thread.blockedOn
  [ 1] java.lang.System$2.blockedOn
  [ 2] java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn
  [ 3] java.nio.channels.spi.AbstractInterruptibleChannel.begin
  [ 4] sun.nio.ch.FileChannelImpl.beginBlocking
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 100000000 ns (0.23%), 10 samples
  [ 0] java.nio.channels.spi.AbstractInterruptibleChannel.end
  [ 1] sun.nio.ch.FileChannelImpl.endBlocking
  [ 2] sun.nio.ch.FileChannelImpl.read
  [ 3] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 100000000 ns (0.23%), 10 samples
  [ 0] sun.nio.ch.FileChannelImpl.read
  [ 1] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 2] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 90000000 ns (0.20%), 9 samples
  [ 0] java.lang.Thread.blockedOn
  [ 1] java.lang.System$2.blockedOn
  [ 2] java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn
  [ 3] java.nio.channels.spi.AbstractInterruptibleChannel.begin
  [ 4] sun.nio.ch.FileChannelImpl.beginBlocking
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 80000000 ns (0.18%), 8 samples
  [ 0] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 1] sun.nio.ch.IOUtil.read
  [ 2] sun.nio.ch.FileChannelImpl.read
  [ 3] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 80000000 ns (0.18%), 8 samples
  [ 0] java.lang.Thread.isInterrupted
  [ 1] java.nio.channels.spi.AbstractInterruptibleChannel.begin
  [ 2] sun.nio.ch.FileChannelImpl.beginBlocking
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 80000000 ns (0.18%), 8 samples
  [ 0] java.lang.ThreadLocal.get
  [ 1] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 2] sun.nio.ch.IOUtil.read
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 70000000 ns (0.16%), 7 samples
  [ 0] java.nio.ByteBuffer.limit
  [ 1] java.nio.MappedByteBuffer.limit
  [ 2] java.nio.MappedByteBuffer.limit
  [ 3] sun.nio.ch.Util$BufferCache.get
  [ 4] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 5] sun.nio.ch.IOUtil.read
  [ 6] sun.nio.ch.FileChannelImpl.read
  [ 7] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 70000000 ns (0.16%), 7 samples
  [ 0] sun.nio.ch.FileChannelImpl.read
  [ 1] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 2] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 60000000 ns (0.14%), 6 samples
  [ 0] __psynch_cvwait
  [ 1] os::PlatformMonitor::wait(long)
  [ 2] Monitor::wait_without_safepoint_check(long long)
  [ 3] WatcherThread::sleep() const
  [ 4] WatcherThread::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 50000000 ns (0.11%), 5 samples
  [ 0] java.nio.MappedByteBuffer.rewind
  [ 1] java.nio.MappedByteBuffer.rewind
  [ 2] sun.nio.ch.Util$BufferCache.get
  [ 3] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 50000000 ns (0.11%), 5 samples
  [ 0] sun.nio.ch.Util$BufferCache.get
  [ 1] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 2] sun.nio.ch.IOUtil.read
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 40000000 ns (0.09%), 4 samples
  [ 0] sun.nio.ch.FileChannelImpl.read
  [ 1] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 2] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 40000000 ns (0.09%), 4 samples
  [ 0] sun.nio.ch.IOUtil.read
  [ 1] sun.nio.ch.FileChannelImpl.read
  [ 2] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 40000000 ns (0.09%), 4 samples
  [ 0] sun.nio.ch.NativeThread.current
  [ 1] sun.nio.ch.NativeThreadSet.add
  [ 2] sun.nio.ch.FileChannelImpl.read
  [ 3] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 40000000 ns (0.09%), 4 samples
  [ 0] sun.nio.ch.Util$BufferCache.get
  [ 1] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 2] sun.nio.ch.IOUtil.read
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 40000000 ns (0.09%), 4 samples
  [ 0] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 1] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 2] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 3] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 5] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 6] java.lang.reflect.Method.invoke
  [ 7] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] java.util.concurrent.FutureTask.run
  [10] java.util.concurrent.Executors$RunnableAdapter.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.ThreadPoolExecutor.runWorker
  [13] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [14] java.lang.Thread.run

--- 30000000 ns (0.07%), 3 samples
  [ 0] sun.nio.ch.Util$BufferCache.get
  [ 1] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 2] sun.nio.ch.IOUtil.read
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 30000000 ns (0.07%), 3 samples
  [ 0] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 1] sun.nio.ch.IOUtil.read
  [ 2] sun.nio.ch.FileChannelImpl.read
  [ 3] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 30000000 ns (0.07%), 3 samples
  [ 0] __psynch_cvwait
  [ 1] os::PlatformMonitor::wait(long)
  [ 2] Monitor::wait_without_safepoint_check(long long)
  [ 3] G1ServiceThread::sleep_before_next_cycle()
  [ 4] G1ServiceThread::run_service()
  [ 5] ConcurrentGCThread::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] __os_ch_md_redzone_cookie
  [ 9] internal_catch_exc_subsystem

--- 30000000 ns (0.07%), 3 samples
  [ 0] java.lang.Thread.blockedOn
  [ 1] java.lang.System$2.blockedOn
  [ 2] java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn
  [ 3] java.nio.channels.spi.AbstractInterruptibleChannel.begin
  [ 4] sun.nio.ch.FileChannelImpl.beginBlocking
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 30000000 ns (0.07%), 3 samples
  [ 0] sun.nio.ch.FileChannelImpl.read
  [ 1] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 2] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 30000000 ns (0.07%), 3 samples
  [ 0] java.lang.ThreadLocal.get
  [ 1] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 2] sun.nio.ch.IOUtil.read
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 30000000 ns (0.07%), 3 samples
  [ 0] java.nio.Buffer.limit
  [ 1] java.nio.ByteBuffer.limit
  [ 2] java.nio.MappedByteBuffer.limit
  [ 3] java.nio.MappedByteBuffer.limit
  [ 4] sun.nio.ch.Util$BufferCache.get
  [ 5] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 6] sun.nio.ch.IOUtil.read
  [ 7] sun.nio.ch.FileChannelImpl.read
  [ 8] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 30000000 ns (0.07%), 3 samples
  [ 0] __open
  [ 1] handleOpen
  [ 2] fileOpen
  [ 3] java.io.RandomAccessFile.open0
  [ 4] java.io.RandomAccessFile.open
  [ 5] java.io.RandomAccessFile.<init>
  [ 6] java.io.RandomAccessFile.<init>
  [ 7] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 30000000 ns (0.07%), 3 samples
  [ 0] sun.nio.ch.FileDispatcherImpl.read0
  [ 1] sun.nio.ch.Util$BufferCache.get
  [ 2] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 3] sun.nio.ch.IOUtil.read
  [ 4] sun.nio.ch.FileChannelImpl.read
  [ 5] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 30000000 ns (0.07%), 3 samples
  [ 0] unsafe_arraycopy
  [ 1] java.lang.ThreadLocal$ThreadLocalMap.getEntry
  [ 2] java.lang.ThreadLocal.get
  [ 3] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] java.nio.channels.spi.AbstractInterruptibleChannel.end
  [ 1] sun.nio.ch.FileChannelImpl.endBlocking
  [ 2] sun.nio.ch.FileChannelImpl.read
  [ 3] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 1] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 2] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 3] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 5] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 6] java.lang.reflect.Method.invoke
  [ 7] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] java.util.concurrent.FutureTask.run
  [10] java.util.concurrent.Executors$RunnableAdapter.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.ThreadPoolExecutor.runWorker
  [13] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [14] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] java.nio.Buffer.clear
  [ 1] java.nio.ByteBuffer.clear
  [ 2] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] java.nio.Buffer.limit
  [ 1] java.nio.ByteBuffer.limit
  [ 2] java.nio.MappedByteBuffer.limit
  [ 3] java.nio.MappedByteBuffer.limit
  [ 4] sun.nio.ch.Util$BufferCache.get
  [ 5] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 6] sun.nio.ch.IOUtil.read
  [ 7] sun.nio.ch.FileChannelImpl.read
  [ 8] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] sun.nio.ch.Util$BufferCache.get
  [ 1] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 2] sun.nio.ch.IOUtil.read
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] sun.nio.ch.Util$BufferCache.get
  [ 1] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 2] sun.nio.ch.IOUtil.read
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] sun.nio.ch.FileDispatcherImpl.read0
  [ 1] java.io.FileCleanable.<init>
  [ 2] java.io.FileCleanable.register
  [ 3] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 1] sun.nio.ch.IOUtil.read
  [ 2] sun.nio.ch.FileChannelImpl.read
  [ 3] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] java.lang.Thread.blockedOn
  [ 1] java.lang.System$2.blockedOn
  [ 2] java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn
  [ 3] java.nio.channels.spi.AbstractInterruptibleChannel.end
  [ 4] sun.nio.ch.FileChannelImpl.endBlocking
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] sun.nio.ch.IOUtil.read
  [ 1] sun.nio.ch.FileChannelImpl.read
  [ 2] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 1] sun.nio.ch.IOUtil.read
  [ 2] sun.nio.ch.FileChannelImpl.read
  [ 3] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] sun.nio.ch.FileChannelImpl.endBlocking
  [ 1] sun.nio.ch.FileChannelImpl.read
  [ 2] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] sun.nio.ch.FileChannelImpl.read
  [ 1] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 2] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] sun.nio.ch.Util$BufferCache.get
  [ 1] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 2] sun.nio.ch.IOUtil.read
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 20000000 ns (0.05%), 2 samples
  [ 0] jdk.internal.access.SharedSecrets.getJavaLangAccess
  [ 1] java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn
  [ 2] java.nio.channels.spi.AbstractInterruptibleChannel.begin
  [ 3] sun.nio.ch.FileChannelImpl.beginBlocking
  [ 4] sun.nio.ch.FileChannelImpl.read
  [ 5] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] __psynch_mutexwait
  [ 1] err_codes_iokit_usb
  [ 2] Mutex::lock_contended(Thread*)
  [ 3] Mutex::lock(Thread*)
  [ 4] CompileBroker::compile_method_base(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, bool, Thread*)
  [ 5] CompileBroker::compile_method(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, DirectiveSet*, Thread*)
  [ 6] CompileBroker::compile_method(methodHandle const&, int, int, methodHandle const&, int, CompileTask::CompileReason, Thread*)
  [ 7] TieredThresholdPolicy::compile(methodHandle const&, int, CompLevel, Thread*)
  [ 8] TieredThresholdPolicy::event(methodHandle const&, methodHandle const&, int, int, CompLevel, CompiledMethod*, Thread*)
  [ 9] InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*)
  [10] InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  [11] java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext
  [12] java.util.concurrent.locks.AbstractQueuedSynchronizer.release
  [13] java.util.concurrent.locks.ReentrantLock.unlock
  [14] java.util.concurrent.LinkedBlockingQueue.poll
  [15] java.util.concurrent.ExecutorCompletionService.poll
  [16] org.openjdk.jmh.runner.BenchmarkHandler.runIteration
  [17] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [18] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [19] org.openjdk.jmh.runner.BaseRunner.doSingle
  [20] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [21] org.openjdk.jmh.runner.ForkedRunner.run
  [22] org.openjdk.jmh.runner.ForkedMain.main

--- 10000000 ns (0.02%), 1 sample
  [ 0] OtherRegionsTable::occupied() const
  [ 1] G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*)
  [ 2] G1CollectionSet::iterate(HeapRegionClosure*) const
  [ 3] G1RemSetSamplingTask::execute()
  [ 4] G1ServiceThread::run_task(G1ServiceTask*)
  [ 5] G1ServiceThread::run_service()
  [ 6] ConcurrentGCThread::run()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] __os_ch_md_redzone_cookie
  [10] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] fdval
  [ 1] Java_sun_nio_ch_FileDispatcherImpl_read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read0
  [ 3] sun.nio.ch.FileDispatcherImpl.read
  [ 4] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 5] sun.nio.ch.IOUtil.read
  [ 6] sun.nio.ch.FileChannelImpl.read
  [ 7] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] sun.nio.ch.FileChannelImpl.read
  [ 1] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 2] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] __psynch_cvwait
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos
  [ 6] java.util.concurrent.LinkedBlockingQueue.poll
  [ 7] java.util.concurrent.ExecutorCompletionService.poll
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler.runIteration
  [ 9] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [10] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [11] org.openjdk.jmh.runner.BaseRunner.doSingle
  [12] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [13] org.openjdk.jmh.runner.ForkedRunner.run
  [14] org.openjdk.jmh.runner.ForkedMain.main

--- 10000000 ns (0.02%), 1 sample
  [ 0] G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*)
  [ 1] G1CollectionSet::iterate(HeapRegionClosure*) const
  [ 2] G1RemSetSamplingTask::execute()
  [ 3] G1ServiceThread::run_task(G1ServiceTask*)
  [ 4] G1ServiceThread::run_service()
  [ 5] ConcurrentGCThread::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] __os_ch_md_redzone_cookie
  [ 9] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] __psynch_cvsignal
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext
  [ 5] java.util.concurrent.locks.AbstractQueuedSynchronizer.release
  [ 6] java.util.concurrent.locks.ReentrantLock.unlock
  [ 7] java.util.concurrent.LinkedBlockingQueue.signalNotEmpty
  [ 8] java.util.concurrent.LinkedBlockingQueue.offer
  [ 9] java.util.concurrent.ThreadPoolExecutor.execute
  [10] java.util.concurrent.ExecutorCompletionService.submit
  [11] org.openjdk.jmh.runner.BenchmarkHandler.runIteration
  [12] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [13] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [14] org.openjdk.jmh.runner.BaseRunner.doSingle
  [15] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [16] org.openjdk.jmh.runner.ForkedRunner.run
  [17] org.openjdk.jmh.runner.ForkedMain.main

--- 10000000 ns (0.02%), 1 sample
  [ 0] CodeHeap::find_blob_unsafe(void*) const
  [ 1] JavaThread::pd_last_frame()
  [ 2] JVM_GetCallerClass
  [ 3] jdk.internal.reflect.Reflection.getCallerClass
  [ 4] java.lang.reflect.Method.invoke
  [ 5] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 6] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 7] java.util.concurrent.FutureTask.run
  [ 8] java.util.concurrent.Executors$RunnableAdapter.call
  [ 9] java.util.concurrent.FutureTask.run
  [10] java.util.concurrent.ThreadPoolExecutor.runWorker
  [11] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [12] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] sun.nio.ch.FileChannelImpl.beginBlocking
  [ 1] sun.nio.ch.FileChannelImpl.read
  [ 2] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] semaphore_wait_trap
  [ 1] GangWorker::loop()
  [ 2] Thread::call_run()
  [ 3] thread_native_entry(Thread*)
  [ 4] __os_ch_md_redzone_cookie
  [ 5] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] java.lang.Thread.isInterrupted
  [ 1] java.nio.channels.spi.AbstractInterruptibleChannel.begin
  [ 2] sun.nio.ch.FileChannelImpl.beginBlocking
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] semaphore_signal_trap
  [ 1] WorkGang::run_task(AbstractGangTask*, unsigned int, bool)
  [ 2] SafepointSynchronize::do_cleanup_tasks()
  [ 3] SafepointSynchronize::begin()
  [ 4] VMThread::inner_execute(VM_Operation*)
  [ 5] VMThread::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] __os_ch_md_redzone_cookie
  [ 9] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] Monitor::wait_without_safepoint_check(long long)
  [ 1] G1ServiceThread::sleep_before_next_cycle()
  [ 2] G1ServiceThread::run_service()
  [ 3] ConcurrentGCThread::run()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] __os_ch_md_redzone_cookie
  [ 7] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] sun.nio.ch.FileChannelImpl.read
  [ 1] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 2] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] sun.nio.ch.FileChannelImpl.read
  [ 1] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 2] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] java.lang.Thread.blockedOn
  [ 1] java.lang.System$2.blockedOn
  [ 2] java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn
  [ 3] java.nio.channels.spi.AbstractInterruptibleChannel.begin
  [ 4] sun.nio.ch.FileChannelImpl.beginBlocking
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] __psynch_cvwait
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos
  [ 6] java.util.concurrent.LinkedBlockingQueue.poll
  [ 7] java.util.concurrent.ExecutorCompletionService.poll
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler.runIteration
  [ 9] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [10] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [11] org.openjdk.jmh.runner.BaseRunner.doSingle
  [12] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [13] org.openjdk.jmh.runner.ForkedRunner.run
  [14] org.openjdk.jmh.runner.ForkedMain.main

--- 10000000 ns (0.02%), 1 sample
  [ 0] mach_absolute_time
  [ 1] os::javaTimeNanos()
  [ 2] WatcherThread::sleep() const
  [ 3] WatcherThread::run()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] __os_ch_md_redzone_cookie
  [ 7] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] sun.nio.ch.NativeThreadSet.add
  [ 1] sun.nio.ch.FileChannelImpl.read
  [ 2] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] java.nio.MappedByteBuffer.limit
  [ 1] sun.nio.ch.Util$BufferCache.get
  [ 2] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 3] sun.nio.ch.IOUtil.read
  [ 4] sun.nio.ch.FileChannelImpl.read
  [ 5] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] sun.nio.ch.NativeThreadSet.remove
  [ 1] sun.nio.ch.FileChannelImpl.read
  [ 2] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] java.nio.channels.spi.AbstractInterruptibleChannel.begin
  [ 1] sun.nio.ch.FileChannelImpl.beginBlocking
  [ 2] sun.nio.ch.FileChannelImpl.read
  [ 3] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] semaphore_wait_trap
  [ 1] GangWorker::loop()
  [ 2] Thread::call_run()
  [ 3] thread_native_entry(Thread*)
  [ 4] __os_ch_md_redzone_cookie
  [ 5] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] Java_sun_nio_ch_NativeThread_current
  [ 1] sun.nio.ch.NativeThread.current
  [ 2] sun.nio.ch.NativeThreadSet.add
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] ciObjectFactory::get_metadata(Metadata*)
  [ 1] ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&, ciSymbol*, bool)
  [ 2] ciSignature::ciSignature(ciKlass*, constantPoolHandle const&, ciSymbol*)
  [ 3] ciMethod::ciMethod(methodHandle const&, ciInstanceKlass*)
  [ 4] ciObjectFactory::create_new_metadata(Metadata*)
  [ 5] ciObjectFactory::get_metadata(Metadata*)
  [ 6] ciEnv::get_method_from_handle(Method*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] __os_ch_md_redzone_cookie
  [13] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] __psynch_cvwait
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.park
  [ 5] java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire
  [ 6] java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly
  [ 7] java.util.concurrent.CountDownLatch.await
  [ 8] org.openjdk.jmh.runner.InfraControlL2.awaitWarmdownReady
  [ 9] org.openjdk.jmh.runner.InfraControl.awaitWarmdownReady
  [10] org.openjdk.jmh.runner.BenchmarkHandler.runIteration
  [11] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [12] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [13] org.openjdk.jmh.runner.BaseRunner.doSingle
  [14] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [15] org.openjdk.jmh.runner.ForkedRunner.run
  [16] org.openjdk.jmh.runner.ForkedMain.main

--- 10000000 ns (0.02%), 1 sample
  [ 0] java.lang.System.identityHashCode
  [ 1] java.io.ObjectStreamClass$WeakClassKey.<init>
  [ 2] java.io.ObjectStreamClass.lookup
  [ 3] java.io.ObjectOutputStream.writeObject0
  [ 4] java.io.ObjectOutputStream.defaultWriteFields
  [ 5] java.io.ObjectOutputStream.writeSerialData
  [ 6] java.io.ObjectOutputStream.writeOrdinaryObject
  [ 7] java.io.ObjectOutputStream.writeObject0
  [ 8] java.io.ObjectOutputStream.defaultWriteFields
  [ 9] java.io.ObjectOutputStream.writeSerialData
  [10] java.io.ObjectOutputStream.writeOrdinaryObject
  [11] java.io.ObjectOutputStream.writeObject0
  [12] java.io.ObjectOutputStream.writeArray
  [13] java.io.ObjectOutputStream.writeObject0
  [14] java.io.ObjectOutputStream.defaultWriteFields
  [15] java.io.ObjectOutputStream.writeSerialData
  [16] java.io.ObjectOutputStream.writeOrdinaryObject
  [17] java.io.ObjectOutputStream.writeObject0
  [18] java.io.ObjectOutputStream.writeObject
  [19] org.openjdk.jmh.runner.link.BinaryLinkClient.pushFrame
  [20] org.openjdk.jmh.runner.link.BinaryLinkClient.access$000
  [21] org.openjdk.jmh.runner.link.BinaryLinkClient$1.invoke
  [22] jdk.proxy1.$Proxy0.iterationResult
  [23] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [24] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [25] org.openjdk.jmh.runner.BaseRunner.doSingle
  [26] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [27] org.openjdk.jmh.runner.ForkedRunner.run
  [28] org.openjdk.jmh.runner.ForkedMain.main

--- 10000000 ns (0.02%), 1 sample
  [ 0] close
  [ 1] java.io.FileDescriptor.close0
  [ 2] java.io.FileDescriptor.close
  [ 3] java.io.RandomAccessFile$1.close
  [ 4] java.io.FileDescriptor.closeAll
  [ 5] java.io.RandomAccessFile.close
  [ 6] sun.nio.ch.FileChannelImpl.implCloseChannel
  [ 7] java.nio.channels.spi.AbstractInterruptibleChannel.close
  [ 8] kotlin.io.CloseableKt.closeFinally
  [ 9] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] PeriodicTask::real_time_tick(int)
  [ 1] WatcherThread::run()
  [ 2] Thread::call_run()
  [ 3] thread_native_entry(Thread*)
  [ 4] __os_ch_md_redzone_cookie
  [ 5] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] jni_GetObjectField
  [ 1] JNU_GetStringPlatformChars
  [ 2] fileOpen
  [ 3] java.io.RandomAccessFile.open0
  [ 4] java.io.RandomAccessFile.open
  [ 5] java.io.RandomAccessFile.<init>
  [ 6] java.io.RandomAccessFile.<init>
  [ 7] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] __psynch_cvwait
  [ 1] os::PlatformMonitor::wait(long)
  [ 2] Monitor::wait_without_safepoint_check(long long)
  [ 3] MonitorDeflationThread::monitor_deflation_thread_entry(JavaThread*, Thread*)
  [ 4] JavaThread::thread_main_inner()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] internal_catch_exc_subsystem
  [ 1] sun.nio.ch.NativeThread.current
  [ 2] sun.nio.ch.NativeThreadSet.add
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] Monitor::wait(long long, bool)
  [ 1] CompileQueue::get()
  [ 2] CompileBroker::compiler_thread_loop()
  [ 3] JavaThread::thread_main_inner()
  [ 4] Thread::call_run()
  [ 5] thread_native_entry(Thread*)
  [ 6] __os_ch_md_redzone_cookie
  [ 7] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] err_codes_mach_rcv
  [ 1] __os_ch_md_redzone_cookie
  [ 2] os::PlatformMonitor::wait(long)
  [ 3] Monitor::wait_without_safepoint_check(long long)
  [ 4] WatcherThread::sleep() const
  [ 5] WatcherThread::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] __os_ch_md_redzone_cookie
  [ 9] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] sun.nio.ch.IOUtil.read
  [ 1] sun.nio.ch.FileChannelImpl.read
  [ 2] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] java.util.concurrent.ExecutorCompletionService.poll
  [ 1] org.openjdk.jmh.runner.BenchmarkHandler.runIteration
  [ 2] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [ 3] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [ 4] org.openjdk.jmh.runner.BaseRunner.doSingle
  [ 5] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [ 6] org.openjdk.jmh.runner.ForkedRunner.run
  [ 7] org.openjdk.jmh.runner.ForkedMain.main

--- 10000000 ns (0.02%), 1 sample
  [ 0] java.nio.Buffer.limit
  [ 1] java.nio.ByteBuffer.limit
  [ 2] java.nio.MappedByteBuffer.limit
  [ 3] java.nio.MappedByteBuffer.limit
  [ 4] sun.nio.ch.Util$BufferCache.get
  [ 5] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 6] sun.nio.ch.IOUtil.read
  [ 7] sun.nio.ch.FileChannelImpl.read
  [ 8] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 1] sun.nio.ch.IOUtil.read
  [ 2] sun.nio.ch.FileChannelImpl.read
  [ 3] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] sun.nio.ch.FileChannelImpl.read
  [ 1] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 2] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 4] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 6] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 7] java.lang.reflect.Method.invoke
  [ 8] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] java.util.concurrent.FutureTask.run
  [11] java.util.concurrent.Executors$RunnableAdapter.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.ThreadPoolExecutor.runWorker
  [14] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [15] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn
  [ 1] java.nio.channels.spi.AbstractInterruptibleChannel.end
  [ 2] sun.nio.ch.FileChannelImpl.endBlocking
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] __psynch_cvwait
  [ 1] os::PlatformMonitor::wait(long)
  [ 2] Monitor::wait(long long, bool)
  [ 3] CompileQueue::get()
  [ 4] CompileBroker::compiler_thread_loop()
  [ 5] JavaThread::thread_main_inner()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] __os_ch_md_redzone_cookie
  [ 9] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] sun.nio.ch.Util$BufferCache.get
  [ 1] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 2] sun.nio.ch.IOUtil.read
  [ 3] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 8] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 9] java.lang.reflect.Method.invoke
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] java.util.concurrent.FutureTask.run
  [13] java.util.concurrent.Executors$RunnableAdapter.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.ThreadPoolExecutor.runWorker
  [16] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [17] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] __gettimeofday
  [ 1] os::PlatformMonitor::wait(long)
  [ 2] Monitor::wait_without_safepoint_check(long long)
  [ 3] G1ServiceThread::sleep_before_next_cycle()
  [ 4] G1ServiceThread::run_service()
  [ 5] ConcurrentGCThread::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] __os_ch_md_redzone_cookie
  [ 9] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] java.lang.ThreadLocal$ThreadLocalMap.getEntry
  [ 1] java.lang.ThreadLocal.get
  [ 2] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 3] sun.nio.ch.IOUtil.read
  [ 4] sun.nio.ch.FileChannelImpl.read
  [ 5] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] StatSamplerTask::task()
  [ 1] WatcherThread::run()
  [ 2] Thread::call_run()
  [ 3] thread_native_entry(Thread*)
  [ 4] __os_ch_md_redzone_cookie
  [ 5] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] __unlink
  [ 1] [unknown]
  [ 2] Java_java_io_UnixFileSystem_delete0
  [ 3] java.io.UnixFileSystem.delete0
  [ 4] java.io.UnixFileSystem.delete
  [ 5] java.io.File.delete
  [ 6] io.ktor.benchmarks.FileBenchmarks.cleanup
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] __psynch_cvwait
  [ 1] os::PlatformMonitor::wait(long)
  [ 2] Monitor::wait_without_safepoint_check(long long)
  [ 3] VMThread::wait_for_operation()
  [ 4] VMThread::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 10000000 ns (0.02%), 1 sample
  [ 0] java.lang.ThreadLocal$ThreadLocalMap.getEntry
  [ 1] java.lang.ThreadLocal.get
  [ 2] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 3] sun.nio.ch.IOUtil.read
  [ 4] sun.nio.ch.FileChannelImpl.read
  [ 5] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] sun.nio.ch.NativeThreadSet.remove
  [ 1] sun.nio.ch.FileChannelImpl.read
  [ 2] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 3] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 4] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 5] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 6] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 7] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [ 8] java.lang.reflect.Method.invoke
  [ 9] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [10] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [11] java.util.concurrent.FutureTask.run
  [12] java.util.concurrent.Executors$RunnableAdapter.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.ThreadPoolExecutor.runWorker
  [15] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [16] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] sun.nio.ch.Util$BufferCache.get
  [ 1] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 2] sun.nio.ch.IOUtil.read
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 5] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 7] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [ 9] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [10] java.lang.reflect.Method.invoke
  [11] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] java.util.concurrent.FutureTask.run
  [14] java.util.concurrent.Executors$RunnableAdapter.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.ThreadPoolExecutor.runWorker
  [17] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [18] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] java.lang.ThreadLocal$ThreadLocalMap.getEntry
  [ 1] java.lang.ThreadLocal.get
  [ 2] sun.nio.ch.Util.getTemporaryDirectBuffer
  [ 3] sun.nio.ch.IOUtil.read
  [ 4] sun.nio.ch.FileChannelImpl.read
  [ 5] io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
  [ 6] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_avgt_jmhStub
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testJvmRandomFileRead_jmhTest.testJvmRandomFileRead_AverageTime
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 10000000 ns (0.02%), 1 sample
  [ 0] AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ull, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ull>::oop_access_barrier(void*)
  [ 1] InstanceKlass::protection_domain() const
  [ 2] ciInstanceKlass::ciInstanceKlass(Klass*)
  [ 3] ciObjectFactory::create_new_metadata(Metadata*)
  [ 4] ciObjectFactory::get_metadata(Metadata*)
  [ 5] ciObjectFactory::get(oopDesc*)
  [ 6] ciEnv::ciEnv(CompileTask*)
  [ 7] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 8] CompileBroker::compiler_thread_loop()
  [ 9] JavaThread::thread_main_inner()
  [10] Thread::call_run()
  [11] thread_native_entry(Thread*)
  [12] __os_ch_md_redzone_cookie
  [13] internal_catch_exc_subsystem

          ns  percent  samples  top
  ----------  -------  -------  ---
 36460000000   82.51%     3646  read
  1330000000    3.01%      133  jlong_disjoint_arraycopy
   790000000    1.79%       79  sun.nio.ch.FileDispatcherImpl.read0
   570000000    1.29%       57  Java_sun_nio_ch_FileDispatcherImpl_read0
   550000000    1.24%       55  sun.nio.ch.Util$BufferCache.get
   500000000    1.13%       50  sun.nio.ch.FileChannelImpl.read
   470000000    1.06%       47  java.lang.Thread.blockedOn
   390000000    0.88%       39  java.nio.channels.spi.AbstractInterruptibleChannel.begin
   370000000    0.84%       37  java.nio.channels.spi.AbstractInterruptibleChannel.isOpen
   300000000    0.68%       30  sun.nio.ch.FileChannelImpl.endBlocking
   280000000    0.63%       28  java.nio.DirectByteBuffer.address
   260000000    0.59%       26  sun.nio.ch.NativeThreadSet.remove
   210000000    0.48%       21  sun.nio.ch.NativeThread.current
   200000000    0.45%       20  sun.nio.ch.NativeThreadSet.add
   160000000    0.36%       16  convertReturnVal
   150000000    0.34%       15  __psynch_cvwait
   120000000    0.27%       12  java.nio.channels.spi.AbstractInterruptibleChannel.end
   110000000    0.25%       11  java.lang.ThreadLocal.get
   100000000    0.23%       10  sun.nio.ch.Util.getTemporaryDirectBuffer
    90000000    0.20%        9  java.lang.Thread.isInterrupted
    70000000    0.16%        7  java.nio.ByteBuffer.limit
    70000000    0.16%        7  sun.nio.ch.IOUtil.read
    60000000    0.14%        6  io.ktor.benchmarks.FileBenchmarks.testJvmRandomFileRead
    60000000    0.14%        6  sun.nio.ch.IOUtil.readIntoNativeBuffer
    60000000    0.14%        6  java.nio.Buffer.limit
    50000000    0.11%        5  java.nio.MappedByteBuffer.rewind
    30000000    0.07%        3  java.lang.ThreadLocal$ThreadLocalMap.getEntry
    30000000    0.07%        3  __open
    30000000    0.07%        3  unsafe_arraycopy
    20000000    0.05%        2  java.nio.Buffer.clear
    20000000    0.05%        2  semaphore_wait_trap
    20000000    0.05%        2  jdk.internal.access.SharedSecrets.getJavaLangAccess
    10000000    0.02%        1  java.nio.MappedByteBuffer.limit
    10000000    0.02%        1  err_codes_mach_rcv
    10000000    0.02%        1  close
    10000000    0.02%        1  java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn
    10000000    0.02%        1  ciObjectFactory::get_metadata(Metadata*)
    10000000    0.02%        1  __unlink
    10000000    0.02%        1  java.util.concurrent.ExecutorCompletionService.poll
    10000000    0.02%        1  fdval
    10000000    0.02%        1  __psynch_mutexwait
    10000000    0.02%        1  jni_GetObjectField
    10000000    0.02%        1  mach_absolute_time
    10000000    0.02%        1  __psynch_cvsignal
    10000000    0.02%        1  semaphore_signal_trap
    10000000    0.02%        1  internal_catch_exc_subsystem
    10000000    0.02%        1  sun.nio.ch.FileChannelImpl.beginBlocking
    10000000    0.02%        1  java.lang.System.identityHashCode
    10000000    0.02%        1  __gettimeofday
    10000000    0.02%        1  StatSamplerTask::task()
    10000000    0.02%        1  PeriodicTask::real_time_tick(int)
    10000000    0.02%        1  OtherRegionsTable::occupied() const
    10000000    0.02%        1  Monitor::wait_without_safepoint_check(long long)
    10000000    0.02%        1  Monitor::wait(long long, bool)
    10000000    0.02%        1  Java_sun_nio_ch_NativeThread_current
    10000000    0.02%        1  G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*)
    10000000    0.02%        1  CodeHeap::find_blob_unsafe(void*) const
    10000000    0.02%        1  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ull, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ull>::oop_access_barrier(void*)

