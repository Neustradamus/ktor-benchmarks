--- Execution profile ---
Total samples       : 4952
unknown_Java        : 194 (3.92%)

--- 9694883878 ns (12.01%), 545 samples
  [ 0] read
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 5113134740 ns (6.34%), 343 samples
  [ 0] __GI___pthread_mutex_unlock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 4132583878 ns (5.12%), 287 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 3199983632 ns (3.97%), 236 samples
  [ 0] __GI___pthread_mutex_unlock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 3121352731 ns (3.87%), 164 samples
  [ 0] __pthread_cond_signal
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 6] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [10] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [12] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [13] io.ktor.utils.io.ByteBufferChannel.flush
  [14] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [15] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [16] kotlinx.coroutines.DispatchedTask.run
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 2936222155 ns (3.64%), 162 samples
  [ 0] jlong_disjoint_arraycopy
  [ 1] jdk.internal.misc.Unsafe.checkPrimitivePointer
  [ 2] jdk.internal.misc.Unsafe.copyMemoryChecks
  [ 3] jdk.internal.misc.Unsafe.copyMemory
  [ 4] java.nio.DirectByteBuffer.get
  [ 5] java.nio.HeapByteBuffer.put
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 2778922817 ns (3.44%), 174 samples
  [ 0] [vdso]
  [ 1] clock_gettime
  [ 2] [unknown_Java]

--- 1779212184 ns (2.20%), 115 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryReleaseCpu
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1322057358 ns (1.64%), 85 samples
  [ 0] __futex_abstimed_wait_cancelable64
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1127705284 ns (1.40%), 71 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryAcquireCpuPermit
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 927262716 ns (1.15%), 56 samples
  [ 0] __futex_abstimed_wait_cancelable64
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 919251370 ns (1.14%), 69 samples
  [ 0] jdk.internal.misc.Unsafe.park
  [ 1] java.util.concurrent.locks.LockSupport.parkNanos
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 894155244 ns (1.11%), 53 samples
  [ 0] kotlinx.coroutines.scheduling.WorkQueue.pollBuffer
  [ 1] kotlinx.coroutines.scheduling.WorkQueue.tryStealFrom
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 865316839 ns (1.07%), 61 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 804145833 ns (1.00%), 58 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 802388784 ns (0.99%), 39 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 1] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 2] kotlin.coroutines.CombinedContext.fold
  [ 3] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 4] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 5] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 6] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 7] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 8] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [13] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 793892165 ns (0.98%), 51 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 792149697 ns (0.98%), 53 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 712514480 ns (0.88%), 36 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackNextIndex
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 691331922 ns (0.86%), 50 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 642873571 ns (0.80%), 26 samples
  [ 0] __pthread_cond_signal
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 6] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [11] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [12] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [16] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [18] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [19] kotlinx.coroutines.DispatchedTask.run
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [22] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [23] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 633201876 ns (0.78%), 35 samples
  [ 0] java.nio.MappedByteBuffer.limit
  [ 1] java.nio.Buffer.<init>
  [ 2] java.nio.ByteBuffer.<init>
  [ 3] java.nio.ByteBuffer.<init>
  [ 4] java.nio.MappedByteBuffer.<init>
  [ 5] java.nio.DirectByteBuffer.<init>
  [ 6] java.nio.DirectByteBuffer.duplicate
  [ 7] io.ktor.util.BufferViewJvmKt.read
  [ 8] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 623173937 ns (0.77%), 28 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [12] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [13] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [14] io.ktor.utils.io.ByteBufferChannel.flush
  [15] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [16] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [17] kotlinx.coroutines.DispatchedTask.run
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 602290450 ns (0.75%), 34 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryReleaseCpu
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 571873401 ns (0.71%), 35 samples
  [ 0] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 1] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 2] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 3] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.flush
  [ 5] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 562582635 ns (0.70%), 32 samples
  [ 0] sun.nio.ch.FileDispatcherImpl.read0
  [ 1] sun.nio.ch.FileDispatcherImpl.read
  [ 2] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 3] sun.nio.ch.IOUtil.read
  [ 4] sun.nio.ch.FileChannelImpl.read
  [ 5] io.ktor.util.BufferViewJvmKt.read
  [ 6] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 551056958 ns (0.68%), 37 samples
  [ 0] kotlin.coroutines.CombinedContext.fold
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 2] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 3] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 4] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 5] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 6] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 545596597 ns (0.68%), 40 samples
  [ 0] __tls_get_addr
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 545161498 ns (0.68%), 36 samples
  [ 0] pthread_cond_timedwait@@GLIBC_2.3.2
  [ 1] [unknown]
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 542243353 ns (0.67%), 30 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.getAndSet
  [ 1] kotlinx.coroutines.scheduling.WorkQueue.poll
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 515479834 ns (0.64%), 39 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 501360421 ns (0.62%), 29 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 501218012 ns (0.62%), 30 samples
  [ 0] /usr/lib/x86_64-linux-gnu/libc-2.33.so
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 471108713 ns (0.58%), 31 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 440529208 ns (0.55%), 21 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 6] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [10] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [12] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [13] io.ktor.utils.io.ByteBufferChannel.flush
  [14] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [15] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [16] kotlinx.coroutines.DispatchedTask.run
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 431493672 ns (0.53%), 21 samples
  [ 0] java.nio.Buffer.position
  [ 1] java.nio.ByteBuffer.position
  [ 2] java.nio.MappedByteBuffer.position
  [ 3] java.nio.MappedByteBuffer.position
  [ 4] java.nio.Buffer.<init>
  [ 5] java.nio.ByteBuffer.<init>
  [ 6] java.nio.ByteBuffer.<init>
  [ 7] java.nio.MappedByteBuffer.<init>
  [ 8] java.nio.DirectByteBuffer.<init>
  [ 9] java.nio.DirectByteBuffer.duplicate
  [10] io.ktor.util.BufferViewJvmKt.read
  [11] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 402022895 ns (0.50%), 22 samples
  [ 0] __GI___pthread_mutex_lock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [12] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [13] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [14] io.ktor.utils.io.ByteBufferChannel.flush
  [15] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [16] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [17] kotlinx.coroutines.DispatchedTask.run
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 391315195 ns (0.48%), 24 samples
  [ 0] kotlinx.coroutines.scheduling.LimitingDispatcher.afterTask
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 372020921 ns (0.46%), 14 samples
  [ 0] java.nio.MappedByteBuffer.position
  [ 1] java.nio.DirectByteBuffer.get
  [ 2] java.nio.HeapByteBuffer.put
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 360690722 ns (0.45%), 21 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 352621032 ns (0.44%), 16 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 1] io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
  [ 2] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 342877428 ns (0.42%), 14 samples
  [ 0] __pthread_cond_signal
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 341702241 ns (0.42%), 15 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 2] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 3] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 4] io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
  [ 5] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 337635964 ns (0.42%), 20 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 330996609 ns (0.41%), 21 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 1] io.ktor.utils.io.ByteBufferChannel.flush
  [ 2] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 330665765 ns (0.41%), 20 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.valueCheck
  [ 1] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.getAndSet
  [ 2] kotlinx.coroutines.scheduling.WorkQueue.add
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.submitToLocalQueue
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 5] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [10] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [11] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [15] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [16] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [17] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [18] kotlinx.coroutines.DispatchedTask.run
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [22] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 328099989 ns (0.41%), 18 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.inStack
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 321102131 ns (0.40%), 18 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 1] kotlin.coroutines.CombinedContext.fold
  [ 2] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 3] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 4] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 5] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 6] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 7] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [12] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 320665320 ns (0.40%), 20 samples
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.internal.RingBufferCapacity.tryWriteAtLeast
  [ 2] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 320559349 ns (0.40%), 18 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 4] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 5] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [10] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [11] io.ktor.utils.io.ByteBufferChannel.flush
  [12] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 310931914 ns (0.39%), 20 samples
  [ 0] sun.nio.ch.NativeThread.current
  [ 1] sun.nio.ch.NativeThreadSet.add
  [ 2] sun.nio.ch.FileChannelImpl.read
  [ 3] io.ktor.util.BufferViewJvmKt.read
  [ 4] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 310689658 ns (0.38%), 16 samples
  [ 0] itable stub
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 300074122 ns (0.37%), 16 samples
  [ 0] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 298528228 ns (0.37%), 22 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 285771663 ns (0.35%), 17 samples
  [ 0] [vdso]
  [ 1] clock_gettime
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 279299010 ns (0.35%), 24 samples
  [ 0] kotlinx.coroutines.scheduling.WorkQueue.tryStealLastScheduled
  [ 1] kotlinx.coroutines.scheduling.WorkQueue.tryStealFrom
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 271162473 ns (0.34%), 11 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.getAndSet
  [ 1] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 2] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.flush
  [ 4] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 261379525 ns (0.32%), 15 samples
  [ 0] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 261177374 ns (0.32%), 15 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 250917768 ns (0.31%), 15 samples
  [ 0] java.lang.invoke.VarHandleObjects$Array.getVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [12] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [13] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [14] io.ktor.utils.io.ByteBufferChannel.flush
  [15] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [16] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [17] kotlinx.coroutines.DispatchedTask.run
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 250527508 ns (0.31%), 17 samples
  [ 0] kotlin.coroutines.CombinedContext.get
  [ 1] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 2] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 237618684 ns (0.29%), 18 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 233088825 ns (0.29%), 10 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 230695580 ns (0.29%), 13 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.getAndSet
  [ 1] kotlinx.coroutines.scheduling.WorkQueue.add
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.submitToLocalQueue
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 4] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 5] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 9] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [10] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [14] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [15] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [16] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [17] kotlinx.coroutines.DispatchedTask.run
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 230164046 ns (0.29%), 11 samples
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.addAndGet
  [ 1] io.ktor.utils.io.internal.RingBufferCapacity.flush
  [ 2] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.flush
  [ 4] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 220875254 ns (0.27%), 12 samples
  [ 0] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 1] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 2] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 3] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 4] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 5] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.flush
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 215871066 ns (0.27%), 14 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 210742607 ns (0.26%), 11 samples
  [ 0] itable stub
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 210515581 ns (0.26%), 12 samples
  [ 0] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 1] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 201209094 ns (0.25%), 10 samples
  [ 0] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 1] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 2] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 200322122 ns (0.25%), 13 samples
  [ 0] java.nio.HeapByteBuffer.put
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 196606524 ns (0.24%), 17 samples
  [ 0] pthread_cond_timedwait@@GLIBC_2.3.2
  [ 1] [unknown]
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 195942061 ns (0.24%), 12 samples
  [ 0] __GI___pthread_mutex_trylock
  [ 1] [unknown]
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 190545375 ns (0.24%), 14 samples
  [ 0] __GI___pthread_mutex_unlock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [12] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [13] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [14] io.ktor.utils.io.ByteBufferChannel.flush
  [15] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [16] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [17] kotlinx.coroutines.DispatchedTask.run
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 190011062 ns (0.24%), 9 samples
  [ 0] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 1] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 184779755 ns (0.23%), 13 samples
  [ 0] java.lang.invoke.VarHandleObjects$Array.getVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 180954282 ns (0.22%), 12 samples
  [ 0] java.nio.ByteBuffer.position
  [ 1] java.nio.MappedByteBuffer.position
  [ 2] java.nio.MappedByteBuffer.position
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 180886336 ns (0.22%), 9 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackNextIndex
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 5] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [11] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [12] io.ktor.utils.io.ByteBufferChannel.flush
  [13] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 170300397 ns (0.21%), 10 samples
  [ 0] io.ktor.utils.io.internal.RingBufferCapacity.flush
  [ 1] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.flush
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 161778795 ns (0.20%), 9 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.ByteBufferChannel.suspensionForSize
  [ 2] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 160655948 ns (0.20%), 11 samples
  [ 0] io.ktor.utils.io.internal.CancellableReusableContinuation$JobRelation.<init>
  [ 1] io.ktor.utils.io.internal.CancellableReusableContinuation.parent
  [ 2] io.ktor.utils.io.internal.CancellableReusableContinuation.completeSuspendBlock
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 160435400 ns (0.20%), 8 samples
  [ 0] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 160397604 ns (0.20%), 9 samples
  [ 0] itable stub
  [ 1] kotlinx.coroutines.internal.DispatchedContinuation.takeState$kotlinx_coroutines_core
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 160077430 ns (0.20%), 8 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 155101473 ns (0.19%), 14 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 150202170 ns (0.19%), 10 samples
  [ 0] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 1] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 2] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 142923116 ns (0.18%), 10 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 134330828 ns (0.17%), 11 samples
  [ 0] jdk.internal.misc.Unsafe.park
  [ 1] java.util.concurrent.locks.LockSupport.parkNanos
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 130712811 ns (0.16%), 6 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 130592208 ns (0.16%), 7 samples
  [ 0] jdk.internal.misc.Unsafe.checkPointer
  [ 1] jdk.internal.misc.Unsafe.checkPrimitivePointer
  [ 2] jdk.internal.misc.Unsafe.copyMemoryChecks
  [ 3] jdk.internal.misc.Unsafe.copyMemory
  [ 4] java.nio.DirectByteBuffer.get
  [ 5] java.nio.HeapByteBuffer.put
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 130139708 ns (0.16%), 7 samples
  [ 0] kotlin.coroutines.CombinedContext.get
  [ 1] io.ktor.utils.io.internal.CancellableReusableContinuation.parent
  [ 2] io.ktor.utils.io.internal.CancellableReusableContinuation.completeSuspendBlock
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 130001170 ns (0.16%), 4 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 124223791 ns (0.15%), 9 samples
  [ 0] __pthread_disable_asynccancel
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 124188214 ns (0.15%), 10 samples
  [ 0] __tls_get_addr
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 123345953 ns (0.15%), 9 samples
  [ 0] kotlinx.coroutines.scheduling.WorkQueue.pollBuffer
  [ 1] kotlinx.coroutines.scheduling.WorkQueue.tryStealFrom
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 123013853 ns (0.15%), 10 samples
  [ 0] clock_gettime
  [ 1] [unknown_Java]

--- 121434578 ns (0.15%), 8 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 121057723 ns (0.15%), 6 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/libnio.so
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 120319966 ns (0.15%), 9 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [22] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [23] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [24] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 120214647 ns (0.15%), 8 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.getAndSet
  [ 1] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 2] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.access$flushImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 5] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 6] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 7] io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
  [ 8] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 120141303 ns (0.15%), 9 samples
  [ 0] kotlinx.coroutines.internal.DispatchedContinuation.takeState$kotlinx_coroutines_core
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 114112238 ns (0.14%), 10 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 114049562 ns (0.14%), 10 samples
  [ 0] java.lang.invoke.VarHandleObjects$Array.getVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 110930912 ns (0.14%), 6 samples
  [ 0] vtable stub
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 110919270 ns (0.14%), 7 samples
  [ 0] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 1] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 2] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.flush
  [ 4] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 110541249 ns (0.14%), 6 samples
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.internal.RingBufferCapacity.completeWrite
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesWritten
  [ 3] io.ktor.utils.io.ByteBufferChannel.bytesWrittenFromSession$ktor_io
  [ 4] io.ktor.utils.io.internal.WriteSessionImpl.written
  [ 5] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 110465226 ns (0.14%), 2 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.flush
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 110008499 ns (0.14%), 5 samples
  [ 0] Java_sun_nio_ch_FileDispatcherImpl_read0
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 110007254 ns (0.14%), 4 samples
  [ 0] jdk.internal.misc.Unsafe.unpark
  [ 1] java.util.concurrent.locks.LockSupport.unpark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 5] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [11] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [12] io.ktor.utils.io.ByteBufferChannel.flush
  [13] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 103581864 ns (0.13%), 7 samples
  [ 0] [vdso]
  [ 1] [unknown_Java]

--- 103494397 ns (0.13%), 5 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 102489902 ns (0.13%), 5 samples
  [ 0] __GI___pthread_mutex_trylock
  [ 1] [unknown]
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 102370365 ns (0.13%), 7 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 100156569 ns (0.12%), 4 samples
  [ 0] java.nio.DirectByteBuffer.duplicate
  [ 1] io.ktor.util.BufferViewJvmKt.read
  [ 2] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 100131799 ns (0.12%), 5 samples
  [ 0] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 100021635 ns (0.12%), 6 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 93312238 ns (0.12%), 7 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 92500718 ns (0.11%), 4 samples
  [ 0] kotlinx.coroutines.scheduling.WorkQueue.tryStealLastScheduled
  [ 1] kotlinx.coroutines.scheduling.WorkQueue.tryStealFrom
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 92101979 ns (0.11%), 6 samples
  [ 0] __pthread_mutex_unlock_usercnt
  [ 1] [unknown]
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 90532041 ns (0.11%), 7 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 3] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 4] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 5] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 6] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 7] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 8] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [13] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [14] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [15] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [16] kotlinx.coroutines.DispatchedTask.run
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 90524589 ns (0.11%), 5 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryAcquireCpuPermit
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 90395254 ns (0.11%), 6 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryAcquireCpuPermit
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 90218472 ns (0.11%), 4 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 90002935 ns (0.11%), 6 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.getState
  [ 1] io.ktor.utils.io.ByteBufferChannel.writeSuspendPredicate
  [ 2] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 3] io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
  [ 4] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 82932732 ns (0.10%), 7 samples
  [ 0] __pthread_disable_asynccancel
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 82534562 ns (0.10%), 3 samples
  [ 0] __pthread_mutex_cond_lock
  [ 1] [unknown]
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 82523750 ns (0.10%), 6 samples
  [ 0] clock_gettime
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 81548152 ns (0.10%), 7 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryAcquireCpuPermit
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 81277892 ns (0.10%), 3 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryReleaseCpu
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 81003537 ns (0.10%), 4 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 80331328 ns (0.10%), 3 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 80264186 ns (0.10%), 4 samples
  [ 0] kotlin.coroutines.CombinedContext.fold
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 2] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 3] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 4] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 5] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 6] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 80141352 ns (0.10%), 2 samples
  [ 0] kotlinx.coroutines.DispatchedTask.run
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 80003012 ns (0.10%), 2 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 72680672 ns (0.09%), 5 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 72665310 ns (0.09%), 7 samples
  [ 0] __pthread_enable_asynccancel
  [ 1] [unknown]
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 72271224 ns (0.09%), 6 samples
  [ 0] java.lang.invoke.VarHandleObjects$Array.getVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 71940936 ns (0.09%), 5 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 71516669 ns (0.09%), 4 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 71396932 ns (0.09%), 3 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 71370511 ns (0.09%), 2 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] kotlinx.coroutines.scheduling.LimitingDispatcher.afterTask
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 70783338 ns (0.09%), 4 samples
  [ 0] kotlin.jvm.internal.Intrinsics.checkNotNullParameter
  [ 1] io.ktor.utils.io.internal.CancellableReusableContinuation.completeSuspendBlock
  [ 2] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 70569811 ns (0.09%), 3 samples
  [ 0] kotlin.coroutines.CombinedContext.get
  [ 1] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 2] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 70447017 ns (0.09%), 5 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.internal.CancellableReusableContinuation.completeSuspendBlock
  [ 2] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 70304626 ns (0.09%), 3 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 70187269 ns (0.09%), 5 samples
  [ 0] io.ktor.utils.io.internal.RingBufferCapacity.flush
  [ 1] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.access$flushImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 4] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 5] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 6] io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 70181561 ns (0.09%), 4 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 70133093 ns (0.09%), 3 samples
  [ 0] java.nio.Buffer.position
  [ 1] java.nio.ByteBuffer.position
  [ 2] java.nio.MappedByteBuffer.position
  [ 3] java.nio.MappedByteBuffer.position
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 70069219 ns (0.09%), 5 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.getState
  [ 1] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.access$flushImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 4] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 5] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 6] io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 70019377 ns (0.09%), 2 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 70001327 ns (0.09%), 3 samples
  [ 0] java.nio.ByteBuffer.position
  [ 1] java.nio.MappedByteBuffer.position
  [ 2] java.nio.DirectByteBuffer.get
  [ 3] java.nio.HeapByteBuffer.put
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 69999265 ns (0.09%), 3 samples
  [ 0] jdk.internal.misc.Unsafe.copyMemory
  [ 1] java.nio.DirectByteBuffer.get
  [ 2] java.nio.HeapByteBuffer.put
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 62314632 ns (0.08%), 5 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 62256190 ns (0.08%), 4 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 61943633 ns (0.08%), 5 samples
  [ 0] __pthread_enable_asynccancel
  [ 1] [unknown]
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 61647177 ns (0.08%), 4 samples
  [ 0] __GI___pthread_mutex_trylock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60964078 ns (0.08%), 1 sample
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60875247 ns (0.08%), 4 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryAcquireCpuPermit
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60394135 ns (0.07%), 3 samples
  [ 0] __GI___pthread_mutex_unlock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [22] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [23] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [24] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60348840 ns (0.07%), 4 samples
  [ 0] kotlin.Result.exceptionOrNull-impl
  [ 1] kotlinx.coroutines.CompletionStateKt.toState
  [ 2] kotlinx.coroutines.CompletionStateKt.toState$default
  [ 3] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 4] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 5] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60306472 ns (0.07%), 2 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackNextIndex
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 5] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [11] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [12] io.ktor.utils.io.ByteBufferChannel.flush
  [13] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60231610 ns (0.07%), 4 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
  [ 1] kotlin.coroutines.jvm.internal.ContinuationImpl.<init>
  [ 2] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.<init>
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60172248 ns (0.07%), 4 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60053594 ns (0.07%), 3 samples
  [ 0] kotlinx.coroutines.DispatchedTask.run
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60033105 ns (0.07%), 3 samples
  [ 0] unsafe_arraycopy
  [ 1] jdk.internal.misc.Unsafe.checkPrimitivePointer
  [ 2] jdk.internal.misc.Unsafe.copyMemoryChecks
  [ 3] jdk.internal.misc.Unsafe.copyMemory
  [ 4] java.nio.DirectByteBuffer.get
  [ 5] java.nio.HeapByteBuffer.put
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60019341 ns (0.07%), 2 samples
  [ 0] java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn
  [ 1] java.nio.channels.spi.AbstractInterruptibleChannel.begin
  [ 2] sun.nio.ch.FileChannelImpl.beginBlocking
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.util.BufferViewJvmKt.read
  [ 5] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60004464 ns (0.07%), 3 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 1] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 2] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 3] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 4] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 5] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 6] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60003179 ns (0.07%), 2 samples
  [ 0] java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn
  [ 1] java.nio.channels.spi.AbstractInterruptibleChannel.begin
  [ 2] sun.nio.ch.FileChannelImpl.beginBlocking
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.util.BufferViewJvmKt.read
  [ 5] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60003076 ns (0.07%), 2 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.isClosedForRead
  [ 1] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 2] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 3] kotlinx.coroutines.DispatchedTask.run
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 60001906 ns (0.07%), 3 samples
  [ 0] io.ktor.utils.io.internal.CancellableReusableContinuation.completeSuspendBlock
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 59999733 ns (0.07%), 5 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.<init>
  [ 1] kotlin.coroutines.jvm.internal.ContinuationImpl.<init>
  [ 2] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.<init>
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51962264 ns (0.06%), 5 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51923399 ns (0.06%), 3 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51902088 ns (0.06%), 4 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51898255 ns (0.06%), 3 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51892104 ns (0.06%), 5 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51496804 ns (0.06%), 5 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.inStack
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 51131503 ns (0.06%), 1 sample
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50905006 ns (0.06%), 3 samples
  [ 0] [vdso]
  [ 1] clock_gettime
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50742070 ns (0.06%), 3 samples
  [ 0] __vdso_clock_gettime
  [ 1] [unknown_Java]

--- 50696210 ns (0.06%), 2 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50494423 ns (0.06%), 2 samples
  [ 0] io.ktor.utils.io.internal.RingBufferCapacity.completeRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50426755 ns (0.06%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50358474 ns (0.06%), 4 samples
  [ 0] java.nio.ByteBuffer.position
  [ 1] java.nio.MappedByteBuffer.position
  [ 2] java.nio.MappedByteBuffer.position
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50344997 ns (0.06%), 1 sample
  [ 0] sun.nio.ch.NativeThread.current
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50275917 ns (0.06%), 4 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50274892 ns (0.06%), 3 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 4] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 5] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [10] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [11] io.ktor.utils.io.ByteBufferChannel.flush
  [12] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50211506 ns (0.06%), 2 samples
  [ 0] java.nio.DirectByteBuffer.duplicate
  [ 1] io.ktor.util.BufferViewJvmKt.read
  [ 2] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50087078 ns (0.06%), 4 samples
  [ 0] kotlinx.coroutines.scheduling.WorkQueue.poll
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50077225 ns (0.06%), 4 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackNextIndex
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50056230 ns (0.06%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel.access$flushImpl
  [ 1] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 2] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 3] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 4] io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
  [ 5] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50045686 ns (0.06%), 2 samples
  [ 0] kotlinx.coroutines.DispatchedTask.run
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50028344 ns (0.06%), 4 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50010277 ns (0.06%), 3 samples
  [ 0] pthread_mutex_lock
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [12] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [13] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [14] io.ktor.utils.io.ByteBufferChannel.flush
  [15] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [16] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [17] kotlinx.coroutines.DispatchedTask.run
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [20] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [21] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50005790 ns (0.06%), 3 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50005099 ns (0.06%), 4 samples
  [ 0] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 1] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 2] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 3] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 4] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 5] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 6] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.flush
  [ 8] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50005057 ns (0.06%), 2 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.getState
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$getState
  [ 2] io.ktor.utils.io.ByteBufferChannel.suspensionForSize
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50004348 ns (0.06%), 3 samples
  [ 0] java.lang.Object.equals
  [ 1] kotlin.jvm.internal.Intrinsics.areEqual
  [ 2] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50003469 ns (0.06%), 3 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackNextIndex
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 50002747 ns (0.06%), 3 samples
  [ 0] java.lang.Thread.blockedOn
  [ 1] java.lang.System$2.blockedOn
  [ 2] java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn
  [ 3] java.nio.channels.spi.AbstractInterruptibleChannel.begin
  [ 4] sun.nio.ch.FileChannelImpl.beginBlocking
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

          ns  percent  samples  top
  ----------  -------  -------  ---
  9694883878   12.01%      545  read
  8584059186   10.64%      598  __GI___pthread_mutex_unlock
  8299068591   10.28%      572  /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  4117460775    5.10%      205  __pthread_cond_signal
  3270885557    4.05%      203  [vdso]
  2936222155    3.64%      162  jlong_disjoint_arraycopy
  2493910413    3.09%      154  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryReleaseCpu
  2290366722    2.84%      144  __futex_abstimed_wait_cancelable64
  1915867859    2.37%      129  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  1426233512    1.77%       93  java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  1214433140    1.50%       65  java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.getAndSet
  1123490915    1.39%       57  kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  1095068750    1.36%       84  jdk.internal.misc.Unsafe.park
  1063788558    1.32%       55  kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackNextIndex
  1038257804    1.29%       64  kotlinx.coroutines.scheduling.WorkQueue.pollBuffer
  1032399366    1.28%       61  kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
   945263116    1.17%       68  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
   892328406    1.11%       58  io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
   772534037    0.96%       56  pthread_cond_timedwait@@GLIBC_2.3.2
   751309073    0.93%       55  __tls_get_addr
   722051773    0.89%       43  io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
   681829869    0.84%       36  itable stub
   681630033    0.84%       39  io.ktor.utils.io.ByteBufferChannel.setupStateForRead
   672304350    0.83%       48  java.lang.invoke.VarHandleObjects$Array.getVolatile
   641264655    0.79%       32  kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
   633201876    0.78%       35  java.nio.MappedByteBuffer.limit
   631321144    0.78%       41  kotlin.coroutines.CombinedContext.fold
   583928364    0.72%       30  java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
   582583788    0.72%       33  sun.nio.ch.FileDispatcherImpl.read0
   561249328    0.70%       34  kotlin.coroutines.CombinedContext.get
   551628600    0.68%       27  java.nio.Buffer.position
   501218012    0.62%       30  /usr/lib/x86_64-linux-gnu/libc-2.33.so
   481710424    0.60%       32  io.ktor.utils.io.ByteBufferChannel.flushImpl
   472028154    0.58%       26  __GI___pthread_mutex_lock
   451205022    0.56%       27  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
   437281762    0.54%       28  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
   420089055    0.52%       30  io.ktor.utils.io.ByteBufferChannel.getState
   402848787    0.50%       31  kotlinx.coroutines.scheduling.WorkQueue.tryStealLastScheduled
   402495291    0.50%       26  kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
   402029516    0.50%       16  java.nio.MappedByteBuffer.position
   400174313    0.50%       18  kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
   391315195    0.48%       24  kotlinx.coroutines.scheduling.LimitingDispatcher.afterTask
   389964669    0.48%       24  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.inStack
   387638657    0.48%       24  java.util.concurrent.atomic.AtomicReferenceArray.get
   382623689    0.47%       17  io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
   381276220    0.47%       22  sun.nio.ch.NativeThread.current
   380841338    0.47%       23  __GI___pthread_mutex_trylock
   360690722    0.45%       21  kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
   351411264    0.44%       20  kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
   330665765    0.41%       20  java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.valueCheck
   321349622    0.40%       19  io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
   321074845    0.40%       20  kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
   301625133    0.37%       21  io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
   301322928    0.37%       17  kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
   301314083    0.37%       19  java.nio.ByteBuffer.position
   282569860    0.35%       17  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryAcquireCpuPermit
   280574080    0.35%       14  io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInIODispatcher$1.invokeSuspend
   266972833    0.33%       21  clock_gettime
   260448146    0.32%       13  kotlinx.coroutines.DispatchedTask.run
   253791687    0.31%       12  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
   240487666    0.30%       15  io.ktor.utils.io.internal.RingBufferCapacity.flush
   230164046    0.29%       11  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.addAndGet
   216341245    0.27%       15  kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
   207156523    0.26%       16  __pthread_disable_asynccancel
   200504875    0.25%        9  java.nio.DirectByteBuffer.duplicate
   200322122    0.25%       13  java.nio.HeapByteBuffer.put
   180955076    0.22%       11  io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
   180788901    0.22%       10  jdk.internal.misc.Unsafe.checkPointer
   175247174    0.22%       11  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
   170900029    0.21%       11  io.ktor.utils.io.ByteBufferChannel.getClosed
   170656705    0.21%       12  io.ktor.utils.io.internal.CancellableReusableContinuation$JobRelation.<init>
   161700713    0.20%        9  io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
   150519725    0.19%       12  kotlin.coroutines.jvm.internal.ContinuationImpl.<init>
   150143473    0.19%       10  kotlinx.coroutines.internal.DispatchedContinuation.takeState$kotlinx_coroutines_core
   143288915    0.18%       11  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.nextInt
   142923116    0.18%       10  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
   140109653    0.17%        8  kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
   134608943    0.17%       12  __pthread_enable_asynccancel
   130022324    0.16%        9  io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
   130013749    0.16%        6  jdk.internal.misc.Unsafe.unpark
   121057723    0.15%        6  /usr/lib/jvm/java-11-openjdk-amd64/lib/libnio.so
   120530758    0.15%        9  kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
   120022520    0.15%        4  java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn
   113713720    0.14%        4  __pthread_mutex_cond_lock
   111733827    0.14%        5  java.util.concurrent.ConcurrentLinkedQueue.poll
   110930912    0.14%        6  vtable stub
   110465226    0.14%        2  io.ktor.utils.io.ByteBufferChannel.resumeReadOp
   110008499    0.14%        5  Java_sun_nio_ch_FileDispatcherImpl_read0
   102489303    0.13%        7  __pthread_mutex_unlock_usercnt
   102132320    0.13%        5  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
    90345016    0.11%        6  java.nio.DirectByteBuffer.get
    90187927    0.11%        6  kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
    90005134    0.11%        5  sun.nio.ch.NativeThreadSet.add
    80442423    0.10%        5  kotlin.coroutines.jvm.internal.BaseContinuationImpl.<init>
    80234851    0.10%        3  kotlin.jvm.internal.Intrinsics.checkNotNull
    80003012    0.10%        2  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
    80002514    0.10%        4  io.ktor.utils.io.ByteBufferChannel.prepareBuffer
    71512093    0.09%        4  __vdso_clock_gettime
    70783338    0.09%        4  kotlin.jvm.internal.Intrinsics.checkNotNullParameter
    70205777    0.09%        4  jdk.internal.misc.Unsafe.checkPrimitiveArray
    70120922    0.09%        3  io.ktor.utils.io.ByteBufferChannel.writeSuspendPredicate
    70012440    0.09%        6  kotlinx.coroutines.scheduling.CoroutineScheduler.currentWorker
    70003589    0.09%        3  io.ktor.utils.io.ByteBufferChannel.isClosedForRead
    70003443    0.09%        5  java.lang.Thread.blockedOn
    69999265    0.09%        3  jdk.internal.misc.Unsafe.copyMemory
    61508297    0.08%        4  pthread_mutex_unlock
    60618168    0.08%        4  kotlinx.coroutines.scheduling.CoroutineScheduler.submitToLocalQueue
    60495735    0.07%        3  io.ktor.utils.io.internal.RingBufferCapacity.completeRead
    60426293    0.07%        2  io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
    60348840    0.07%        4  kotlin.Result.exceptionOrNull-impl
    60267607    0.07%        4  io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
    60033105    0.07%        3  unsafe_arraycopy
    60001906    0.07%        3  io.ktor.utils.io.internal.CancellableReusableContinuation.completeSuspendBlock
    60001608    0.07%        3  kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
    60000324    0.07%        3  io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
    50933554    0.06%        2  io.ktor.utils.io.internal.CancellableReusableContinuation.parent
    50696210    0.06%        2  kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
    50282204    0.06%        3  io.ktor.util.BufferViewJvmKt.read
    50232802    0.06%        3  java.nio.Buffer.<init>
    50087078    0.06%        4  kotlinx.coroutines.scheduling.WorkQueue.poll
    50056230    0.06%        1  io.ktor.utils.io.ByteBufferChannel.access$flushImpl
    50010277    0.06%        3  pthread_mutex_lock
    50004348    0.06%        3  java.lang.Object.equals
    50001431    0.06%        4  jdk.internal.misc.Unsafe.checkOffset
    50000444    0.06%        4  java.nio.MappedByteBuffer.<init>
    50000060    0.06%        4  java.nio.Buffer.limit
    49998893    0.06%        3  io.ktor.utils.io.core.ByteOrder.getNioOrder
    41551125    0.05%        3  __condvar_cancel_waiting
    41138008    0.05%        3  kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush
    40476668    0.05%        2  kotlinx.coroutines.scheduling.CoroutineScheduler.createTask
    40246093    0.05%        4  jdk.internal.misc.Unsafe.checkPrimitivePointer
    40216705    0.05%        2  pthread_self
    40209345    0.05%        4  jdk.internal.misc.Unsafe.copyMemoryChecks
    40132983    0.05%        1  sun.nio.ch.FileDispatcherImpl.read
    40115180    0.05%        1  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.getAndSet
    40026779    0.05%        2  java.lang.Integer.valueOf
    40014224    0.05%        3  io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
    40000569    0.05%        2  io.ktor.utils.io.internal.WriteSessionImpl.written
    31122629    0.04%        2  kotlinx.coroutines.JobSupport.invokeOnCompletion
    30666699    0.04%        2  kotlinx.coroutines.scheduling.CoroutineScheduler.isTerminated
    30094557    0.04%        3  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
    30011114    0.04%        3  pthread_cond_signal
    30002689    0.04%        1  io.ktor.utils.io.ByteBufferChannel.getWriteOp
    30002517    0.04%        2  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.getAndAdd
    30001604    0.04%        1  io.ktor.utils.io.ByteBufferChannel.readSuspend
    30000915    0.04%        1  java.nio.Buffer.hasRemaining
    29999477    0.04%        1  Java_sun_nio_ch_NativeThread_current
    20768366    0.03%        1  _pthread_cleanup_pop
    20760408    0.03%        2  pthread_cond_timedwait
    20753094    0.03%        2  java.lang.Thread.interrupted
    20521264    0.03%        2  java.util.concurrent.locks.LockSupport.parkNanos
    20284453    0.03%        1  io.ktor.utils.io.core.BufferSharedState.getWritePosition
    20186283    0.03%        1  java.lang.Object.<init>
    20183947    0.03%        2  io.ktor.utils.io.internal.RingBufferCapacity.tryWriteAtLeast
    20057864    0.02%        1  io.ktor.utils.io.ByteBufferChannel.getReadOp
    20024679    0.02%        1  kotlin.jvm.internal.Intrinsics.areEqual
    20002073    0.02%        1  io.ktor.utils.io.core.BufferSharedState.getStartGap
    20001372    0.02%        2  kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
    20000975    0.02%        1  io.ktor.utils.io.internal.RingBufferCapacity.completeWrite
    19998058    0.02%        2  java.nio.channels.spi.AbstractInterruptibleChannel.begin
    19997436    0.02%        2  io.ktor.utils.io.ByteBufferChannel.readAvailable
    10409037    0.01%        1  __pthread_cleanup_push
    10374238    0.01%        1  io.ktor.utils.io.internal.RingBufferCapacity.resetForWrite
    10360184    0.01%        1  pthread_mutex_unlock@plt
    10354416    0.01%        1  pthread_mutex_trylock@plt
    10241131    0.01%        1  kotlinx.coroutines.CoroutineDispatcher.get
    10203566    0.01%        1  java.lang.invoke.VarHandleGuards.guard_LI_L
    10131044    0.01%        1  io.ktor.utils.io.internal.WriteSessionImpl.request
    10061952    0.01%        1  I2C/C2I adapters
    10006740    0.01%        1  pthread_cond_signal@plt
    10003541    0.01%        1  sun.nio.ch.FileChannelImpl.read
    10000693    0.01%        1  kotlinx.coroutines.internal.LockFreeLinkedListKt.unwrap
    10000568    0.01%        1  java.nio.ByteBuffer.<init>
    10000428    0.01%        1  __tls_get_addr@plt
    10000357    0.01%        1  io.ktor.utils.io.ChannelScope.getChannel
    10000275    0.01%        1  io.ktor.utils.io.ByteBufferChannel.getTotalBytesRead
    10000098    0.01%        1  java.lang.invoke.VarHandleObjects$Array.compareAndSet
     9999980    0.01%        1  io.ktor.utils.io.core.Buffer.getStartGap
     9999861    0.01%        1  java.lang.Class.getComponentType
     9999821    0.01%        1  io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
     9999675    0.01%        1  kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
     9999045    0.01%        1  kotlinx.coroutines.CoroutineDispatcher.releaseInterceptedContinuation
     9998767    0.01%        1  kotlinx.coroutines.CompletionStateKt.toState
     9998520    0.01%        1  jlong_arraycopy
     9998480    0.01%        1  kotlinx.coroutines.scheduling.NanoTimeSource.nanoTime

