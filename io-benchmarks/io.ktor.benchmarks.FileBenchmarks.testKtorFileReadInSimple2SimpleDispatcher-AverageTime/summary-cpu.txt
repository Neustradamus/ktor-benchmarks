--- Execution profile ---
Total samples       : 22668
unknown_Java        : 1 (0.00%)

--- 75540000000 ns (33.32%), 7554 samples
  [ 0] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 29190000000 ns (12.88%), 2919 samples
  [ 0] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 19600000000 ns (8.65%), 1960 samples
  [ 0] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 16040000000 ns (7.08%), 1604 samples
  [ 0] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 15080000000 ns (6.65%), 1508 samples
  [ 0] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 7530000000 ns (3.32%), 753 samples
  [ 0] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 6260000000 ns (2.76%), 626 samples
  [ 0] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 5740000000 ns (2.53%), 574 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 4330000000 ns (1.91%), 433 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 4160000000 ns (1.84%), 416 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 3970000000 ns (1.75%), 397 samples
  [ 0] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 3780000000 ns (1.67%), 378 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 3030000000 ns (1.34%), 303 samples
  [ 0] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 2540000000 ns (1.12%), 254 samples
  [ 0] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 2150000000 ns (0.95%), 215 samples
  [ 0] jlong_disjoint_arraycopy
  [ 1] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.accessCheck
  [ 2] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 3] io.ktor.utils.io.internal.RingBufferCapacity.tryReadAtMost
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [13] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [14] java.lang.Thread.run

--- 2110000000 ns (0.93%), 211 samples
  [ 0] java.lang.invoke.VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] java.lang.invoke.VarHandleGuards.guard_LLL_Z
  [ 2] java.util.concurrent.ConcurrentLinkedQueue$Node.casItem
  [ 3] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 4] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 5] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 6] java.lang.Thread.run

--- 2000000000 ns (0.88%), 200 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 1860000000 ns (0.82%), 186 samples
  [ 0] io.ktor.benchmarks.SimpleDispatcher.getQueue
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 1740000000 ns (0.77%), 174 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 1690000000 ns (0.75%), 169 samples
  [ 0] read
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 1630000000 ns (0.72%), 163 samples
  [ 0] java.lang.invoke.VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] java.lang.invoke.VarHandleGuards.guard_LLL_Z
  [ 2] java.util.concurrent.ConcurrentLinkedQueue$Node.casItem
  [ 3] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 4] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 5] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 6] java.lang.Thread.run

--- 1510000000 ns (0.67%), 151 samples
  [ 0] io.ktor.benchmarks.SimpleDispatcher.getQueue
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 1290000000 ns (0.57%), 129 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 1250000000 ns (0.55%), 125 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 1210000000 ns (0.53%), 121 samples
  [ 0] kotlin.coroutines.jvm.internal.Boxing.boxBoolean
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 9] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [10] java.lang.Thread.run

--- 1160000000 ns (0.51%), 116 samples
  [ 0] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 1] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 2] java.lang.Thread.run

--- 1050000000 ns (0.46%), 105 samples
  [ 0] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 960000000 ns (0.42%), 96 samples
  [ 0] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 1] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 2] java.lang.Thread.run

--- 540000000 ns (0.24%), 54 samples
  [ 0] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 500000000 ns (0.22%), 50 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 470000000 ns (0.21%), 47 samples
  [ 0] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 430000000 ns (0.19%), 43 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 350000000 ns (0.15%), 35 samples
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.internal.RingBufferCapacity.completeRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [12] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [13] java.lang.Thread.run

--- 330000000 ns (0.15%), 33 samples
  [ 0] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 1] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 2] java.lang.Thread.run

--- 280000000 ns (0.12%), 28 samples
  [ 0] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 1] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 2] java.lang.Thread.run

--- 270000000 ns (0.12%), 27 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 260000000 ns (0.11%), 26 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 240000000 ns (0.11%), 24 samples
  [ 0] java.nio.ByteBuffer.position
  [ 1] java.nio.ByteBuffer.put
  [ 2] java.nio.HeapByteBuffer.put
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [12] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [13] java.lang.Thread.run

--- 230000000 ns (0.10%), 23 samples
  [ 0] jdk.internal.misc.Unsafe.copyMemory
  [ 1] jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal
  [ 2] jdk.internal.misc.ScopedMemoryAccess.copyMemory
  [ 3] java.nio.ByteBuffer.putBuffer
  [ 4] java.nio.ByteBuffer.put
  [ 5] java.nio.HeapByteBuffer.put
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [15] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [16] java.lang.Thread.run

--- 220000000 ns (0.10%), 22 samples
  [ 0] kotlin.coroutines.jvm.internal.Boxing.boxBoolean
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 8] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 9] java.lang.Thread.run

--- 220000000 ns (0.10%), 22 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 210000000 ns (0.09%), 21 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 190000000 ns (0.08%), 19 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.suspensionForSize
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [10] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [11] java.lang.Thread.run

--- 160000000 ns (0.07%), 16 samples
  [ 0] jdk.internal.misc.Unsafe.checkPrimitiveArray
  [ 1] jdk.internal.misc.Unsafe.checkPrimitivePointer
  [ 2] jdk.internal.misc.Unsafe.copyMemoryChecks
  [ 3] jdk.internal.misc.Unsafe.copyMemory
  [ 4] jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal
  [ 5] jdk.internal.misc.ScopedMemoryAccess.copyMemory
  [ 6] java.nio.ByteBuffer.putBuffer
  [ 7] java.nio.ByteBuffer.put
  [ 8] java.nio.HeapByteBuffer.put
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [13] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [14] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [15] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [16] kotlinx.coroutines.DispatchedTask.run
  [17] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [18] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [19] java.lang.Thread.run

--- 150000000 ns (0.07%), 15 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.flush
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 7] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 8] java.lang.Thread.run

--- 150000000 ns (0.07%), 15 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 130000000 ns (0.06%), 13 samples
  [ 0] io.ktor.util.internal.LockFreeLinkedListNode.getNext
  [ 1] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 110000000 ns (0.05%), 11 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 90000000 ns (0.04%), 9 samples
  [ 0] java.lang.invoke.VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] java.lang.invoke.VarHandleGuards.guard_LLL_Z
  [ 2] java.util.concurrent.ConcurrentLinkedQueue.updateHead
  [ 3] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 4] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 5] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 6] java.lang.Thread.run

--- 80000000 ns (0.04%), 8 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 9] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [10] java.lang.Thread.run

--- 80000000 ns (0.04%), 8 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.getClosed
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 3] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 7] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 8] java.lang.Thread.run

--- 80000000 ns (0.04%), 8 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 9] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [10] java.lang.Thread.run

--- 80000000 ns (0.04%), 8 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.getClosed
  [ 1] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [12] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [13] java.lang.Thread.run

--- 70000000 ns (0.03%), 7 samples
  [ 0] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 70000000 ns (0.03%), 7 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [10] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [11] java.lang.Thread.run

--- 70000000 ns (0.03%), 7 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [12] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [13] java.lang.Thread.run

--- 70000000 ns (0.03%), 7 samples
  [ 0] java.nio.MappedByteBuffer.position
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [10] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [11] java.lang.Thread.run

--- 70000000 ns (0.03%), 7 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 3] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 4] java.lang.Thread.run

--- 60000000 ns (0.03%), 6 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.prepareBuffer
  [ 1] io.ktor.utils.io.ByteBufferChannel.prepareWriteBuffer$ktor_io
  [ 2] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 7] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 8] java.lang.Thread.run

--- 60000000 ns (0.03%), 6 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 3] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 4] java.lang.Thread.run

--- 50000000 ns (0.02%), 5 samples
  [ 0] sun.nio.ch.FileDispatcherImpl.read0
  [ 1] sun.nio.ch.FileDispatcherImpl.read
  [ 2] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 3] sun.nio.ch.IOUtil.read
  [ 4] sun.nio.ch.FileChannelImpl.read
  [ 5] io.ktor.util.BufferViewJvmKt.read
  [ 6] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [10] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [11] java.lang.Thread.run

--- 50000000 ns (0.02%), 5 samples
  [ 0] __psynch_cvwait
  [ 1] os::PlatformMonitor::wait(long)
  [ 2] Monitor::wait_without_safepoint_check(long long)
  [ 3] WatcherThread::sleep() const
  [ 4] WatcherThread::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 50000000 ns (0.02%), 5 samples
  [ 0] java.nio.Buffer.position
  [ 1] java.nio.ByteBuffer.position
  [ 2] java.nio.MappedByteBuffer.position
  [ 3] java.nio.MappedByteBuffer.position
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [13] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [14] java.lang.Thread.run

--- 50000000 ns (0.02%), 5 samples
  [ 0] java.nio.Buffer.position
  [ 1] java.nio.ByteBuffer.position
  [ 2] java.nio.ByteBuffer.put
  [ 3] java.nio.HeapByteBuffer.put
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [13] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [14] java.lang.Thread.run

--- 50000000 ns (0.02%), 5 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 4] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 5] java.lang.Thread.run

--- 40000000 ns (0.02%), 4 samples
  [ 0] itable stub
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 4] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 5] java.lang.Thread.run

--- 40000000 ns (0.02%), 4 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 4] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 5] java.lang.Thread.run

--- 40000000 ns (0.02%), 4 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 6] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 7] java.lang.Thread.run

--- 40000000 ns (0.02%), 4 samples
  [ 0] io.ktor.util.internal.LockFreeLinkedListNode.getNext
  [ 1] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 40000000 ns (0.02%), 4 samples
  [ 0] java.lang.invoke.VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  [ 1] java.lang.invoke.VarHandleGuards.guard_LLL_Z
  [ 2] java.util.concurrent.ConcurrentLinkedQueue.updateHead
  [ 3] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 4] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 5] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 6] java.lang.Thread.run

--- 30000000 ns (0.01%), 3 samples
  [ 0] Java_sun_nio_ch_FileDispatcherImpl_read0
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 30000000 ns (0.01%), 3 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.prepareBuffer
  [ 1] io.ktor.utils.io.ByteBufferChannel.prepareWriteBuffer$ktor_io
  [ 2] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 7] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 8] java.lang.Thread.run

--- 30000000 ns (0.01%), 3 samples
  [ 0] itable stub
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 4] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 5] java.lang.Thread.run

--- 30000000 ns (0.01%), 3 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.access$flushImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 4] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 5] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 6] io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 30000000 ns (0.01%), 3 samples
  [ 0] io.ktor.utils.io.internal.RingBufferCapacity.completeRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 30000000 ns (0.01%), 3 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.carryIndex
  [ 1] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 30000000 ns (0.01%), 3 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 4] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 5] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] jdk.internal.misc.Unsafe.copyMemoryChecks
  [ 1] jdk.internal.misc.Unsafe.copyMemory
  [ 2] jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal
  [ 3] jdk.internal.misc.ScopedMemoryAccess.copyMemory
  [ 4] java.nio.ByteBuffer.putBuffer
  [ 5] java.nio.ByteBuffer.put
  [ 6] java.nio.HeapByteBuffer.put
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [16] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [17] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] kotlin.jvm.internal.Intrinsics.areEqual
  [ 1] kotlin.coroutines.CoroutineContext$Element$DefaultImpls.get
  [ 2] kotlinx.coroutines.Job$DefaultImpls.get
  [ 3] kotlinx.coroutines.JobSupport.get
  [ 4] kotlin.coroutines.CombinedContext.get
  [ 5] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 6] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 7] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [12] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [16] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [17] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 1] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 2] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 3] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 4] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 5] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 6] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 7] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 8] io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
  [ 9] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [13] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [14] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] semaphore_wait_trap
  [ 1] GangWorker::loop()
  [ 2] Thread::call_run()
  [ 3] thread_native_entry(Thread*)
  [ 4] __os_ch_md_redzone_cookie
  [ 5] internal_catch_exc_subsystem

--- 20000000 ns (0.01%), 2 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 3] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 4] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 1] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 2] kotlin.coroutines.CoroutineContext$Element$DefaultImpls.fold
  [ 3] kotlinx.coroutines.Job$DefaultImpls.fold
  [ 4] kotlinx.coroutines.JobSupport.fold
  [ 5] kotlin.coroutines.CombinedContext.fold
  [ 6] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 8] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 9] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [10] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [11] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [17] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [18] kotlinx.coroutines.DispatchedTask.run
  [19] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [20] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [21] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 9] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [10] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] io.ktor.util.internal.LockFreeLinkedListNode.getNext
  [ 1] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] sun.nio.ch.NativeThread.current
  [ 1] sun.nio.ch.NativeThreadSet.add
  [ 2] sun.nio.ch.FileChannelImpl.read
  [ 3] io.ktor.util.BufferViewJvmKt.read
  [ 4] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 8] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 9] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] java.nio.ByteBuffer.position
  [ 1] java.nio.MappedByteBuffer.position
  [ 2] java.nio.MappedByteBuffer.position
  [ 3] java.nio.ByteBuffer.put
  [ 4] java.nio.HeapByteBuffer.put
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [11] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [12] kotlinx.coroutines.DispatchedTask.run
  [13] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [14] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [15] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 1] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 2] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 3] kotlinx.coroutines.DispatchedTask.run
  [ 4] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 5] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 6] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] java.nio.ByteBuffer.position
  [ 1] java.nio.MappedByteBuffer.position
  [ 2] java.nio.MappedByteBuffer.position
  [ 3] java.nio.Buffer.<init>
  [ 4] java.nio.ByteBuffer.<init>
  [ 5] java.nio.ByteBuffer.<init>
  [ 6] java.nio.MappedByteBuffer.<init>
  [ 7] java.nio.DirectByteBuffer.<init>
  [ 8] java.nio.DirectByteBuffer.duplicate
  [ 9] io.ktor.util.BufferViewJvmKt.read
  [10] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [11] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [12] kotlinx.coroutines.DispatchedTask.run
  [13] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [14] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [15] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [10] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [11] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] __psynch_cvwait
  [ 1] os::PlatformMonitor::wait(long)
  [ 2] Monitor::wait_without_safepoint_check(long long)
  [ 3] G1ServiceThread::sleep_before_next_cycle()
  [ 4] G1ServiceThread::run_service()
  [ 5] ConcurrentGCThread::run()
  [ 6] Thread::call_run()
  [ 7] thread_native_entry(Thread*)
  [ 8] __os_ch_md_redzone_cookie
  [ 9] internal_catch_exc_subsystem

--- 20000000 ns (0.01%), 2 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 9] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [10] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 4] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 5] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.internal.RingBufferCapacity.tryWriteAtLeast
  [ 2] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 7] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 8] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] io.ktor.utils.io.core.IoBuffer.resetFromContentToWrite
  [ 1] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 2] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 6] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 7] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 1] io.ktor.utils.io.internal.RingBufferCapacity.tryReadAtMost
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 9] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [10] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 3] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 4] java.lang.Thread.run

--- 20000000 ns (0.01%), 2 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 3] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 4] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 3] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 4] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] JfrObjectAllocationSample::send_event(Klass const*, unsigned long, bool, Thread*)
  [ 1] AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWordImpl**, unsigned long, unsigned long, Thread*)
  [ 2] MemAllocator::Allocation::notify_allocation()
  [ 3] MemAllocator::allocate() const
  [ 4] InstanceKlass::allocate_instance(Thread*)
  [ 5] OptoRuntime::new_instance_C(Klass*, JavaThread*)
  [ 6] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 7] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 8] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 9] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [14] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [15] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [16] kotlinx.coroutines.DispatchedTask.run
  [17] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [18] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [19] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] __psynch_cvwait
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking
  [ 8] io.ktor.benchmarks.FileBenchmarks.testKtorFileReadInSimple2SimpleDispatcher
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileReadInSimple2SimpleDispatcher_jmhTest.testKtorFileReadInSimple2SimpleDispatcher_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileReadInSimple2SimpleDispatcher_jmhTest.testKtorFileReadInSimple2SimpleDispatcher_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.nio.MappedByteBuffer.position
  [ 1] java.nio.MappedByteBuffer.position
  [ 2] java.nio.Buffer.<init>
  [ 3] java.nio.ByteBuffer.<init>
  [ 4] java.nio.ByteBuffer.<init>
  [ 5] java.nio.MappedByteBuffer.<init>
  [ 6] java.nio.DirectByteBuffer.<init>
  [ 7] java.nio.DirectByteBuffer.duplicate
  [ 8] io.ktor.util.BufferViewJvmKt.read
  [ 9] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [13] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [14] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlin.coroutines.CombinedContext.get
  [ 1] io.ktor.utils.io.internal.CancellableReusableContinuation.parent
  [ 2] io.ktor.utils.io.internal.CancellableReusableContinuation.completeSuspendBlock
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [12] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [13] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] jdk.internal.misc.Unsafe.copyMemory
  [ 1] jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal
  [ 2] jdk.internal.misc.ScopedMemoryAccess.copyMemory
  [ 3] java.nio.ByteBuffer.putBuffer
  [ 4] java.nio.ByteBuffer.put
  [ 5] java.nio.HeapByteBuffer.put
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [15] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [16] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.nio.Buffer.checkScope
  [ 1] java.nio.HeapByteBuffer.put
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlinx.coroutines.internal.DispatchedContinuation.takeState$kotlinx_coroutines_core
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 3] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 4] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 1] kotlin.coroutines.jvm.internal.Boxing.boxBoolean
  [ 2] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 9] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [10] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.nio.MappedByteBuffer.<init>
  [ 1] java.nio.DirectByteBuffer.<init>
  [ 2] java.nio.DirectByteBuffer.duplicate
  [ 3] io.ktor.util.BufferViewJvmKt.read
  [ 4] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 8] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 9] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.nio.MappedByteBuffer.limit
  [ 1] java.nio.MappedByteBuffer.limit
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] semaphore_wait_trap
  [ 1] GangWorker::loop()
  [ 2] Thread::call_run()
  [ 3] thread_native_entry(Thread*)
  [ 4] __os_ch_md_redzone_cookie
  [ 5] internal_catch_exc_subsystem

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 4] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 5] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.nio.DirectByteBuffer.duplicate
  [ 1] io.ktor.util.BufferViewJvmKt.read
  [ 2] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 6] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 7] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 4] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 5] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.ByteBufferChannel.suspensionForSize
  [ 2] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] JNI_OnLoad
  [ 1] sun.nio.ch.NativeThread.current
  [ 2] sun.nio.ch.NativeThreadSet.add
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.util.BufferViewJvmKt.read
  [ 5] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 9] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [10] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlin.jvm.internal.Intrinsics.checkNotNullParameter
  [ 1] kotlin.coroutines.ContinuationInterceptor$DefaultImpls.get
  [ 2] kotlinx.coroutines.CoroutineDispatcher.get
  [ 3] kotlin.coroutines.CombinedContext.get
  [ 4] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 5] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 6] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [15] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [16] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.util.internal.LockFreeLinkedListNode.getNext
  [ 1] io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.core.Buffer.resetForWrite
  [ 1] io.ktor.utils.io.core.IoBuffer.resetFromContentToWrite
  [ 2] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 7] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 8] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlin.jvm.internal.Intrinsics.checkNotNull
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 4] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 5] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] __psynch_cvwait
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.park
  [ 5] java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire
  [ 6] java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly
  [ 7] java.util.concurrent.CountDownLatch.await
  [ 8] org.openjdk.jmh.runner.InfraControlL2.awaitWarmdownReady
  [ 9] org.openjdk.jmh.runner.InfraControl.awaitWarmdownReady
  [10] org.openjdk.jmh.runner.BenchmarkHandler.runIteration
  [11] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [12] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [13] org.openjdk.jmh.runner.BaseRunner.doSingle
  [14] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [15] org.openjdk.jmh.runner.ForkedRunner.run
  [16] org.openjdk.jmh.runner.ForkedMain.main

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$flushImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 3] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 4] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 5] io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
  [ 6] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [10] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [11] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.internal.RingBufferCapacity.completeRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] stat$INODE64
  [ 1] java.io.UnixFileSystem.getLength
  [ 2] java.io.File.length
  [ 3] io.ktor.util.cio.FileChannelsKt.readChannel
  [ 4] io.ktor.util.cio.FileChannelsKt.readChannel$default
  [ 5] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 9] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [10] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 1] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [12] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [13] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlinx.coroutines.internal.DispatchedContinuation.awaitReusability
  [ 1] kotlinx.coroutines.internal.DispatchedContinuation.release
  [ 2] kotlinx.coroutines.CoroutineDispatcher.releaseInterceptedContinuation
  [ 3] kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 7] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 8] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.internal.RingBufferCapacity.completeRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 9] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [13] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [14] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
  [ 1] kotlinx.coroutines.internal.DispatchedContinuation.takeState$kotlinx_coroutines_core
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 4] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 5] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.core.ByteOrder.getNioOrder
  [ 1] io.ktor.utils.io.ByteBufferChannel.prepareBuffer
  [ 2] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [13] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [14] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] jdk.internal.misc.Unsafe.copyMemory
  [ 1] jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal
  [ 2] jdk.internal.misc.ScopedMemoryAccess.copyMemory
  [ 3] java.nio.ByteBuffer.putBuffer
  [ 4] java.nio.ByteBuffer.put
  [ 5] java.nio.HeapByteBuffer.put
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [15] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [16] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 6] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 7] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] jdk.internal.misc.ScopedMemoryAccess.copyMemory
  [ 1] java.nio.ByteBuffer.putBuffer
  [ 2] java.nio.ByteBuffer.put
  [ 3] java.nio.HeapByteBuffer.put
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [13] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [14] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] G1Policy::collector_state() const
  [ 1] G1FreeCollectionSetTask::FreeCSetStats::report(G1CollectedHeap*, G1EvacuationInfo*)
  [ 2] G1FreeCollectionSetTask::~G1FreeCollectionSetTask()
  [ 3] G1CollectedHeap::free_collection_set(G1CollectionSet*, G1EvacuationInfo&, unsigned long const*)
  [ 4] G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&, G1RedirtyCardsQueueSet*, G1ParScanThreadStateSet*)
  [ 5] G1CollectedHeap::do_collection_pause_at_safepoint_helper(double)
  [ 6] G1CollectedHeap::do_collection_pause_at_safepoint(double)
  [ 7] VM_G1CollectForAllocation::doit()
  [ 8] VM_Operation::evaluate()
  [ 9] VMThread::evaluate_operation(VM_Operation*)
  [10] VMThread::inner_execute(VM_Operation*)
  [11] VMThread::run()
  [12] Thread::call_run()
  [13] thread_native_entry(Thread*)
  [14] __os_ch_md_redzone_cookie
  [15] internal_catch_exc_subsystem

--- 10000000 ns (0.00%), 1 sample
  [ 0] __psynch_cvwait
  [ 1] os::PlatformMonitor::wait(long)
  [ 2] Monitor::wait_without_safepoint_check(long long)
  [ 3] VMThread::wait_for_operation()
  [ 4] VMThread::run()
  [ 5] Thread::call_run()
  [ 6] thread_native_entry(Thread*)
  [ 7] __os_ch_md_redzone_cookie
  [ 8] internal_catch_exc_subsystem

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 4] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 5] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] semaphore_wait_trap
  [ 1] GangWorker::loop()
  [ 2] Thread::call_run()
  [ 3] thread_native_entry(Thread*)
  [ 4] __os_ch_md_redzone_cookie
  [ 5] internal_catch_exc_subsystem

--- 10000000 ns (0.00%), 1 sample
  [ 0] JfrRecorderService::is_recording()
  [ 1] JavaThread::exit(bool, JavaThread::ExitType)
  [ 2] JavaThread::post_run()
  [ 3] thread_native_entry(Thread*)
  [ 4] __os_ch_md_redzone_cookie
  [ 5] internal_catch_exc_subsystem

--- 10000000 ns (0.00%), 1 sample
  [ 0] __unlink
  [ 1] [unknown]
  [ 2] Java_java_io_UnixFileSystem_delete0
  [ 3] java.io.UnixFileSystem.delete0
  [ 4] java.io.UnixFileSystem.delete
  [ 5] java.io.File.delete
  [ 6] io.ktor.benchmarks.FileBenchmarks.cleanup
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testKtorFileReadInSimple2SimpleDispatcher_jmhTest.testKtorFileReadInSimple2SimpleDispatcher_AverageTime
  [ 8] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [10] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [11] java.lang.reflect.Method.invoke
  [12] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] java.util.concurrent.FutureTask.run
  [15] java.util.concurrent.Executors$RunnableAdapter.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.ThreadPoolExecutor.runWorker
  [18] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [19] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
  [ 1] kotlinx.coroutines.internal.DispatchedContinuation.getContext
  [ 2] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 3] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 4] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 5] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 6] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [15] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [16] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] Interpreter
  [ 1] [unknown_Java]

--- 10000000 ns (0.00%), 1 sample
  [ 0] itable stub
  [ 1] kotlinx.coroutines.internal.DispatchedContinuation.takeState$kotlinx_coroutines_core
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 4] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 5] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlin.coroutines.CombinedContext.get
  [ 1] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 2] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [12] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [13] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.nio.Buffer.capacity
  [ 1] io.ktor.utils.io.ByteBufferChannel.carryIndex
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [12] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [13] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] itable stub
  [ 1] kotlinx.coroutines.internal.DispatchedContinuation.takeState$kotlinx_coroutines_core
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 4] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 5] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] __open
  [ 1] handleOpen
  [ 2] fileOpen
  [ 3] java.io.RandomAccessFile.open0
  [ 4] java.io.RandomAccessFile.open
  [ 5] java.io.RandomAccessFile.<init>
  [ 6] java.io.RandomAccessFile.<init>
  [ 7] io.ktor.util.cio.FileChannelsKt.readChannel
  [ 8] io.ktor.util.cio.FileChannelsKt.readChannel$default
  [ 9] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [13] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [14] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] thread_self_trap
  [ 1] ttyLocker::release_tty_if_locked()
  [ 2] ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&, ciSymbol*, bool)
  [ 3] ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&, ciSymbol*, bool)
  [ 4] ciEnv::get_klass_by_index_impl(constantPoolHandle const&, int, bool&, ciInstanceKlass*)
  [ 5] ciField::ciField(ciInstanceKlass*, int)
  [ 6] ciEnv::get_field_by_index_impl(ciInstanceKlass*, int)
  [ 7] ciEnv::get_field_by_index(ciInstanceKlass*, int)
  [ 8] ciBytecodeStream::get_field(bool&)
  [ 9] GraphBuilder::access_field(Bytecodes::Code)
  [10] GraphBuilder::iterate_bytecodes_for_block(int)
  [11] GraphBuilder::iterate_all_blocks(bool)
  [12] GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
  [13] GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
  [14] GraphBuilder::invoke(Bytecodes::Code)
  [15] GraphBuilder::iterate_bytecodes_for_block(int)
  [16] GraphBuilder::iterate_all_blocks(bool)
  [17] GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
  [18] GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
  [19] GraphBuilder::invoke(Bytecodes::Code)
  [20] GraphBuilder::iterate_bytecodes_for_block(int)
  [21] GraphBuilder::iterate_all_blocks(bool)
  [22] GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
  [23] GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
  [24] GraphBuilder::invoke(Bytecodes::Code)
  [25] GraphBuilder::iterate_bytecodes_for_block(int)
  [26] GraphBuilder::iterate_all_blocks(bool)
  [27] GraphBuilder::GraphBuilder(Compilation*, IRScope*)
  [28] IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool)
  [29] IR::IR(Compilation*, ciMethod*, int)
  [30] Compilation::build_hir()
  [31] Compilation::compile_java_method()
  [32] Compilation::compile_method()
  [33] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [34] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [35] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [36] CompileBroker::compiler_thread_loop()
  [37] JavaThread::thread_main_inner()
  [38] Thread::call_run()
  [39] thread_native_entry(Thread*)
  [40] __os_ch_md_redzone_cookie
  [41] internal_catch_exc_subsystem

--- 10000000 ns (0.00%), 1 sample
  [ 0] semaphore_wait_trap
  [ 1] GangWorker::loop()
  [ 2] Thread::call_run()
  [ 3] thread_native_entry(Thread*)
  [ 4] __os_ch_md_redzone_cookie
  [ 5] internal_catch_exc_subsystem

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlin.coroutines.CombinedContext.get
  [ 1] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 2] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [12] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [13] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.nio.Buffer.checkScope
  [ 1] java.nio.HeapByteBuffer.put
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.core.Buffer.commitWrittenUntilIndex
  [ 1] io.ktor.utils.io.core.IoBuffer.resetFromContentToWrite
  [ 2] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 7] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 8] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlin.coroutines.jvm.internal.Boxing.boxBoolean
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 6] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 7] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] InstanceKlass::array_klass_impl(bool, int, Thread*)
  [ 1] InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int)
  [ 2] java.util.ArrayList.<init>
  [ 3] kotlinx.coroutines.JobSupport$Finishing.allocateList
  [ 4] kotlinx.coroutines.JobSupport$Finishing.sealLocked
  [ 5] kotlinx.coroutines.JobSupport.finalizeFinishingState
  [ 6] kotlinx.coroutines.JobSupport.tryMakeCompletingSlowPath
  [ 7] kotlinx.coroutines.JobSupport.tryMakeCompleting
  [ 8] kotlinx.coroutines.JobSupport.makeCompletingOnce$kotlinx_coroutines_core
  [ 9] kotlinx.coroutines.AbstractCoroutine.resumeWith
  [10] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [11] kotlinx.coroutines.DispatchedTask.run
  [12] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [13] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [14] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.nio.Buffer.checkScope
  [ 1] java.nio.HeapByteBuffer.put
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlin.coroutines.CombinedContext.get
  [ 1] kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
  [ 2] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 3] kotlinx.coroutines.DispatchedTask.run
  [ 4] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 5] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 6] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 2] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 6] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 7] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 3] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 4] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] PhaseChaitin::build_ifg_physical(ResourceArea*)
  [ 1] PhaseChaitin::Register_Allocate()
  [ 2] Compile::Code_Gen()
  [ 3] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)
  [ 4] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 5] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 6] CompileBroker::compiler_thread_loop()
  [ 7] JavaThread::thread_main_inner()
  [ 8] Thread::call_run()
  [ 9] thread_native_entry(Thread*)
  [10] __os_ch_md_redzone_cookie
  [11] internal_catch_exc_subsystem

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 4] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 5] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] jdk.internal.misc.Unsafe.checkPrimitiveArray
  [ 1] jdk.internal.misc.Unsafe.checkPrimitivePointer
  [ 2] jdk.internal.misc.Unsafe.copyMemoryChecks
  [ 3] jdk.internal.misc.Unsafe.copyMemory
  [ 4] jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal
  [ 5] jdk.internal.misc.ScopedMemoryAccess.copyMemory
  [ 6] java.nio.ByteBuffer.putBuffer
  [ 7] java.nio.ByteBuffer.put
  [ 8] java.nio.HeapByteBuffer.put
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [13] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [14] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [15] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [16] kotlinx.coroutines.DispatchedTask.run
  [17] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [18] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [19] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 2] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 6] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 7] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 4] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 5] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] [unknown]
  [ 1] GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
  [ 2] GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
  [ 3] GraphBuilder::invoke(Bytecodes::Code)
  [ 4] GraphBuilder::iterate_bytecodes_for_block(int)
  [ 5] GraphBuilder::iterate_all_blocks(bool)
  [ 6] GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
  [ 7] GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
  [ 8] GraphBuilder::invoke(Bytecodes::Code)
  [ 9] GraphBuilder::iterate_bytecodes_for_block(int)
  [10] GraphBuilder::iterate_all_blocks(bool)
  [11] GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
  [12] GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
  [13] GraphBuilder::try_method_handle_inline(ciMethod*, bool)
  [14] GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
  [15] GraphBuilder::invoke(Bytecodes::Code)
  [16] GraphBuilder::iterate_bytecodes_for_block(int)
  [17] GraphBuilder::iterate_all_blocks(bool)
  [18] GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
  [19] GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*)
  [20] GraphBuilder::invoke(Bytecodes::Code)
  [21] GraphBuilder::iterate_bytecodes_for_block(int)
  [22] GraphBuilder::iterate_all_blocks(bool)
  [23] GraphBuilder::GraphBuilder(Compilation*, IRScope*)
  [24] IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool)
  [25] IR::IR(Compilation*, ciMethod*, int)
  [26] Compilation::build_hir()
  [27] Compilation::compile_java_method()
  [28] Compilation::compile_method()
  [29] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [30] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [31] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [32] CompileBroker::compiler_thread_loop()
  [33] JavaThread::thread_main_inner()
  [34] Thread::call_run()
  [35] thread_native_entry(Thread*)
  [36] __os_ch_md_redzone_cookie
  [37] internal_catch_exc_subsystem

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 1] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 2] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 3] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 4] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 5] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [16] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [17] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.core.IoBuffer.<init>
  [ 1] io.ktor.utils.io.internal.WriteSessionImpl.begin
  [ 2] io.ktor.utils.io.ByteBufferChannel.writeSuspendSession$suspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.writeSuspendSession
  [ 4] io.ktor.util.cio.FileChannelsKt$readChannel$1.invokeSuspend
  [ 5] io.ktor.util.cio.FileChannelsKt$readChannel$1.invoke
  [ 6] io.ktor.util.cio.FileChannelsKt$readChannel$1.invoke
  [ 7] io.ktor.utils.io.CoroutinesKt$launchChannel$job$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.nio.ByteBuffer.limit
  [ 1] java.nio.MappedByteBuffer.limit
  [ 2] java.nio.MappedByteBuffer.limit
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [12] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [13] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] kotlinx.coroutines.DispatchedTask.run
  [ 1] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 3] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 6] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 7] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.internal.RingBufferCapacity.tryReadAtMost
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel.getTotalBytesRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel.getState
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$getState
  [ 2] io.ktor.utils.io.ByteBufferChannel.suspensionForSize
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [12] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [13] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.nio.Buffer.position
  [ 1] java.nio.ByteBuffer.position
  [ 2] java.nio.MappedByteBuffer.position
  [ 3] java.nio.MappedByteBuffer.position
  [ 4] io.ktor.utils.io.ByteBufferChannel.prepareBuffer
  [ 5] io.ktor.utils.io.ByteBufferChannel.prepareWriteBuffer$ktor_io
  [ 6] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] ValueStack::values_do(ValueVisitor*)
  [ 1] UseCountComputer::block_do(BlockBegin*)
  [ 2] BlockList::iterate_backward(BlockClosure*)
  [ 3] IR::compute_use_counts()
  [ 4] Compilation::build_hir()
  [ 5] Compilation::compile_java_method()
  [ 6] Compilation::compile_method()
  [ 7] Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)
  [ 8] Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 9] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [10] CompileBroker::compiler_thread_loop()
  [11] JavaThread::thread_main_inner()
  [12] Thread::call_run()
  [13] thread_native_entry(Thread*)
  [14] __os_ch_md_redzone_cookie
  [15] internal_catch_exc_subsystem

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.unlinkCancelledWaiters
  [ 1] java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos
  [ 2] java.util.concurrent.LinkedBlockingQueue.poll
  [ 3] java.util.concurrent.ExecutorCompletionService.poll
  [ 4] org.openjdk.jmh.runner.BenchmarkHandler.runIteration
  [ 5] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [ 6] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [ 7] org.openjdk.jmh.runner.BaseRunner.doSingle
  [ 8] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [ 9] org.openjdk.jmh.runner.ForkedRunner.run
  [10] org.openjdk.jmh.runner.ForkedMain.main

--- 10000000 ns (0.00%), 1 sample
  [ 0] PhaseCCP::analyze()
  [ 1] Compile::Optimize()
  [ 2] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)
  [ 3] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 4] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 5] CompileBroker::compiler_thread_loop()
  [ 6] JavaThread::thread_main_inner()
  [ 7] Thread::call_run()
  [ 8] thread_native_entry(Thread*)
  [ 9] __os_ch_md_redzone_cookie
  [10] internal_catch_exc_subsystem

--- 10000000 ns (0.00%), 1 sample
  [ 0] io.ktor.utils.io.ByteBufferChannel.access$getJoining$p
  [ 1] io.ktor.utils.io.ByteBufferChannel.suspensionForSize
  [ 2] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 7] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [11] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [12] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.nio.MappedByteBuffer.position
  [ 1] io.ktor.utils.io.ByteBufferChannel.prepareBuffer
  [ 2] io.ktor.utils.io.ByteBufferChannel.prepareWriteBuffer$ktor_io
  [ 3] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 4] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 8] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 9] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.nio.Buffer.capacity
  [ 1] io.ktor.utils.io.ByteBufferChannel.prepareBuffer
  [ 2] io.ktor.utils.io.ByteBufferChannel.prepareWriteBuffer$ktor_io
  [ 3] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 4] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [ 8] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [ 9] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.accessCheck
  [ 1] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 2] io.ktor.utils.io.internal.RingBufferCapacity.tryReadAtMost
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  [12] io.ktor.benchmarks.SimpleDispatcher$$Lambda$45.0x0000000800c2a2f0.run
  [13] java.lang.Thread.run

--- 10000000 ns (0.00%), 1 sample
  [ 0] PhaseLive::compute(unsigned int)
  [ 1] PhaseCFG::global_code_motion()
  [ 2] PhaseCFG::do_global_code_motion()
  [ 3] Compile::Code_Gen()
  [ 4] Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*)
  [ 5] C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)
  [ 6] CompileBroker::invoke_compiler_on_method(CompileTask*)
  [ 7] CompileBroker::compiler_thread_loop()
  [ 8] JavaThread::thread_main_inner()
  [ 9] Thread::call_run()
  [10] thread_native_entry(Thread*)
  [11] __os_ch_md_redzone_cookie
  [12] internal_catch_exc_subsystem

--- 10000000 ns (0.00%), 1 sample
  [ 0] org.openjdk.jmh.runner.BenchmarkHandler.runIteration
  [ 1] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [ 2] org.openjdk.jmh.runner.BaseRunner.runBenchmark
  [ 3] org.openjdk.jmh.runner.BaseRunner.doSingle
  [ 4] org.openjdk.jmh.runner.BaseRunner.runBenchmarksForked
  [ 5] org.openjdk.jmh.runner.ForkedRunner.run
  [ 6] org.openjdk.jmh.runner.ForkedMain.main

          ns  percent  samples  top
  ----------  -------  -------  ---
180930000000   79.82%    18093  io.ktor.benchmarks.IOCoroutineDispatcher$IOThread.run
 26120000000   11.52%     2612  java.util.concurrent.ConcurrentLinkedQueue.poll
  3870000000    1.71%      387  java.lang.invoke.VarHandleReferences$FieldInstanceReadWrite.compareAndSet
  3370000000    1.49%      337  io.ktor.benchmarks.SimpleDispatcher.getQueue
  2730000000    1.20%      273  io.ktor.benchmarks.SimpleDispatcher.thread$lambda-0
  2150000000    0.95%      215  jlong_disjoint_arraycopy
  1690000000    0.75%      169  read
  1440000000    0.64%      144  kotlin.coroutines.jvm.internal.Boxing.boxBoolean
   440000000    0.19%       44  io.ktor.utils.io.ByteBufferChannel.setupStateForRead
   390000000    0.17%       39  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
   280000000    0.12%       28  java.nio.ByteBuffer.position
   250000000    0.11%       25  jdk.internal.misc.Unsafe.copyMemory
   200000000    0.09%       20  io.ktor.util.internal.LockFreeLinkedListNode.getNext
   190000000    0.08%       19  io.ktor.utils.io.ByteBufferChannel.suspensionForSize
   180000000    0.08%       18  io.ktor.utils.io.ByteBufferChannel.resumeReadOp
   170000000    0.07%       17  jdk.internal.misc.Unsafe.checkPrimitiveArray
   160000000    0.07%       16  io.ktor.utils.io.ByteBufferChannel.getClosed
   130000000    0.06%       13  kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
   130000000    0.06%       13  kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
   120000000    0.05%       12  io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
   110000000    0.05%       11  java.nio.Buffer.position
   100000000    0.04%       10  __psynch_cvwait
   100000000    0.04%       10  kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
    90000000    0.04%        9  itable stub
    90000000    0.04%        9  java.nio.MappedByteBuffer.position
    90000000    0.04%        9  io.ktor.utils.io.ByteBufferChannel.prepareBuffer
    80000000    0.04%        8  java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
    70000000    0.03%        7  io.ktor.utils.io.ByteBufferChannel.bytesRead
    60000000    0.03%        6  io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
    50000000    0.02%        5  semaphore_wait_trap
    50000000    0.02%        5  sun.nio.ch.FileDispatcherImpl.read0
    40000000    0.02%        4  io.ktor.utils.io.internal.RingBufferCapacity.completeRead
    40000000    0.02%        4  kotlin.coroutines.CombinedContext.get
    30000000    0.01%        3  kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
    30000000    0.01%        3  io.ktor.utils.io.ByteBufferChannel.carryIndex
    30000000    0.01%        3  java.nio.Buffer.checkScope
    30000000    0.01%        3  io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
    30000000    0.01%        3  io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
    30000000    0.01%        3  Java_sun_nio_ch_FileDispatcherImpl_read0
    20000000    0.01%        2  kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
    20000000    0.01%        2  io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInSimple2SimpleDispatcher$1.invokeSuspend
    20000000    0.01%        2  io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
    20000000    0.01%        2  kotlin.jvm.internal.Intrinsics.areEqual
    20000000    0.01%        2  io.ktor.utils.io.internal.WriteSessionImpl.request
    20000000    0.01%        2  jdk.internal.misc.Unsafe.copyMemoryChecks
    20000000    0.01%        2  sun.nio.ch.NativeThread.current
    20000000    0.01%        2  java.nio.Buffer.capacity
    20000000    0.01%        2  kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
    20000000    0.01%        2  io.ktor.utils.io.core.IoBuffer.resetFromContentToWrite
    10000000    0.00%        1  java.nio.ByteBuffer.limit
    10000000    0.00%        1  G1Policy::collector_state() const
    10000000    0.00%        1  java.nio.DirectByteBuffer.duplicate
    10000000    0.00%        1  java.nio.MappedByteBuffer.<init>
    10000000    0.00%        1  java.nio.MappedByteBuffer.limit
    10000000    0.00%        1  io.ktor.utils.io.core.IoBuffer.<init>
    10000000    0.00%        1  io.ktor.utils.io.core.ByteOrder.getNioOrder
    10000000    0.00%        1  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.accessCheck
    10000000    0.00%        1  io.ktor.utils.io.core.Buffer.resetForWrite
    10000000    0.00%        1  io.ktor.utils.io.core.Buffer.commitWrittenUntilIndex
    10000000    0.00%        1  java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.unlinkCancelledWaiters
    10000000    0.00%        1  jdk.internal.misc.ScopedMemoryAccess.copyMemory
    10000000    0.00%        1  io.ktor.utils.io.ByteBufferChannel.getTotalBytesRead
    10000000    0.00%        1  io.ktor.utils.io.ByteBufferChannel.getState
    10000000    0.00%        1  io.ktor.utils.io.ByteBufferChannel.flushImpl
    10000000    0.00%        1  io.ktor.utils.io.ByteBufferChannel.access$getJoining$p
    10000000    0.00%        1  io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
    10000000    0.00%        1  __unlink
    10000000    0.00%        1  __open
    10000000    0.00%        1  [unknown]
    10000000    0.00%        1  ValueStack::values_do(ValueVisitor*)
    10000000    0.00%        1  kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
    10000000    0.00%        1  PhaseLive::compute(unsigned int)
    10000000    0.00%        1  kotlin.jvm.internal.Intrinsics.checkNotNull
    10000000    0.00%        1  kotlin.jvm.internal.Intrinsics.checkNotNullParameter
    10000000    0.00%        1  kotlinx.coroutines.DispatchedTask.run
    10000000    0.00%        1  kotlinx.coroutines.internal.DispatchedContinuation.awaitReusability
    10000000    0.00%        1  kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
    10000000    0.00%        1  kotlinx.coroutines.internal.DispatchedContinuation.takeState$kotlinx_coroutines_core
    10000000    0.00%        1  PhaseChaitin::build_ifg_physical(ResourceArea*)
    10000000    0.00%        1  PhaseCCP::analyze()
    10000000    0.00%        1  JfrRecorderService::is_recording()
    10000000    0.00%        1  org.openjdk.jmh.runner.BenchmarkHandler.runIteration
    10000000    0.00%        1  JfrObjectAllocationSample::send_event(Klass const*, unsigned long, bool, Thread*)
    10000000    0.00%        1  JNI_OnLoad
    10000000    0.00%        1  stat$INODE64
    10000000    0.00%        1  Interpreter
    10000000    0.00%        1  InstanceKlass::array_klass_impl(bool, int, Thread*)
    10000000    0.00%        1  thread_self_trap

