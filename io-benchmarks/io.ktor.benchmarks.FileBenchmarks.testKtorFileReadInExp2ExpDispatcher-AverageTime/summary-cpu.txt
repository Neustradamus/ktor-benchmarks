--- Execution profile ---
Total samples       : 34405
unknown_Java        : 14 (0.04%)

--- 29667246775 ns (8.47%), 2959 samples
  [ 0] io.ktor.benchmarks.dispatchers.IOCoroutineDispatcher$IOThread.run

--- 25964979871 ns (7.41%), 2493 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 23194784990 ns (6.62%), 2315 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 15572950506 ns (4.44%), 1553 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 14642698433 ns (4.18%), 1464 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.dispatchers.HotLoopDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.dispatchers.HotLoopDispatcher$$Lambda$35.539335468.run
  [ 3] java.lang.Thread.run

--- 14302777720 ns (4.08%), 1426 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 12932555396 ns (3.69%), 1238 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 11242313783 ns (3.21%), 1117 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 9622040354 ns (2.75%), 922 samples
  [ 0] java.lang.invoke.VarHandleObjects$Array.getVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 8521532805 ns (2.43%), 824 samples
  [ 0] kotlinx.atomicfu.AtomicInt.getValue
  [ 1] io.ktor.benchmarks.dispatchers.WorkQueue.pollBuffer
  [ 2] io.ktor.benchmarks.dispatchers.WorkQueue.tryStealFrom
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 6521410754 ns (1.86%), 651 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.dispatchers.HotLoopDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.dispatchers.HotLoopDispatcher$$Lambda$35.539335468.run
  [ 3] java.lang.Thread.run

--- 6011076824 ns (1.72%), 601 samples
  [ 0] io.ktor.benchmarks.dispatchers.HotLoopDispatcher.getQueue
  [ 1] io.ktor.benchmarks.dispatchers.HotLoopDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.dispatchers.HotLoopDispatcher$$Lambda$35.539335468.run
  [ 3] java.lang.Thread.run

--- 5991205690 ns (1.71%), 594 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 5771081363 ns (1.65%), 551 samples
  [ 0] java.lang.invoke.VarHandleObjects$Array.getVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 5761384555 ns (1.64%), 575 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 5741079657 ns (1.64%), 548 samples
  [ 0] io.ktor.benchmarks.dispatchers.WorkQueue.pollBuffer
  [ 1] io.ktor.benchmarks.dispatchers.WorkQueue.tryStealFrom
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 4621098808 ns (1.32%), 461 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.tryAcquireCpuPermit
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 4330856135 ns (1.24%), 433 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 4330801349 ns (1.24%), 417 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 4320738120 ns (1.23%), 409 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 3900893490 ns (1.11%), 390 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.dispatchers.HotLoopDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.dispatchers.HotLoopDispatcher$$Lambda$35.539335468.run
  [ 3] java.lang.Thread.run

--- 3540624752 ns (1.01%), 353 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 3430686833 ns (0.98%), 343 samples
  [ 0] io.ktor.benchmarks.dispatchers.HotLoopDispatcher.thread$lambda-0
  [ 1] io.ktor.benchmarks.dispatchers.HotLoopDispatcher$$Lambda$35.539335468.run
  [ 2] java.lang.Thread.run

--- 2790700293 ns (0.80%), 270 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 2760528505 ns (0.79%), 268 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.isTerminated
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 2610439701 ns (0.75%), 250 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 2600471087 ns (0.74%), 258 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 2500526664 ns (0.71%), 249 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 2320503437 ns (0.66%), 222 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.nextInt
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 2260616703 ns (0.65%), 226 samples
  [ 0] io.ktor.benchmarks.dispatchers.IOCoroutineDispatcher$IOThread.run

--- 2240553746 ns (0.64%), 223 samples
  [ 0] jlong_disjoint_arraycopy
  [ 1] java.nio.Buffer.limit
  [ 2] java.nio.ByteBuffer.limit
  [ 3] java.nio.MappedByteBuffer.limit
  [ 4] java.nio.MappedByteBuffer.limit
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [11] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [12] kotlinx.coroutines.DispatchedTask.run
  [13] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [14] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [15] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [16] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [17] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 2090450405 ns (0.60%), 207 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 2060505484 ns (0.59%), 205 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 2000370793 ns (0.57%), 200 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 2000366494 ns (0.57%), 198 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1960429612 ns (0.56%), 183 samples
  [ 0] io.ktor.benchmarks.dispatchers.WorkQueue.tryStealLastScheduled
  [ 1] io.ktor.benchmarks.dispatchers.WorkQueue.tryStealFrom
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1910414104 ns (0.55%), 185 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1850357181 ns (0.53%), 180 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.nextInt
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1820333221 ns (0.52%), 181 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1790364807 ns (0.51%), 178 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1780398315 ns (0.51%), 173 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1760371912 ns (0.50%), 175 samples
  [ 0] io.ktor.benchmarks.dispatchers.IOCoroutineDispatcher$IOThread.run

--- 1750325141 ns (0.50%), 175 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.nextInt
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1750321716 ns (0.50%), 170 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1660342099 ns (0.47%), 164 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1570287191 ns (0.45%), 146 samples
  [ 0] java.lang.invoke.VarHandleObjects$Array.getVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1480324047 ns (0.42%), 148 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1470343100 ns (0.42%), 142 samples
  [ 0] read
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [11] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [12] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [13] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [14] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1460331575 ns (0.42%), 140 samples
  [ 0] io.ktor.benchmarks.dispatchers.WorkQueue.tryStealLastScheduled
  [ 1] io.ktor.benchmarks.dispatchers.WorkQueue.tryStealFrom
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1450289394 ns (0.41%), 145 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1390266449 ns (0.40%), 138 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1380262175 ns (0.39%), 135 samples
  [ 0] io.ktor.benchmarks.dispatchers.WorkQueue.pollBuffer
  [ 1] io.ktor.benchmarks.dispatchers.WorkQueue.tryStealFrom
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1200253263 ns (0.34%), 118 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1170263668 ns (0.33%), 114 samples
  [ 0] io.ktor.benchmarks.dispatchers.WorkQueue.pollBuffer
  [ 1] io.ktor.benchmarks.dispatchers.WorkQueue.tryStealFrom
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1170221767 ns (0.33%), 113 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1140201430 ns (0.33%), 114 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1130229305 ns (0.32%), 113 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1130209482 ns (0.32%), 113 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1110181954 ns (0.32%), 111 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.access$getControlState$p
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1100278002 ns (0.31%), 110 samples
  [ 0] io.ktor.benchmarks.dispatchers.IOCoroutineDispatcher$IOThread.run

--- 1100139702 ns (0.31%), 103 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1090161620 ns (0.31%), 109 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1060180482 ns (0.30%), 102 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 1020145919 ns (0.29%), 100 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 990236775 ns (0.28%), 96 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 940220311 ns (0.27%), 94 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 920120689 ns (0.26%), 92 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 900207088 ns (0.26%), 90 samples
  [ 0] kotlinx.atomicfu.AtomicRef.getValue
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 880162960 ns (0.25%), 88 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 850238705 ns (0.24%), 80 samples
  [ 0] kotlinx.atomicfu.AtomicBoolean.getValue
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.isTerminated
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 820111285 ns (0.23%), 81 samples
  [ 0] kotlinx.atomicfu.AtomicRef.getValue
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 810181871 ns (0.23%), 81 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 770136135 ns (0.22%), 77 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 760233103 ns (0.22%), 76 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 750209034 ns (0.21%), 73 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 750149366 ns (0.21%), 75 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 750142202 ns (0.21%), 69 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 740146879 ns (0.21%), 70 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 720190019 ns (0.21%), 70 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 710188592 ns (0.20%), 71 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 710155487 ns (0.20%), 68 samples
  [ 0] kotlinx.atomicfu.AtomicBoolean.getValue
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.isTerminated
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 710147336 ns (0.20%), 71 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 700156984 ns (0.20%), 70 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 690145477 ns (0.20%), 68 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 680159557 ns (0.19%), 64 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 650122731 ns (0.19%), 64 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.tryAcquireCpuPermit
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 580164602 ns (0.17%), 57 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 580120035 ns (0.17%), 58 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 570095821 ns (0.16%), 57 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 560162363 ns (0.16%), 55 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 550143321 ns (0.16%), 52 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 540126676 ns (0.15%), 52 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 540104657 ns (0.15%), 52 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 530161331 ns (0.15%), 52 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.atomicfu.AtomicLong.compareAndSet
  [ 2] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 3] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 8] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 530111782 ns (0.15%), 49 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 520084968 ns (0.15%), 51 samples
  [ 0] io.ktor.benchmarks.dispatchers.HotLoopDispatcher.thread$lambda-0
  [ 1] io.ktor.benchmarks.dispatchers.HotLoopDispatcher$$Lambda$35.539335468.run
  [ 2] java.lang.Thread.run

--- 510116044 ns (0.15%), 49 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 510107154 ns (0.15%), 49 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 490078712 ns (0.14%), 44 samples
  [ 0] kotlinx.atomicfu.AtomicLong.getValue
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 490074680 ns (0.14%), 49 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 480110819 ns (0.14%), 47 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 480102923 ns (0.14%), 48 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.atomicfu.AtomicLong.compareAndSet
  [ 2] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 3] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 8] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 460125695 ns (0.13%), 41 samples
  [ 0] kotlinx.atomicfu.AtomicInt.getValue
  [ 1] io.ktor.benchmarks.dispatchers.WorkQueue.pollBuffer
  [ 2] io.ktor.benchmarks.dispatchers.WorkQueue.tryStealFrom
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 460080103 ns (0.13%), 43 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 450117828 ns (0.13%), 43 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 430095239 ns (0.12%), 40 samples
  [ 0] kotlinx.atomicfu.AtomicRef.getValue
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 410114496 ns (0.12%), 39 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.nextInt
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 410059670 ns (0.12%), 41 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 410046259 ns (0.12%), 40 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 400126518 ns (0.11%), 40 samples
  [ 0] kotlinx.atomicfu.AtomicLong.getValue
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 370097266 ns (0.11%), 34 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.tryAcquireCpuPermit
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 370064985 ns (0.11%), 35 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 350054801 ns (0.10%), 35 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 340096902 ns (0.10%), 34 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.dispatchers.HotLoopDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.dispatchers.HotLoopDispatcher$$Lambda$35.539335468.run
  [ 3] java.lang.Thread.run

--- 300037155 ns (0.09%), 29 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 280073424 ns (0.08%), 28 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 280034320 ns (0.08%), 27 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 270068641 ns (0.08%), 27 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 260050307 ns (0.07%), 25 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.nextInt
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 250055906 ns (0.07%), 25 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 250055668 ns (0.07%), 23 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.nextInt
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 250046891 ns (0.07%), 25 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.nextInt
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 240064707 ns (0.07%), 24 samples
  [ 0] jdk.internal.misc.Unsafe.checkPrimitiveArray
  [ 1] jdk.internal.misc.Unsafe.checkPrimitivePointer
  [ 2] jdk.internal.misc.Unsafe.copyMemoryChecks
  [ 3] jdk.internal.misc.Unsafe.copyMemory
  [ 4] java.nio.DirectByteBuffer.get
  [ 5] java.nio.HeapByteBuffer.put
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [15] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [16] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [17] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [18] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 240051513 ns (0.07%), 23 samples
  [ 0] kotlinx.atomicfu.AtomicArray.get
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 240050966 ns (0.07%), 21 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 240041089 ns (0.07%), 23 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 240037928 ns (0.07%), 24 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 230077658 ns (0.07%), 22 samples
  [ 0] kotlinx.atomicfu.AtomicRef.getValue
  [ 1] io.ktor.benchmarks.dispatchers.WorkQueue.tryStealLastScheduled
  [ 2] io.ktor.benchmarks.dispatchers.WorkQueue.tryStealFrom
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 230075639 ns (0.07%), 22 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 230060336 ns (0.07%), 22 samples
  [ 0] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 220039359 ns (0.06%), 22 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.nextInt
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 210043265 ns (0.06%), 20 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 200034685 ns (0.06%), 15 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 190050381 ns (0.05%), 19 samples
  [ 0] itable stub
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 190041188 ns (0.05%), 18 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.nextInt
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 190032247 ns (0.05%), 19 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 190026596 ns (0.05%), 19 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 180036077 ns (0.05%), 17 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 170038840 ns (0.05%), 16 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 170035821 ns (0.05%), 17 samples
  [ 0] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 1] io.ktor.benchmarks.dispatchers.HotLoopDispatcher.thread$lambda-0
  [ 2] io.ktor.benchmarks.dispatchers.HotLoopDispatcher$$Lambda$35.539335468.run
  [ 3] java.lang.Thread.run

--- 170030924 ns (0.05%), 17 samples
  [ 0] kotlinx.atomicfu.AtomicRef.getValue
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 170030238 ns (0.05%), 17 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 170021829 ns (0.05%), 17 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 160038111 ns (0.05%), 16 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 160034497 ns (0.05%), 15 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 160027487 ns (0.05%), 14 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 160022485 ns (0.05%), 15 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 160020925 ns (0.05%), 16 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 160016712 ns (0.05%), 16 samples
  [ 0] kotlinx.atomicfu.AtomicArray.get
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 150047505 ns (0.04%), 15 samples
  [ 0] kotlinx.atomicfu.AtomicRef.getValue
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 150034224 ns (0.04%), 14 samples
  [ 0] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 1] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 2] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 3] kotlinx.coroutines.DispatchedTask.run
  [ 4] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 8] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 150029376 ns (0.04%), 14 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 150023289 ns (0.04%), 15 samples
  [ 0] java.nio.DirectByteBuffer.<init>
  [ 1] java.nio.DirectByteBuffer.duplicate
  [ 2] io.ktor.util.BufferViewJvmKt.read
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [ 8] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [ 9] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [10] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 150010572 ns (0.04%), 14 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.nextInt
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 140033104 ns (0.04%), 13 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.nextInt
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 140021895 ns (0.04%), 13 samples
  [ 0] java.nio.MappedByteBuffer.<init>
  [ 1] java.nio.DirectByteBuffer.<init>
  [ 2] java.nio.DirectByteBuffer.duplicate
  [ 3] io.ktor.util.BufferViewJvmKt.read
  [ 4] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [ 8] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [ 9] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [10] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [11] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 140017725 ns (0.04%), 14 samples
  [ 0] kotlinx.atomicfu.AtomicRef.setValue
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 140014841 ns (0.04%), 14 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 130032242 ns (0.04%), 13 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 130031020 ns (0.04%), 12 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 130025517 ns (0.04%), 13 samples
  [ 0] /usr/lib/x86_64-linux-gnu/libc-2.33.so
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [11] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [12] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [13] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [14] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 130018036 ns (0.04%), 13 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [ 9] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [10] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [11] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [12] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 120023696 ns (0.03%), 12 samples
  [ 0] kotlin.coroutines.CombinedContext.fold
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 2] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 3] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 4] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 5] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 6] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInExp2ExpDispatcher$1.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [15] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [16] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [17] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [18] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 120018412 ns (0.03%), 12 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 1] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 2] kotlin.coroutines.CombinedContext.fold
  [ 3] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 4] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 5] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 6] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 7] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 8] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [13] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInExp2ExpDispatcher$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [17] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [18] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [19] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [20] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 120015923 ns (0.03%), 12 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 120015368 ns (0.03%), 11 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 110032770 ns (0.03%), 11 samples
  [ 0] io.ktor.utils.io.core.Buffer.commitWrittenUntilIndex
  [ 1] io.ktor.utils.io.core.IoBuffer.resetFromContentToWrite
  [ 2] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [ 8] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [ 9] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [10] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 110028308 ns (0.03%), 10 samples
  [ 0] sun.nio.ch.FileDispatcherImpl.read0
  [ 1] sun.nio.ch.FileDispatcherImpl.read
  [ 2] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 3] sun.nio.ch.IOUtil.read
  [ 4] sun.nio.ch.FileChannelImpl.read
  [ 5] io.ktor.util.BufferViewJvmKt.read
  [ 6] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [10] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [11] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [12] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [13] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 110027588 ns (0.03%), 10 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 110025542 ns (0.03%), 11 samples
  [ 0] kotlinx.atomicfu.AtomicRef.setValue
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.addLast
  [ 2] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.addLast
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.addToGlobalQueue
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.dispatch
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.dispatch$default
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputDispatcher.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 9] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [10] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [14] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [15] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [16] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [17] kotlinx.coroutines.DispatchedTask.run
  [18] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [19] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [20] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [21] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [22] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 110021933 ns (0.03%), 10 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.nextInt
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 110020515 ns (0.03%), 9 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 110017124 ns (0.03%), 11 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 110014033 ns (0.03%), 11 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 110011429 ns (0.03%), 10 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 1] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 2] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 3] io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
  [ 4] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [ 8] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [ 9] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [10] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [11] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 100049354 ns (0.03%), 10 samples
  [ 0] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 100033398 ns (0.03%), 8 samples
  [ 0] kotlinx.atomicfu.AtomicLong.getValue
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 100027017 ns (0.03%), 9 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 100020541 ns (0.03%), 10 samples
  [ 0] kotlinx.atomicfu.AtomicLong.compareAndSet
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 100019500 ns (0.03%), 10 samples
  [ 0] [vdso]
  [ 1] clock_gettime
  [ 2] [unknown_Java]

--- 100009971 ns (0.03%), 10 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.atomicfu.AtomicLong.compareAndSet
  [ 2] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.addLast
  [ 3] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.addLast
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.addToGlobalQueue
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.dispatch
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.dispatch$default
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputDispatcher.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [10] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [11] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [15] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [16] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [17] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [18] kotlinx.coroutines.DispatchedTask.run
  [19] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [20] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [21] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [22] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [23] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 100009451 ns (0.03%), 10 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 90038465 ns (0.03%), 9 samples
  [ 0] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 1] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 2] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [12] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [13] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [14] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [15] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 90033432 ns (0.03%), 9 samples
  [ 0] kotlin.coroutines.ContinuationInterceptor$DefaultImpls.get
  [ 1] kotlinx.coroutines.CoroutineDispatcher.get
  [ 2] kotlin.coroutines.CombinedContext.get
  [ 3] io.ktor.utils.io.internal.CancellableReusableContinuation.parent
  [ 4] io.ktor.utils.io.internal.CancellableReusableContinuation.completeSuspendBlock
  [ 5] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [10] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInExp2ExpDispatcher$1.invokeSuspend
  [11] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [12] kotlinx.coroutines.DispatchedTask.run
  [13] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [14] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [15] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [16] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [17] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 90025674 ns (0.03%), 9 samples
  [ 0] kotlinx.atomicfu.AtomicRef.setValue
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 90024853 ns (0.03%), 9 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.tryAcquireCpuPermit
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 90016541 ns (0.03%), 9 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 1] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [11] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [12] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [13] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [14] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 90011316 ns (0.03%), 9 samples
  [ 0] io.ktor.util.internal.LockFreeLinkedListNode.getNext
  [ 1] io.ktor.benchmarks.dispatchers.IOCoroutineDispatcher$IOThread.run

--- 80099914 ns (0.02%), 4 samples
  [ 0] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 1] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 2] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 3] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 4] /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
  [ 5] start_thread

--- 80043908 ns (0.02%), 8 samples
  [ 0] kotlinx.coroutines.DispatchedTask.run
  [ 1] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 80031572 ns (0.02%), 8 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 80027494 ns (0.02%), 8 samples
  [ 0] kotlinx.coroutines.DispatchedTask.getExceptionalResult$kotlinx_coroutines_core
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 80026781 ns (0.02%), 8 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 80026763 ns (0.02%), 8 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 80012374 ns (0.02%), 8 samples
  [ 0] kotlinx.atomicfu.AtomicArray.get
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 80004276 ns (0.02%), 8 samples
  [ 0] java.nio.Buffer.<init>
  [ 1] java.nio.ByteBuffer.<init>
  [ 2] java.nio.ByteBuffer.<init>
  [ 3] java.nio.MappedByteBuffer.<init>
  [ 4] java.nio.DirectByteBuffer.<init>
  [ 5] java.nio.DirectByteBuffer.duplicate
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [11] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [12] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [13] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [14] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 70049201 ns (0.02%), 7 samples
  [ 0] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 1] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 70021954 ns (0.02%), 7 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 7] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 70017098 ns (0.02%), 7 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
  [ 1] kotlin.coroutines.CombinedContext.fold
  [ 2] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 3] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 4] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 5] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 6] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 7] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 8] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [12] io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInExp2ExpDispatcher$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] io.ktor.benchmarks.dispatchers.TaskImpl.run
  [16] io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
  [17] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
  [18] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [19] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

--- 70016833 ns (0.02%), 7 samples
  [ 0] io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  [ 2] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
  [ 3] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  [ 4] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  [ 5] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  [ 6] io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.run

          ns  percent  samples  top
  ----------  -------  -------  ---
102400602880   29.23%    10173  io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.removeFirstOrNull
 56721073249   16.19%     5444  io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.trySteal
 34798514465    9.93%     3471  io.ktor.benchmarks.dispatchers.IOCoroutineDispatcher$IOThread.run
 25575135400    7.30%     2556  java.util.concurrent.ConcurrentLinkedQueue.poll
 19354090222    5.52%     1905  io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.pollGlobalQueues
 16973409320    4.84%     1620  java.lang.invoke.VarHandleObjects$Array.getVolatile
 16733363566    4.78%     1647  io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.removeFirstOrNull
  8981658500    2.56%      865  kotlinx.atomicfu.AtomicInt.getValue
  8291605500    2.37%      797  io.ktor.benchmarks.dispatchers.WorkQueue.pollBuffer
  7961604760    2.27%      772  io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.nextInt
  6011076824    1.72%      601  io.ktor.benchmarks.dispatchers.HotLoopDispatcher.getQueue
  5801353635    1.66%      575  io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.tryAcquireCpuPermit
  3950771801    1.13%      394  io.ktor.benchmarks.dispatchers.HotLoopDispatcher.thread$lambda-0
  3420761187    0.98%      323  io.ktor.benchmarks.dispatchers.WorkQueue.tryStealLastScheduled
  2820579464    0.81%      277  kotlinx.atomicfu.AtomicRef.getValue
  2760528505    0.79%      268  io.ktor.benchmarks.dispatchers.HighThroughputScheduler.isTerminated
  2730580831    0.78%      268  io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.runWorker
  2610439701    0.75%      250  java.util.concurrent.atomic.AtomicReferenceArray.get
  2600471087    0.74%      258  io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findTask
  2240553746    0.64%      223  jlong_disjoint_arraycopy
  2220388631    0.63%      220  io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.findAnyTask
  1560394192    0.45%      148  kotlinx.atomicfu.AtomicBoolean.getValue
  1470343100    0.42%      142  read
  1170301769    0.33%      116  java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  1120256387    0.32%      103  kotlinx.atomicfu.AtomicLong.getValue
  1110181954    0.32%      111  io.ktor.benchmarks.dispatchers.HighThroughputScheduler.access$getControlState$p
   800133700    0.23%       79  kotlinx.atomicfu.AtomicArray.get
   430091747    0.12%       43  kotlinx.atomicfu.AtomicRef.setValue
   380120838    0.11%       37  io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
   310476889    0.09%       27  /usr/lib/jvm/java-11-openjdk-amd64/lib/server/libjvm.so
   270051377    0.08%       27  kotlinx.atomicfu.AtomicLong.compareAndSet
   250063760    0.07%       25  itable stub
   240064707    0.07%       24  jdk.internal.misc.Unsafe.checkPrimitiveArray
   240039647    0.07%       24  io.ktor.utils.io.ByteBufferChannel.setupStateForRead
   220044133    0.06%       21  io.ktor.utils.io.internal.WriteSessionImpl.request
   200037202    0.06%       20  java.nio.DirectByteBuffer.<init>
   190075899    0.05%       18  kotlinx.coroutines.DispatchedTask.run
   190035510    0.05%       19  kotlinx.coroutines.internal.ThreadContextKt$countAll$1.invoke
   180073727    0.05%       17  kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
   170023854    0.05%       17  io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
   160049683    0.05%       16  kotlin.coroutines.CombinedContext.get
   160043491    0.05%       16  /usr/lib/x86_64-linux-gnu/libc-2.33.so
   140021895    0.04%       13  java.nio.MappedByteBuffer.<init>
   130015089    0.04%       12  io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
   120057628    0.03%       10  io.ktor.utils.io.ByteBufferChannel.resumeReadOp
   120029067    0.03%       11  sun.nio.ch.FileDispatcherImpl.read0
   120023696    0.03%       12  kotlin.coroutines.CombinedContext.fold
   120006533    0.03%       12  java.nio.Buffer.position
   110034647    0.03%       11  kotlin.coroutines.ContinuationInterceptor$DefaultImpls.get
   110032770    0.03%       11  io.ktor.utils.io.core.Buffer.commitWrittenUntilIndex
   110031457    0.03%       11  kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
   110028186    0.03%       11  kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
   110026251    0.03%       11  io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
   110024595    0.03%       11  io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore.addLast
   110017907    0.03%       11  io.ktor.benchmarks.dispatchers.TaskImpl.run
   100038725    0.03%       10  java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
   100019500    0.03%       10  [vdso]
    90038705    0.03%        9  io.ktor.benchmarks.dispatchers.Task.<init>
    90024646    0.03%        9  io.ktor.utils.io.ByteBufferChannel.getState
    90011316    0.03%        9  io.ktor.util.internal.LockFreeLinkedListNode.getNext
    90009054    0.03%        9  java.nio.Buffer.<init>
    90008387    0.03%        8  sun.nio.ch.NativeThread.current
    80043402    0.02%        8  io.ktor.benchmarks.dispatchers.HighThroughputScheduler.createTask
    80027494    0.02%        8  kotlinx.coroutines.DispatchedTask.getExceptionalResult$kotlinx_coroutines_core
    80019869    0.02%        8  io.ktor.utils.io.ByteBufferChannel.flushImpl
    80010732    0.02%        7  io.ktor.utils.io.ByteBufferChannel.prepareBuffer
    70025102    0.02%        7  java.nio.MappedByteBuffer.position
    70013180    0.02%        7  io.ktor.benchmarks.dispatchers.LockFreeTaskQueue.addLast
    70011283    0.02%        7  io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
    70009290    0.02%        7  java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.getAndSet
    60034399    0.02%        6  io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
    60033959    0.02%        6  kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
    60015175    0.02%        6  kotlin.ResultKt.throwOnFailure
    60014148    0.02%        5  io.ktor.benchmarks.dispatchers.HighThroughputScheduler.parkedWorkersStackPop
    60013269    0.02%        6  kotlin.coroutines.jvm.internal.BaseContinuationImpl.<init>
    50014943    0.01%        5  java.nio.Buffer.limit
    50010944    0.01%        5  io.ktor.benchmarks.dispatchers.LockFreeTaskQueueCore$Companion.updateHead
    50010672    0.01%        5  clock_gettime
    50010184    0.01%        5  io.ktor.benchmarks.dispatchers.HighThroughputScheduler.addToGlobalQueue
    50008788    0.01%        5  io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.executeTask
    50003289    0.01%        5  io.ktor.utils.io.ByteBufferChannel.getClosed
    50003043    0.01%        5  io.ktor.benchmarks.FileBenchmarks$testKtorFileReadInExp2ExpDispatcher$1.invokeSuspend
    40009606    0.01%        4  java.nio.ByteBuffer.<init>
    40007685    0.01%        4  kotlin.coroutines.jvm.internal.ContinuationImpl.<init>
    40007401    0.01%        4  io.ktor.utils.io.ByteBufferChannel.readSuspend
    40006101    0.01%        4  io.ktor.benchmarks.dispatchers.HighThroughputScheduler.tryCreateWorker
    40005740    0.01%        3  io.ktor.utils.io.core.Buffer.getStartGap
    40005325    0.01%        4  kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
    30014661    0.01%        3  io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
    30008566    0.01%        3  java.nio.ByteOrder.nativeOrder
    30008424    0.01%        3  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.getAndAdd
    30007624    0.01%        3  io.ktor.utils.io.core.IoBuffer.resetFromContentToWrite
    30006265    0.01%        3  io.ktor.utils.io.internal.CancellableReusableContinuation.parent
    30004618    0.01%        3  kotlin.jvm.internal.Intrinsics.checkNotNullParameter
    30003879    0.01%        3  io.ktor.utils.io.ByteBufferChannel.bytesRead
    30003278    0.01%        3  io.ktor.benchmarks.dispatchers.HighThroughputScheduler.currentWorker
    30003228    0.01%        3  I2C/C2I adapters
    30003220    0.01%        3  kotlin.jvm.internal.Intrinsics.checkNotNull
    30002591    0.01%        3  io.ktor.benchmarks.dispatchers.AbstractTimeSourceKt.getTimeSource
    30000882    0.01%        3  java.nio.HeapByteBuffer.put
    20013603    0.01%        2  io.ktor.benchmarks.dispatchers.HighThroughputScheduler$Worker.idleReset
    20012883    0.01%        2  io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
    20007304    0.01%        2  kotlinx.coroutines.internal.DispatchedContinuation.takeState$kotlinx_coroutines_core
    20005562    0.01%        2  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.addAndGet
    20003798    0.01%        2  io.ktor.utils.io.ByteBufferChannel.suspensionForSize
    20003446    0.01%        2  java.nio.ByteBuffer.position
    20003370    0.01%        2  io.ktor.utils.io.ByteBufferChannel.getWriteOp
    20002802    0.01%        2  io.ktor.utils.io.ByteBufferChannel.readAvailable
    20002055    0.01%        2  io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
    20001420    0.01%        2  Java_sun_nio_ch_FileDispatcherImpl_read0
    10019048    0.00%        1  /usr/lib/jvm/java-11-openjdk-amd64/lib/libnio.so
    10016025    0.00%        1  kotlin.jvm.internal.Intrinsics.areEqual
    10012972    0.00%        1  jdk.internal.util.Preconditions.checkIndex
    10005145    0.00%        1  io.ktor.utils.io.internal.RingBufferCapacity.completeRead
    10004753    0.00%        1  kotlinx.coroutines.JobSupport.completeStateFinalization
    10003586    0.00%        1  io.ktor.utils.io.ByteBufferChannel.writeSuspendPredicate
    10003177    0.00%        1  kotlinx.coroutines.CoroutineDispatcher.releaseInterceptedContinuation
    10003159    0.00%        1  __pthread_cond_wait
    10002984    0.00%        1  io.ktor.benchmarks.dispatchers.HighThroughputDispatcher.dispatch
    10002591    0.00%        1  io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
    10002582    0.00%        1  io.ktor.benchmarks.dispatchers.NanoTimeSource.nanoTime
    10002453    0.00%        1  io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
    10002452    0.00%        1  io.ktor.benchmarks.dispatchers.TaskImpl.<init>
    10002351    0.00%        1  kotlinx.coroutines.internal.DispatchedContinuation.awaitReusability
    10002264    0.00%        1  kotlin.ranges.RangesKt___RangesKt.coerceAtMost
    10002202    0.00%        1  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
    10002155    0.00%        1  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.accessCheck
    10002123    0.00%        1  io.ktor.utils.io.ByteBufferChannel.flush
    10001939    0.00%        1  io.ktor.utils.io.core.BufferSharedState.setLimit
    10001904    0.00%        1  io.ktor.utils.io.core.ByteOrder.getNioOrder
    10001800    0.00%        1  io.ktor.utils.io.internal.CancellableReusableContinuation.completeSuspendBlock
    10001737    0.00%        1  java.lang.Object.equals
    10001536    0.00%        1  io.ktor.utils.io.internal.RingBufferCapacity.tryReadAtMost
    10001407    0.00%        1  io.ktor.utils.io.ByteBufferChannel.getJoining$ktor_io
    10001137    0.00%        1  io.ktor.benchmarks.dispatchers.HighThroughputScheduler.runSafely
    10001115    0.00%        1  java.nio.ByteBuffer.order
    10000960    0.00%        1  io.ktor.utils.io.ChannelScope.getChannel
    10000869    0.00%        1  java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.valueCheck
    10000719    0.00%        1  io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
    10000583    0.00%        1  __close
    10000539    0.00%        1  java.lang.Integer.intValue
    10000502    0.00%        1  io.ktor.benchmarks.dispatchers.HighThroughputScheduler.submitToLocalQueue
    10000297    0.00%        1  kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
     9999718    0.00%        1  Java_java_io_FileDescriptor_close0
     9998828    0.00%        1  io.ktor.utils.io.internal.CancellableReusableContinuation$JobRelation.<init>

