--- Execution profile ---
Total samples       : 94246

--- 318560000000 ns (33.80%), 31856 samples
  [ 0] __psynch_cvwait
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 69810000000 ns (7.41%), 6981 samples
  [ 0] read
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 54480000000 ns (5.78%), 5448 samples
  [ 0] __psynch_cvsignal
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 49820000000 ns (5.29%), 4982 samples
  [ 0] __psynch_cvwait
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 47280000000 ns (5.02%), 4728 samples
  [ 0] __psynch_cvsignal
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 27280000000 ns (2.89%), 2728 samples
  [ 0] jdk.internal.misc.Unsafe.park
  [ 1] java.util.concurrent.locks.LockSupport.parkNanos
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 26470000000 ns (2.81%), 2647 samples
  [ 0] __psynch_mutexwait
  [ 1] err_codes_iokit_usb
  [ 2] Parker::unpark()
  [ 3] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 4] jdk.internal.misc.Unsafe.unpark
  [ 5] java.util.concurrent.locks.LockSupport.unpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 9] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [10] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [11] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [12] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [13] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [14] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [15] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [17] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [18] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [19] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [20] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [21] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [22] kotlinx.coroutines.DispatchedTask.run
  [23] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [24] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [26] kotlinx.coroutines.BuildersKt.runBlocking
  [27] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [28] kotlinx.coroutines.BuildersKt.runBlocking$default
  [29] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [30] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [31] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [32] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [33] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [34] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [35] java.lang.reflect.Method.invoke
  [36] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [37] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.Executors$RunnableAdapter.call
  [40] java.util.concurrent.FutureTask.run
  [41] java.util.concurrent.ThreadPoolExecutor.runWorker
  [42] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [43] java.lang.Thread.run

--- 25120000000 ns (2.67%), 2512 samples
  [ 0] java.lang.invoke.VarHandleReferences$Array.getVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 4] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 24210000000 ns (2.57%), 2421 samples
  [ 0] __gettimeofday
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 22830000000 ns (2.42%), 2283 samples
  [ 0] kotlinx.coroutines.scheduling.WorkQueue.tryStealFrom
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 11470000000 ns (1.22%), 1147 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 10980000000 ns (1.17%), 1098 samples
  [ 0] read
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 8540000000 ns (0.91%), 854 samples
  [ 0] __psynch_cvsignal
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 5790000000 ns (0.61%), 579 samples
  [ 0] jlong_disjoint_arraycopy
  [ 1] io.ktor.utils.io.internal.RingBufferCapacity.tryReadAtMost
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 6] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [11] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [15] kotlinx.coroutines.BuildersKt.runBlocking$default
  [16] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [21] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [22] java.lang.reflect.Method.invoke
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.Executors$RunnableAdapter.call
  [27] java.util.concurrent.FutureTask.run
  [28] java.util.concurrent.ThreadPoolExecutor.runWorker
  [29] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [30] java.lang.Thread.run

--- 5270000000 ns (0.56%), 527 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 4860000000 ns (0.52%), 486 samples
  [ 0] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 4540000000 ns (0.48%), 454 samples
  [ 0] jdk.internal.misc.Unsafe.park
  [ 1] java.util.concurrent.locks.LockSupport.parkNanos
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 4460000000 ns (0.47%), 446 samples
  [ 0] __os_ch_md_redzone_cookie
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 4190000000 ns (0.44%), 419 samples
  [ 0] java.lang.invoke.VarHandleReferences$Array.setVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LIL_V
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.set
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 4] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 3930000000 ns (0.42%), 393 samples
  [ 0] Parker::park(bool, long)
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 3810000000 ns (0.40%), 381 samples
  [ 0] __gettimeofday
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 3790000000 ns (0.40%), 379 samples
  [ 0] java.lang.invoke.VarHandleReferences$Array.getVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 4] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 3750000000 ns (0.40%), 375 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.flush
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 3720000000 ns (0.39%), 372 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 3630000000 ns (0.39%), 363 samples
  [ 0] kotlinx.coroutines.scheduling.WorkQueue.tryStealFrom
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 3510000000 ns (0.37%), 351 samples
  [ 0] __psynch_cvsignal
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.benchmarks.FileBenchmarks$testFilesReadChannel100$1$1$1.invokeSuspend
  [17] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [18] kotlinx.coroutines.DispatchedTask.run
  [19] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [20] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [21] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [22] kotlinx.coroutines.BuildersKt.runBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [24] kotlinx.coroutines.BuildersKt.runBlocking$default
  [25] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [26] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [27] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [28] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [29] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [30] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [31] java.lang.reflect.Method.invoke
  [32] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [33] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [34] java.util.concurrent.FutureTask.run
  [35] java.util.concurrent.Executors$RunnableAdapter.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.ThreadPoolExecutor.runWorker
  [38] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [39] java.lang.Thread.run

--- 3490000000 ns (0.37%), 349 samples
  [ 0] os::javaTimeNanos()
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 3380000000 ns (0.36%), 338 samples
  [ 0] err_codes_mach_rcv
  [ 1] __os_ch_md_redzone_cookie
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 3200000000 ns (0.34%), 320 samples
  [ 0] __psynch_mutexwait
  [ 1] err_codes_iokit_usb
  [ 2] Parker::unpark()
  [ 3] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 4] jdk.internal.misc.Unsafe.unpark
  [ 5] java.util.concurrent.locks.LockSupport.unpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 3160000000 ns (0.34%), 316 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 3140000000 ns (0.33%), 314 samples
  [ 0] kotlinx.coroutines.scheduling.WorkQueue.pollBuffer
  [ 1] kotlinx.coroutines.scheduling.WorkQueue.tryStealFrom
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 2920000000 ns (0.31%), 292 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 2710000000 ns (0.29%), 271 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 2660000000 ns (0.28%), 266 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 2290000000 ns (0.24%), 229 samples
  [ 0] kotlinx.coroutines.scheduling.WorkQueue.poll
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 2200000000 ns (0.23%), 220 samples
  [ 0] err_codes_iokit_usb
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 2080000000 ns (0.22%), 208 samples
  [ 0] __psynch_mutexwait
  [ 1] err_codes_iokit_usb
  [ 2] Parker::unpark()
  [ 3] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 4] jdk.internal.misc.Unsafe.unpark
  [ 5] java.util.concurrent.locks.LockSupport.unpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 9] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [10] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [11] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [12] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [13] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [14] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [15] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [17] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [18] io.ktor.benchmarks.FileBenchmarks$testFilesReadChannel100$1$1$1.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 2040000000 ns (0.22%), 204 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1970000000 ns (0.21%), 197 samples
  [ 0] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1890000000 ns (0.20%), 189 samples
  [ 0] sun.nio.ch.FileDispatcherImpl.read0
  [ 1] sun.nio.ch.FileDispatcherImpl.read
  [ 2] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 3] sun.nio.ch.IOUtil.read
  [ 4] sun.nio.ch.FileChannelImpl.read
  [ 5] io.ktor.util.BufferViewJvmKt.read
  [ 6] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1830000000 ns (0.19%), 183 samples
  [ 0] err_codes_mach_rcv
  [ 1] Parker::unpark()
  [ 2] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 3] jdk.internal.misc.Unsafe.unpark
  [ 4] java.util.concurrent.locks.LockSupport.unpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 8] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [11] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [12] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [13] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [14] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [17] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [19] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [20] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [21] kotlinx.coroutines.DispatchedTask.run
  [22] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [23] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [24] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt.runBlocking
  [26] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [27] kotlinx.coroutines.BuildersKt.runBlocking$default
  [28] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [30] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [32] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [33] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [34] java.lang.reflect.Method.invoke
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [37] java.util.concurrent.FutureTask.run
  [38] java.util.concurrent.Executors$RunnableAdapter.call
  [39] java.util.concurrent.FutureTask.run
  [40] java.util.concurrent.ThreadPoolExecutor.runWorker
  [41] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [42] java.lang.Thread.run

--- 1780000000 ns (0.19%), 178 samples
  [ 0] os::javaTimeNanos()
  [ 1] kotlin.jvm.internal.Intrinsics.areEqual
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.currentWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 4] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 5] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 9] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [10] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [14] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [15] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [16] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [17] kotlinx.coroutines.DispatchedTask.run
  [18] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [19] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [20] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [21] kotlinx.coroutines.BuildersKt.runBlocking
  [22] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [23] kotlinx.coroutines.BuildersKt.runBlocking$default
  [24] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [25] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [26] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [27] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [28] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [29] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [30] java.lang.reflect.Method.invoke
  [31] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [32] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [33] java.util.concurrent.FutureTask.run
  [34] java.util.concurrent.Executors$RunnableAdapter.call
  [35] java.util.concurrent.FutureTask.run
  [36] java.util.concurrent.ThreadPoolExecutor.runWorker
  [37] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [38] java.lang.Thread.run

--- 1750000000 ns (0.19%), 175 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1740000000 ns (0.18%), 174 samples
  [ 0] __psynch_cvclrprepost
  [ 1] __os_ch_md_redzone_cookie
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1710000000 ns (0.18%), 171 samples
  [ 0] internal_catch_exc_subsystem
  [ 1] __os_ch_md_redzone_cookie
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1670000000 ns (0.18%), 167 samples
  [ 0] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 6] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [11] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [12] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [16] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [18] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [19] kotlinx.coroutines.DispatchedTask.run
  [20] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [21] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [22] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [23] kotlinx.coroutines.BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [25] kotlinx.coroutines.BuildersKt.runBlocking$default
  [26] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [27] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [29] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [31] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [32] java.lang.reflect.Method.invoke
  [33] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] java.util.concurrent.FutureTask.run
  [36] java.util.concurrent.Executors$RunnableAdapter.call
  [37] java.util.concurrent.FutureTask.run
  [38] java.util.concurrent.ThreadPoolExecutor.runWorker
  [39] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [40] java.lang.Thread.run

--- 1590000000 ns (0.17%), 159 samples
  [ 0] err_codes_mach_rcv
  [ 1] Parker::unpark()
  [ 2] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 3] jdk.internal.misc.Unsafe.unpark
  [ 4] java.util.concurrent.locks.LockSupport.unpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1510000000 ns (0.16%), 151 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 1] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 2] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 3] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 4] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 5] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 6] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [10] io.ktor.benchmarks.FileBenchmarks$testFilesReadChannel100$1$1$1.invokeSuspend
  [11] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [12] kotlinx.coroutines.DispatchedTask.run
  [13] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [14] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [16] kotlinx.coroutines.BuildersKt.runBlocking
  [17] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [18] kotlinx.coroutines.BuildersKt.runBlocking$default
  [19] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [20] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [21] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [22] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [23] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [24] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [25] java.lang.reflect.Method.invoke
  [26] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [27] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.Executors$RunnableAdapter.call
  [30] java.util.concurrent.FutureTask.run
  [31] java.util.concurrent.ThreadPoolExecutor.runWorker
  [32] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [33] java.lang.Thread.run

--- 1480000000 ns (0.16%), 148 samples
  [ 0] err_codes_mach_rcv
  [ 1] Mutex::lock_without_safepoint_check()
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1390000000 ns (0.15%), 139 samples
  [ 0] jdk.internal.misc.Unsafe.unpark
  [ 1] java.util.concurrent.locks.LockSupport.unpark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 5] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [10] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [11] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [15] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [16] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [17] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [18] kotlinx.coroutines.DispatchedTask.run
  [19] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [20] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [21] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [22] kotlinx.coroutines.BuildersKt.runBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [24] kotlinx.coroutines.BuildersKt.runBlocking$default
  [25] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [26] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [27] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [28] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [29] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [30] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [31] java.lang.reflect.Method.invoke
  [32] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [33] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [34] java.util.concurrent.FutureTask.run
  [35] java.util.concurrent.Executors$RunnableAdapter.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.ThreadPoolExecutor.runWorker
  [38] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [39] java.lang.Thread.run

--- 1290000000 ns (0.14%), 129 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryAcquireCpuPermit
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1280000000 ns (0.14%), 128 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1260000000 ns (0.13%), 126 samples
  [ 0] java.lang.invoke.VarHandleReferences$Array.getVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 4] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1210000000 ns (0.13%), 121 samples
  [ 0] err_codes_mach_rcv
  [ 1] Parker::unpark()
  [ 2] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 3] jdk.internal.misc.Unsafe.unpark
  [ 4] java.util.concurrent.locks.LockSupport.unpark
  [ 5] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 6] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 7] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [11] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [12] io.ktor.utils.io.ByteBufferChannel.flush
  [13] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1210000000 ns (0.13%), 121 samples
  [ 0] __os_ch_md_redzone_cookie
  [ 1] err_codes_iokit_usb
  [ 2] Parker::unpark()
  [ 3] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 4] jdk.internal.misc.Unsafe.unpark
  [ 5] java.util.concurrent.locks.LockSupport.unpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 9] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [10] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [11] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [12] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [13] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [14] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [15] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [17] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [18] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [19] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [20] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [21] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [22] kotlinx.coroutines.DispatchedTask.run
  [23] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [24] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [26] kotlinx.coroutines.BuildersKt.runBlocking
  [27] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [28] kotlinx.coroutines.BuildersKt.runBlocking$default
  [29] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [30] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [31] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [32] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [33] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [34] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [35] java.lang.reflect.Method.invoke
  [36] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [37] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.Executors$RunnableAdapter.call
  [40] java.util.concurrent.FutureTask.run
  [41] java.util.concurrent.ThreadPoolExecutor.runWorker
  [42] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [43] java.lang.Thread.run

--- 1190000000 ns (0.13%), 119 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1180000000 ns (0.13%), 118 samples
  [ 0] kotlin.coroutines.jvm.internal.Boxing.boxBoolean
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 8] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 9] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [10] kotlinx.coroutines.BuildersKt.runBlocking
  [11] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [12] kotlinx.coroutines.BuildersKt.runBlocking$default
  [13] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [14] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [15] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [16] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [18] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [19] java.lang.reflect.Method.invoke
  [20] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] java.util.concurrent.FutureTask.run
  [23] java.util.concurrent.Executors$RunnableAdapter.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.ThreadPoolExecutor.runWorker
  [26] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [27] java.lang.Thread.run

--- 1160000000 ns (0.12%), 116 samples
  [ 0] jdk.internal.misc.Unsafe.checkOffset
  [ 1] jdk.internal.misc.Unsafe.checkPointer
  [ 2] jdk.internal.misc.Unsafe.checkPrimitivePointer
  [ 3] jdk.internal.misc.Unsafe.copyMemoryChecks
  [ 4] jdk.internal.misc.Unsafe.copyMemory
  [ 5] jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal
  [ 6] jdk.internal.misc.ScopedMemoryAccess.copyMemory
  [ 7] java.nio.ByteBuffer.putBuffer
  [ 8] java.nio.ByteBuffer.put
  [ 9] java.nio.HeapByteBuffer.put
  [10] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [14] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [15] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [16] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [17] kotlinx.coroutines.DispatchedTask.run
  [18] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [19] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [20] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [21] kotlinx.coroutines.BuildersKt.runBlocking
  [22] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [23] kotlinx.coroutines.BuildersKt.runBlocking$default
  [24] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [25] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [26] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [27] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [28] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [29] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [30] java.lang.reflect.Method.invoke
  [31] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [32] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [33] java.util.concurrent.FutureTask.run
  [34] java.util.concurrent.Executors$RunnableAdapter.call
  [35] java.util.concurrent.FutureTask.run
  [36] java.util.concurrent.ThreadPoolExecutor.runWorker
  [37] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [38] java.lang.Thread.run

--- 1130000000 ns (0.12%), 113 samples
  [ 0] jdk.internal.misc.Unsafe.unpark
  [ 1] java.util.concurrent.locks.LockSupport.unpark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1130000000 ns (0.12%), 113 samples
  [ 0] java.lang.invoke.VarHandleReferences$Array.setVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LIL_V
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.set
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueueCore.addLast
  [ 4] kotlinx.coroutines.internal.LockFreeTaskQueue.addLast
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 1110000000 ns (0.12%), 111 samples
  [ 0] __os_ch_md_redzone_cookie
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1080000000 ns (0.11%), 108 samples
  [ 0] os::javaTimeNanos()
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1070000000 ns (0.11%), 107 samples
  [ 0] ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**)
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1070000000 ns (0.11%), 107 samples
  [ 0] java.nio.DirectByteBuffer.duplicate
  [ 1] io.ktor.util.BufferViewJvmKt.read
  [ 2] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1070000000 ns (0.11%), 107 samples
  [ 0] kotlin.coroutines.jvm.internal.Boxing.boxBoolean
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.benchmarks.FileBenchmarks$testFilesReadChannel100$1$1$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 9] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [10] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [11] kotlinx.coroutines.BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [13] kotlinx.coroutines.BuildersKt.runBlocking$default
  [14] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [15] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [19] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [20] java.lang.reflect.Method.invoke
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.Executors$RunnableAdapter.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.ThreadPoolExecutor.runWorker
  [27] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [28] java.lang.Thread.run

--- 1030000000 ns (0.11%), 103 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1000000000 ns (0.11%), 100 samples
  [ 0] io.ktor.utils.io.core.BufferSharedState.setReadPosition
  [ 1] io.ktor.utils.io.core.Buffer.setReadPosition
  [ 2] io.ktor.utils.io.core.Buffer.resetForWrite
  [ 3] io.ktor.utils.io.core.IoBuffer.resetFromContentToWrite
  [ 4] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 5] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 1000000000 ns (0.11%), 100 samples
  [ 0] Mutex::lock_without_safepoint_check()
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 990000000 ns (0.11%), 99 samples
  [ 0] java.lang.invoke.VarHandleReferences$Array.setVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LIL_V
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.set
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 4] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 960000000 ns (0.10%), 96 samples
  [ 0] jlong_disjoint_arraycopy
  [ 1] io.ktor.utils.io.internal.RingBufferCapacity.tryReadAtMost
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 5] io.ktor.benchmarks.FileBenchmarks$testFilesReadChannel100$1$1$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 9] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [10] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [11] kotlinx.coroutines.BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [13] kotlinx.coroutines.BuildersKt.runBlocking$default
  [14] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [15] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [19] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [20] java.lang.reflect.Method.invoke
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.Executors$RunnableAdapter.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.ThreadPoolExecutor.runWorker
  [27] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [28] java.lang.Thread.run

--- 960000000 ns (0.10%), 96 samples
  [ 0] err_codes_iokit_usb
  [ 1] Parker::unpark()
  [ 2] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 3] jdk.internal.misc.Unsafe.unpark
  [ 4] java.util.concurrent.locks.LockSupport.unpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 8] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [11] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [12] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [13] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [14] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [17] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [19] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [20] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [21] kotlinx.coroutines.DispatchedTask.run
  [22] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [23] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [24] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt.runBlocking
  [26] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [27] kotlinx.coroutines.BuildersKt.runBlocking$default
  [28] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [30] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [32] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [33] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [34] java.lang.reflect.Method.invoke
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [37] java.util.concurrent.FutureTask.run
  [38] java.util.concurrent.Executors$RunnableAdapter.call
  [39] java.util.concurrent.FutureTask.run
  [40] java.util.concurrent.ThreadPoolExecutor.runWorker
  [41] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [42] java.lang.Thread.run

--- 920000000 ns (0.10%), 92 samples
  [ 0] __os_ch_md_redzone_cookie
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 900000000 ns (0.10%), 90 samples
  [ 0] JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool)
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 900000000 ns (0.10%), 90 samples
  [ 0] kotlinx.coroutines.scheduling.WorkQueue.pollBuffer
  [ 1] kotlinx.coroutines.scheduling.WorkQueue.tryStealFrom
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 890000000 ns (0.09%), 89 samples
  [ 0] itable stub
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 870000000 ns (0.09%), 87 samples
  [ 0] mach_absolute_time
  [ 1] os::javaTimeNanos()
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 850000000 ns (0.09%), 85 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 830000000 ns (0.09%), 83 samples
  [ 0] internal_catch_exc_subsystem
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 830000000 ns (0.09%), 83 samples
  [ 0] ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**)
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 800000000 ns (0.08%), 80 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 790000000 ns (0.08%), 79 samples
  [ 0] err_codes_iokit_usb
  [ 1] Parker::unpark()
  [ 2] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 3] jdk.internal.misc.Unsafe.unpark
  [ 4] java.util.concurrent.locks.LockSupport.unpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 790000000 ns (0.08%), 79 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 790000000 ns (0.08%), 79 samples
  [ 0] mach_absolute_time
  [ 1] __commpage_gettimeofday_internal
  [ 2] [unknown]
  [ 3] [unknown]
  [ 4] to_abstime(timespec*, long, bool, bool)
  [ 5] Parker::park(bool, long)
  [ 6] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 7] jdk.internal.misc.Unsafe.park
  [ 8] java.util.concurrent.locks.LockSupport.parkNanos
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 780000000 ns (0.08%), 78 samples
  [ 0] ThreadsListHandle::ThreadsListHandle(Thread*)
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 770000000 ns (0.08%), 77 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 1] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 2] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 3] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 4] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 5] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 6] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [11] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [16] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [17] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [18] kotlinx.coroutines.BuildersKt.runBlocking
  [19] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [20] kotlinx.coroutines.BuildersKt.runBlocking$default
  [21] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [22] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [23] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [24] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [25] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [26] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [27] java.lang.reflect.Method.invoke
  [28] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [29] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [30] java.util.concurrent.FutureTask.run
  [31] java.util.concurrent.Executors$RunnableAdapter.call
  [32] java.util.concurrent.FutureTask.run
  [33] java.util.concurrent.ThreadPoolExecutor.runWorker
  [34] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [35] java.lang.Thread.run

--- 770000000 ns (0.08%), 77 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.accessCheck
  [ 1] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.getAndAdd
  [ 2] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.addAndGet
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryReleaseCpu
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 760000000 ns (0.08%), 76 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.access$flushImpl
  [ 3] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 4] io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
  [ 5] io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
  [ 6] io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 740000000 ns (0.08%), 74 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.setNextParkedWorker
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 730000000 ns (0.08%), 73 samples
  [ 0] __os_ch_md_redzone_cookie
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 730000000 ns (0.08%), 73 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.inStack
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 730000000 ns (0.08%), 73 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 720000000 ns (0.08%), 72 samples
  [ 0] jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal
  [ 1] jdk.internal.misc.ScopedMemoryAccess.copyMemory
  [ 2] java.nio.ByteBuffer.putBuffer
  [ 3] java.nio.ByteBuffer.put
  [ 4] java.nio.HeapByteBuffer.put
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [11] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [12] kotlinx.coroutines.DispatchedTask.run
  [13] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [14] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [16] kotlinx.coroutines.BuildersKt.runBlocking
  [17] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [18] kotlinx.coroutines.BuildersKt.runBlocking$default
  [19] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [20] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [21] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [22] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [23] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [24] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [25] java.lang.reflect.Method.invoke
  [26] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [27] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.Executors$RunnableAdapter.call
  [30] java.util.concurrent.FutureTask.run
  [31] java.util.concurrent.ThreadPoolExecutor.runWorker
  [32] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [33] java.lang.Thread.run

--- 720000000 ns (0.08%), 72 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 710000000 ns (0.08%), 71 samples
  [ 0] to_abstime(timespec*, long, bool, bool)
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 710000000 ns (0.08%), 71 samples
  [ 0] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 1] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 2] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 3] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 4] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [10] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [11] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [12] kotlinx.coroutines.DispatchedTask.run
  [13] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [14] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [16] kotlinx.coroutines.BuildersKt.runBlocking
  [17] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [18] kotlinx.coroutines.BuildersKt.runBlocking$default
  [19] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [20] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [21] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [22] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [23] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [24] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [25] java.lang.reflect.Method.invoke
  [26] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [27] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.Executors$RunnableAdapter.call
  [30] java.util.concurrent.FutureTask.run
  [31] java.util.concurrent.ThreadPoolExecutor.runWorker
  [32] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [33] java.lang.Thread.run

--- 710000000 ns (0.08%), 71 samples
  [ 0] __commpage_gettimeofday_internal
  [ 1] [unknown]
  [ 2] [unknown]
  [ 3] to_abstime(timespec*, long, bool, bool)
  [ 4] Parker::park(bool, long)
  [ 5] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 6] jdk.internal.misc.Unsafe.park
  [ 7] java.util.concurrent.locks.LockSupport.parkNanos
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 700000000 ns (0.07%), 70 samples
  [ 0] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 1] jdk.internal.misc.Unsafe.unpark
  [ 2] java.util.concurrent.locks.LockSupport.unpark
  [ 3] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 4] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 5] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 6] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 7] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 8] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 9] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [10] io.ktor.utils.io.ByteBufferChannel.flush
  [11] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 700000000 ns (0.07%), 70 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 1] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.flush
  [ 3] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 4] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 5] kotlinx.coroutines.DispatchedTask.run
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 690000000 ns (0.07%), 69 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.getIndexInArray
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 680000000 ns (0.07%), 68 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.submitToLocalQueue
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 2] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 3] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 4] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 5] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 6] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 7] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [13] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [17] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [19] kotlinx.coroutines.BuildersKt.runBlocking
  [20] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [21] kotlinx.coroutines.BuildersKt.runBlocking$default
  [22] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [23] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [24] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [25] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [26] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [27] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [28] java.lang.reflect.Method.invoke
  [29] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [30] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.Executors$RunnableAdapter.call
  [33] java.util.concurrent.FutureTask.run
  [34] java.util.concurrent.ThreadPoolExecutor.runWorker
  [35] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [36] java.lang.Thread.run

--- 670000000 ns (0.07%), 67 samples
  [ 0] JavaThread::threadObj() const
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 660000000 ns (0.07%), 66 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.nextInt
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 660000000 ns (0.07%), 66 samples
  [ 0] __os_ch_md_redzone_cookie
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 650000000 ns (0.07%), 65 samples
  [ 0] java.nio.Buffer.position
  [ 1] java.nio.ByteBuffer.position
  [ 2] java.nio.MappedByteBuffer.position
  [ 3] java.nio.MappedByteBuffer.position
  [ 4] java.nio.Buffer.<init>
  [ 5] java.nio.ByteBuffer.<init>
  [ 6] java.nio.ByteBuffer.<init>
  [ 7] java.nio.MappedByteBuffer.<init>
  [ 8] java.nio.DirectByteBuffer.<init>
  [ 9] java.nio.DirectByteBuffer.duplicate
  [10] io.ktor.util.BufferViewJvmKt.read
  [11] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 650000000 ns (0.07%), 65 samples
  [ 0] Parker::park(bool, long)
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 620000000 ns (0.07%), 62 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 610000000 ns (0.06%), 61 samples
  [ 0] AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ull, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ull>::oop_access_barrier(void*)
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 580000000 ns (0.06%), 58 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LLL_Z
  [ 1] java.util.concurrent.ConcurrentLinkedQueue$Node.casItem
  [ 2] java.util.concurrent.ConcurrentLinkedQueue.poll
  [ 3] kotlinx.coroutines.scheduling.LimitingDispatcher.afterTask
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 580000000 ns (0.06%), 58 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.benchmarks.FileBenchmarks$testFilesReadChannel100$1$1$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [10] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [11] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [14] kotlinx.coroutines.BuildersKt.runBlocking$default
  [15] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [20] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [21] java.lang.reflect.Method.invoke
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.Executors$RunnableAdapter.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.ThreadPoolExecutor.runWorker
  [28] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [29] java.lang.Thread.run

--- 580000000 ns (0.06%), 58 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 580000000 ns (0.06%), 58 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LIL_V
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.set
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 570000000 ns (0.06%), 57 samples
  [ 0] mach_absolute_time
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 570000000 ns (0.06%), 57 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueueCore.addLast
  [ 2] kotlinx.coroutines.EventLoopImplBase.enqueueImpl
  [ 3] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 4] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 5] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 6] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 7] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 8] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 9] io.ktor.utils.io.ByteBufferChannel.flush
  [10] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [11] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [12] kotlinx.coroutines.DispatchedTask.run
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 570000000 ns (0.06%), 57 samples
  [ 0] Java_sun_nio_ch_FileDispatcherImpl_read0
  [ 1] sun.nio.ch.FileDispatcherImpl.read0
  [ 2] sun.nio.ch.FileDispatcherImpl.read
  [ 3] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 4] sun.nio.ch.IOUtil.read
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 560000000 ns (0.06%), 56 samples
  [ 0] [unknown]
  [ 1] to_abstime(timespec*, long, bool, bool)
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 550000000 ns (0.06%), 55 samples
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.accessCheck
  [ 1] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 2] io.ktor.utils.io.internal.RingBufferCapacity.tryWriteAtLeast
  [ 3] io.ktor.utils.io.internal.WriteSessionImpl.request
  [ 4] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 540000000 ns (0.06%), 54 samples
  [ 0] internal_catch_exc_subsystem
  [ 1] sun.nio.ch.NativeThread.current
  [ 2] sun.nio.ch.NativeThreadSet.add
  [ 3] sun.nio.ch.FileChannelImpl.read
  [ 4] io.ktor.util.BufferViewJvmKt.read
  [ 5] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 540000000 ns (0.06%), 54 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryReleaseCpu
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 540000000 ns (0.06%), 54 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 540000000 ns (0.06%), 54 samples
  [ 0] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 1] jdk.internal.misc.Unsafe.park
  [ 2] java.util.concurrent.locks.LockSupport.parkNanos
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 530000000 ns (0.06%), 53 samples
  [ 0] [unknown]
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 530000000 ns (0.06%), 53 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 520000000 ns (0.06%), 52 samples
  [ 0] sun.nio.ch.NativeThread.current
  [ 1] sun.nio.ch.NativeThreadSet.add
  [ 2] sun.nio.ch.FileChannelImpl.read
  [ 3] io.ktor.util.BufferViewJvmKt.read
  [ 4] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 5] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 6] kotlinx.coroutines.DispatchedTask.run
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 520000000 ns (0.06%), 52 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 520000000 ns (0.06%), 52 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 520000000 ns (0.06%), 52 samples
  [ 0] err_codes_iokit_usb
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 520000000 ns (0.06%), 52 samples
  [ 0] __psynch_mutexwait
  [ 1] err_codes_iokit_usb
  [ 2] Parker::unpark()
  [ 3] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 4] jdk.internal.misc.Unsafe.unpark
  [ 5] java.util.concurrent.locks.LockSupport.unpark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 510000000 ns (0.05%), 51 samples
  [ 0] java.lang.invoke.VarHandleReferences$Array.setVolatile
  [ 1] java.lang.invoke.VarHandleGuards.guard_LIL_V
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.set
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 4] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 510000000 ns (0.05%), 51 samples
  [ 0] err_codes_iokit_usb
  [ 1] Parker::unpark()
  [ 2] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 3] jdk.internal.misc.Unsafe.unpark
  [ 4] java.util.concurrent.locks.LockSupport.unpark
  [ 5] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 6] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 7] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [11] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [12] io.ktor.utils.io.ByteBufferChannel.flush
  [13] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [19] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 510000000 ns (0.05%), 51 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 500000000 ns (0.05%), 50 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 2] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 3] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 4] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 5] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 6] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [ 7] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [13] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [17] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [19] kotlinx.coroutines.BuildersKt.runBlocking
  [20] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [21] kotlinx.coroutines.BuildersKt.runBlocking$default
  [22] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [23] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [24] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [25] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [26] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [27] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [28] java.lang.reflect.Method.invoke
  [29] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [30] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.Executors$RunnableAdapter.call
  [33] java.util.concurrent.FutureTask.run
  [34] java.util.concurrent.ThreadPoolExecutor.runWorker
  [35] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [36] java.lang.Thread.run

--- 490000000 ns (0.05%), 49 samples
  [ 0] err_codes_mach_rcv
  [ 1] __os_ch_md_redzone_cookie
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 480000000 ns (0.05%), 48 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 470000000 ns (0.05%), 47 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 470000000 ns (0.05%), 47 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 470000000 ns (0.05%), 47 samples
  [ 0] java.lang.invoke.VarHandle.hasInvokeExactBehavior
  [ 1] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 2] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 470000000 ns (0.05%), 47 samples
  [ 0] kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 3] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 8] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 460000000 ns (0.05%), 46 samples
  [ 0] kotlinx.coroutines.scheduling.WorkQueue.pollBuffer
  [ 1] kotlinx.coroutines.scheduling.WorkQueue.tryStealFrom
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 460000000 ns (0.05%), 46 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 460000000 ns (0.05%), 46 samples
  [ 0] java_lang_Thread::set_thread_status(oopDesc*, JavaThreadStatus)
  [ 1] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 2] jdk.internal.misc.Unsafe.park
  [ 3] java.util.concurrent.locks.LockSupport.parkNanos
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 460000000 ns (0.05%), 46 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 460000000 ns (0.05%), 46 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 450000000 ns (0.05%), 45 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 450000000 ns (0.05%), 45 samples
  [ 0] os::javaTimeNanos()
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 440000000 ns (0.05%), 44 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 430000000 ns (0.05%), 43 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.suspensionForSize
  [ 1] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.benchmarks.FileBenchmarks$testFilesReadChannel100$1$1$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [10] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [11] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt.runBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [14] kotlinx.coroutines.BuildersKt.runBlocking$default
  [15] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [17] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [19] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [20] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [21] java.lang.reflect.Method.invoke
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [24] java.util.concurrent.FutureTask.run
  [25] java.util.concurrent.Executors$RunnableAdapter.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.ThreadPoolExecutor.runWorker
  [28] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [29] java.lang.Thread.run

--- 430000000 ns (0.05%), 43 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 430000000 ns (0.05%), 43 samples
  [ 0] kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 430000000 ns (0.05%), 43 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 430000000 ns (0.05%), 43 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 410000000 ns (0.04%), 41 samples
  [ 0] jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal
  [ 1] jdk.internal.misc.ScopedMemoryAccess.copyMemory
  [ 2] java.nio.ByteBuffer.putBuffer
  [ 3] java.nio.ByteBuffer.put
  [ 4] java.nio.HeapByteBuffer.put
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 8] io.ktor.benchmarks.FileBenchmarks$testFilesReadChannel100$1$1$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 390000000 ns (0.04%), 39 samples
  [ 0] kotlinx.coroutines.scheduling.WorkQueue.poll
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 390000000 ns (0.04%), 39 samples
  [ 0] ThreadsListHandle::ThreadsListHandle(Thread*)
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 390000000 ns (0.04%), 39 samples
  [ 0] __commpage_gettimeofday
  [ 1] [unknown]
  [ 2] to_abstime(timespec*, long, bool, bool)
  [ 3] Parker::park(bool, long)
  [ 4] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 5] jdk.internal.misc.Unsafe.park
  [ 6] java.util.concurrent.locks.LockSupport.parkNanos
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 390000000 ns (0.04%), 39 samples
  [ 0] kotlinx.coroutines.EventLoopImplBase.enqueueImpl
  [ 1] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 2] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 3] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 4] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 5] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [ 6] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.flush
  [ 8] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 390000000 ns (0.04%), 39 samples
  [ 0] java.nio.Buffer.<init>
  [ 1] java.nio.ByteBuffer.<init>
  [ 2] java.nio.ByteBuffer.<init>
  [ 3] java.nio.MappedByteBuffer.<init>
  [ 4] java.nio.DirectByteBuffer.<init>
  [ 5] java.nio.DirectByteBuffer.duplicate
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 380000000 ns (0.04%), 38 samples
  [ 0] kotlinx.coroutines.EventLoopImplBase.dequeue
  [ 1] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 2] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 3] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 7] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 380000000 ns (0.04%), 38 samples
  [ 0] err_codes_iokit_usb
  [ 1] Parker::park(bool, long)
  [ 2] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 3] jdk.internal.misc.Unsafe.park
  [ 4] java.util.concurrent.locks.LockSupport.parkNanos
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 380000000 ns (0.04%), 38 samples
  [ 0] java.nio.Buffer.<init>
  [ 1] java.nio.ByteBuffer.<init>
  [ 2] java.nio.ByteBuffer.<init>
  [ 3] java.nio.MappedByteBuffer.<init>
  [ 4] java.nio.DirectByteBuffer.<init>
  [ 5] java.nio.DirectByteBuffer.duplicate
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 380000000 ns (0.04%), 38 samples
  [ 0] mach_absolute_time
  [ 1] os::javaTimeNanos()
  [ 2] kotlin.jvm.internal.Intrinsics.areEqual
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.currentWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 5] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 6] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [10] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [11] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [12] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [15] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [16] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [17] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [18] kotlinx.coroutines.DispatchedTask.run
  [19] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [20] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [21] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [22] kotlinx.coroutines.BuildersKt.runBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [24] kotlinx.coroutines.BuildersKt.runBlocking$default
  [25] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [26] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [27] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [28] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [29] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [30] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [31] java.lang.reflect.Method.invoke
  [32] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [33] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [34] java.util.concurrent.FutureTask.run
  [35] java.util.concurrent.Executors$RunnableAdapter.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.ThreadPoolExecutor.runWorker
  [38] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [39] java.lang.Thread.run

--- 370000000 ns (0.04%), 37 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 370000000 ns (0.04%), 37 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 6] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 7] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [10] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [11] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [12] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [13] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [16] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [18] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [19] kotlinx.coroutines.DispatchedTask.run
  [20] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [21] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [22] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [23] kotlinx.coroutines.BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [25] kotlinx.coroutines.BuildersKt.runBlocking$default
  [26] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [27] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [29] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [31] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [32] java.lang.reflect.Method.invoke
  [33] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] java.util.concurrent.FutureTask.run
  [36] java.util.concurrent.Executors$RunnableAdapter.call
  [37] java.util.concurrent.FutureTask.run
  [38] java.util.concurrent.ThreadPoolExecutor.runWorker
  [39] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [40] java.lang.Thread.run

--- 370000000 ns (0.04%), 37 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 360000000 ns (0.04%), 36 samples
  [ 0] kotlinx.coroutines.EventLoopImplBase.dequeue
  [ 1] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 2] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 3] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 7] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [12] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [13] java.lang.reflect.Method.invoke
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] java.util.concurrent.FutureTask.run
  [17] java.util.concurrent.Executors$RunnableAdapter.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.ThreadPoolExecutor.runWorker
  [20] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [21] java.lang.Thread.run

--- 360000000 ns (0.04%), 36 samples
  [ 0] java.nio.ByteBuffer.<init>
  [ 1] java.nio.ByteBuffer.<init>
  [ 2] java.nio.MappedByteBuffer.<init>
  [ 3] java.nio.DirectByteBuffer.<init>
  [ 4] java.nio.DirectByteBuffer.duplicate
  [ 5] io.ktor.util.BufferViewJvmKt.read
  [ 6] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 360000000 ns (0.04%), 36 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 350000000 ns (0.04%), 35 samples
  [ 0] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 340000000 ns (0.04%), 34 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 340000000 ns (0.04%), 34 samples
  [ 0] [unknown]
  [ 1] [unknown]
  [ 2] to_abstime(timespec*, long, bool, bool)
  [ 3] Parker::park(bool, long)
  [ 4] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 5] jdk.internal.misc.Unsafe.park
  [ 6] java.util.concurrent.locks.LockSupport.parkNanos
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 340000000 ns (0.04%), 34 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.getClosed
  [ 1] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 340000000 ns (0.04%), 34 samples
  [ 0] java.nio.Buffer.<init>
  [ 1] java.nio.ByteBuffer.<init>
  [ 2] java.nio.ByteBuffer.<init>
  [ 3] java.nio.MappedByteBuffer.<init>
  [ 4] java.nio.DirectByteBuffer.<init>
  [ 5] java.nio.DirectByteBuffer.duplicate
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 330000000 ns (0.04%), 33 samples
  [ 0] java.nio.Buffer.limit
  [ 1] java.nio.ByteBuffer.limit
  [ 2] java.nio.MappedByteBuffer.limit
  [ 3] java.nio.MappedByteBuffer.limit
  [ 4] java.nio.Buffer.<init>
  [ 5] java.nio.ByteBuffer.<init>
  [ 6] java.nio.ByteBuffer.<init>
  [ 7] java.nio.MappedByteBuffer.<init>
  [ 8] java.nio.DirectByteBuffer.<init>
  [ 9] java.nio.DirectByteBuffer.duplicate
  [10] io.ktor.util.BufferViewJvmKt.read
  [11] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 330000000 ns (0.04%), 33 samples
  [ 0] kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource
  [ 1] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 2] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 3] kotlinx.coroutines.BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 6] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 330000000 ns (0.04%), 33 samples
  [ 0] java.lang.Thread.blockedOn
  [ 1] java.lang.System$2.blockedOn
  [ 2] java.nio.channels.spi.AbstractInterruptibleChannel.blockedOn
  [ 3] java.nio.channels.spi.AbstractInterruptibleChannel.begin
  [ 4] sun.nio.ch.FileChannelImpl.beginBlocking
  [ 5] sun.nio.ch.FileChannelImpl.read
  [ 6] io.ktor.util.BufferViewJvmKt.read
  [ 7] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 8] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 9] kotlinx.coroutines.DispatchedTask.run
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [13] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 330000000 ns (0.04%), 33 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 3] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 7] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 8] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [ 9] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [11] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [13] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [14] java.lang.reflect.Method.invoke
  [15] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.Executors$RunnableAdapter.call
  [19] java.util.concurrent.FutureTask.run
  [20] java.util.concurrent.ThreadPoolExecutor.runWorker
  [21] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [22] java.lang.Thread.run

--- 330000000 ns (0.04%), 33 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 320000000 ns (0.03%), 32 samples
  [ 0] sun.nio.ch.FileDispatcherImpl.read0
  [ 1] sun.nio.ch.FileDispatcherImpl.read
  [ 2] sun.nio.ch.IOUtil.readIntoNativeBuffer
  [ 3] sun.nio.ch.IOUtil.read
  [ 4] sun.nio.ch.FileChannelImpl.read
  [ 5] io.ktor.util.BufferViewJvmKt.read
  [ 6] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 7] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 8] kotlinx.coroutines.DispatchedTask.run
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [10] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [11] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [12] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 320000000 ns (0.03%), 32 samples
  [ 0] __psynch_cvclrprepost
  [ 1] __os_ch_md_redzone_cookie
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 310000000 ns (0.03%), 31 samples
  [ 0] java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 2] kotlinx.coroutines.EventLoopImplBase.dequeue
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 310000000 ns (0.03%), 31 samples
  [ 0] gCRAnnotations
  [ 1] __os_ch_md_redzone_cookie
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 300000000 ns (0.03%), 30 samples
  [ 0] SafeThreadsListPtr::release_stable_list()
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 300000000 ns (0.03%), 30 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.inStack
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 300000000 ns (0.03%), 30 samples
  [ 0] java.lang.invoke.VarHandleGuards.guard_LI_L
  [ 1] java.util.concurrent.atomic.AtomicReferenceArray.get
  [ 2] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 3] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 300000000 ns (0.03%), 30 samples
  [ 0] itable stub
  [ 1] kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  [ 2] kotlinx.coroutines.internal.DispatchedContinuation.<init>
  [ 3] kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
  [ 4] kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
  [ 5] kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.intercepted
  [ 6] io.ktor.utils.io.ByteBufferChannel.readSuspendImpl
  [ 7] io.ktor.utils.io.ByteBufferChannel.readSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.benchmarks.FileBenchmarks$testFilesReadChannel100$1$1$1.invokeSuspend
  [12] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [13] kotlinx.coroutines.DispatchedTask.run
  [14] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [15] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [16] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [17] kotlinx.coroutines.BuildersKt.runBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [19] kotlinx.coroutines.BuildersKt.runBlocking$default
  [20] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [21] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [22] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [23] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [24] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [25] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [26] java.lang.reflect.Method.invoke
  [27] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [28] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [29] java.util.concurrent.FutureTask.run
  [30] java.util.concurrent.Executors$RunnableAdapter.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.ThreadPoolExecutor.runWorker
  [33] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [34] java.lang.Thread.run

--- 300000000 ns (0.03%), 30 samples
  [ 0] internal_catch_exc_subsystem
  [ 1] __os_ch_md_redzone_cookie
  [ 2] Parker::park(bool, long)
  [ 3] Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  [ 4] jdk.internal.misc.Unsafe.park
  [ 5] java.util.concurrent.locks.LockSupport.parkNanos
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 9] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 300000000 ns (0.03%), 30 samples
  [ 0] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 1] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 2] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 4] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 5] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 6] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 7] kotlinx.coroutines.DispatchedTask.run
  [ 8] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 9] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [10] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [11] kotlinx.coroutines.BuildersKt.runBlocking
  [12] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [13] kotlinx.coroutines.BuildersKt.runBlocking$default
  [14] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [15] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [16] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [17] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [18] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [19] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [20] java.lang.reflect.Method.invoke
  [21] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [22] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [23] java.util.concurrent.FutureTask.run
  [24] java.util.concurrent.Executors$RunnableAdapter.call
  [25] java.util.concurrent.FutureTask.run
  [26] java.util.concurrent.ThreadPoolExecutor.runWorker
  [27] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [28] java.lang.Thread.run

--- 300000000 ns (0.03%), 30 samples
  [ 0] ThreadsListHandle::ThreadsListHandle(Thread*)
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.EventLoopImplPlatform.unpark
  [ 5] kotlinx.coroutines.EventLoopImplBase.enqueue
  [ 6] kotlinx.coroutines.EventLoopImplBase.dispatch
  [ 7] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [ 8] io.ktor.utils.io.internal.CancellableReusableContinuation.resumeWith
  [ 9] io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  [10] io.ktor.utils.io.ByteBufferChannel.flushImpl
  [11] io.ktor.utils.io.ByteBufferChannel.flush
  [12] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [13] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [14] kotlinx.coroutines.DispatchedTask.run
  [15] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [16] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [17] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [18] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 290000000 ns (0.03%), 29 samples
  [ 0] java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  [ 1] io.ktor.utils.io.ByteBufferChannel.setupStateForRead
  [ 2] io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
  [ 3] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 4] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [ 5] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [ 6] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [ 7] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [ 8] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [ 9] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [10] kotlinx.coroutines.DispatchedTask.run
  [11] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [12] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [13] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [14] kotlinx.coroutines.BuildersKt.runBlocking
  [15] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [16] kotlinx.coroutines.BuildersKt.runBlocking$default
  [17] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [18] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [19] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [20] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [21] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [22] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [23] java.lang.reflect.Method.invoke
  [24] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [25] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [26] java.util.concurrent.FutureTask.run
  [27] java.util.concurrent.Executors$RunnableAdapter.call
  [28] java.util.concurrent.FutureTask.run
  [29] java.util.concurrent.ThreadPoolExecutor.runWorker
  [30] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [31] java.lang.Thread.run

--- 290000000 ns (0.03%), 29 samples
  [ 0] jdk.internal.misc.Unsafe.checkPrimitivePointer
  [ 1] jdk.internal.misc.Unsafe.copyMemoryChecks
  [ 2] jdk.internal.misc.Unsafe.copyMemory
  [ 3] jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal
  [ 4] jdk.internal.misc.ScopedMemoryAccess.copyMemory
  [ 5] java.nio.ByteBuffer.putBuffer
  [ 6] java.nio.ByteBuffer.put
  [ 7] java.nio.HeapByteBuffer.put
  [ 8] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [ 9] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [10] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [11] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [12] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [13] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [14] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [15] kotlinx.coroutines.DispatchedTask.run
  [16] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [17] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [18] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [19] kotlinx.coroutines.BuildersKt.runBlocking
  [20] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [21] kotlinx.coroutines.BuildersKt.runBlocking$default
  [22] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [23] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [24] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [25] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [26] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [27] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [28] java.lang.reflect.Method.invoke
  [29] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [30] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [31] java.util.concurrent.FutureTask.run
  [32] java.util.concurrent.Executors$RunnableAdapter.call
  [33] java.util.concurrent.FutureTask.run
  [34] java.util.concurrent.ThreadPoolExecutor.runWorker
  [35] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [36] java.lang.Thread.run

--- 290000000 ns (0.03%), 29 samples
  [ 0] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 1] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 2] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 3] kotlinx.coroutines.BuildersKt.runBlocking
  [ 4] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 5] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 6] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [ 7] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [ 8] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [ 9] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [10] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [11] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [12] java.lang.reflect.Method.invoke
  [13] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [14] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [15] java.util.concurrent.FutureTask.run
  [16] java.util.concurrent.Executors$RunnableAdapter.call
  [17] java.util.concurrent.FutureTask.run
  [18] java.util.concurrent.ThreadPoolExecutor.runWorker
  [19] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [20] java.lang.Thread.run

--- 280000000 ns (0.03%), 28 samples
  [ 0] SafeThreadsListPtr::release_stable_list()
  [ 1] Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  [ 2] jdk.internal.misc.Unsafe.unpark
  [ 3] java.util.concurrent.locks.LockSupport.unpark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  [ 7] kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core
  [ 8] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [ 9] kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
  [10] kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
  [11] io.ktor.utils.io.ByteBufferChannel.resumeWriteOp
  [12] io.ktor.utils.io.ByteBufferChannel.bytesRead
  [13] io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
  [14] io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
  [15] io.ktor.utils.io.ByteBufferChannel.readAvailable
  [16] io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
  [17] io.ktor.utils.io.ByteBufferChannel.access$readAvailableSuspend
  [18] io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
  [19] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [20] kotlinx.coroutines.DispatchedTask.run
  [21] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [22] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [23] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [24] kotlinx.coroutines.BuildersKt.runBlocking
  [25] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [26] kotlinx.coroutines.BuildersKt.runBlocking$default
  [27] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [28] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [29] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [30] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [31] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [32] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [33] java.lang.reflect.Method.invoke
  [34] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [35] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [36] java.util.concurrent.FutureTask.run
  [37] java.util.concurrent.Executors$RunnableAdapter.call
  [38] java.util.concurrent.FutureTask.run
  [39] java.util.concurrent.ThreadPoolExecutor.runWorker
  [40] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [41] java.lang.Thread.run

--- 270000000 ns (0.03%), 27 samples
  [ 0] mach_absolute_time
  [ 1] os::javaTimeNanos()
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 270000000 ns (0.03%), 27 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
  [ 1] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 270000000 ns (0.03%), 27 samples
  [ 0] java.nio.DirectByteBuffer.duplicate
  [ 1] io.ktor.util.BufferViewJvmKt.read
  [ 2] io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
  [ 3] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 4] kotlinx.coroutines.DispatchedTask.run
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 8] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 260000000 ns (0.03%), 26 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 260000000 ns (0.03%), 26 samples
  [ 0] io.ktor.benchmarks.FileBenchmarks$testFilesReadChannel100$1$1$1.invokeSuspend
  [ 1] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 2] kotlinx.coroutines.DispatchedTask.run
  [ 3] kotlinx.coroutines.EventLoopImplBase.processNextEvent
  [ 4] kotlinx.coroutines.BlockingCoroutine.joinBlocking
  [ 5] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking
  [ 6] kotlinx.coroutines.BuildersKt.runBlocking
  [ 7] kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default
  [ 8] kotlinx.coroutines.BuildersKt.runBlocking$default
  [ 9] io.ktor.benchmarks.FileBenchmarks.testFilesReadChannel100
  [10] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_avgt_jmhStub
  [11] io.ktor.benchmarks.jmh_generated.FileBenchmarks_testFilesReadChannel100_jmhTest.testFilesReadChannel100_AverageTime
  [12] jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
  [13] jdk.internal.reflect.NativeMethodAccessorImpl.invoke
  [14] jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
  [15] java.lang.reflect.Method.invoke
  [16] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [17] org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call
  [18] java.util.concurrent.FutureTask.run
  [19] java.util.concurrent.Executors$RunnableAdapter.call
  [20] java.util.concurrent.FutureTask.run
  [21] java.util.concurrent.ThreadPoolExecutor.runWorker
  [22] java.util.concurrent.ThreadPoolExecutor$Worker.run
  [23] java.lang.Thread.run

--- 260000000 ns (0.03%), 26 samples
  [ 0] kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 260000000 ns (0.03%), 26 samples
  [ 0] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  [ 1] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 260000000 ns (0.03%), 26 samples
  [ 0] kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  [ 1] kotlinx.coroutines.DispatchedTask.run
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

--- 260000000 ns (0.03%), 26 samples
  [ 0] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.accessCheck
  [ 1] java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
  [ 2] kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  [ 3] kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
  [ 4] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
  [ 5] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
  [ 6] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  [ 7] kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run

          ns  percent  samples  top
  ----------  -------  -------  ---
368480000000   39.10%    36848  __psynch_cvwait
113850000000   12.08%    11385  __psynch_cvsignal
 80850000000    8.58%     8085  read
 32570000000    3.46%     3257  __psynch_mutexwait
 31940000000    3.39%     3194  jdk.internal.misc.Unsafe.park
 31350000000    3.33%     3135  java.lang.invoke.VarHandleReferences$Array.getVolatile
 28090000000    2.98%     2809  __gettimeofday
 26460000000    2.81%     2646  kotlinx.coroutines.scheduling.WorkQueue.tryStealFrom
 25180000000    2.67%     2518  java.lang.invoke.VarHandleGuards.guard_LI_L
 11450000000    1.21%     1145  kotlinx.coroutines.internal.LockFreeTaskQueueCore.removeFirstOrNull
 11100000000    1.18%     1110  err_codes_mach_rcv
  9580000000    1.02%      958  __os_ch_md_redzone_cookie
  8600000000    0.91%      860  java.lang.invoke.VarHandleReferences$Array.setVolatile
  7180000000    0.76%      718  os::javaTimeNanos()
  6920000000    0.73%      692  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask
  6750000000    0.72%      675  jlong_disjoint_arraycopy
  5780000000    0.61%      578  err_codes_iokit_usb
  5490000000    0.58%      549  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask
  5400000000    0.57%      540  Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long)
  5360000000    0.57%      536  io.ktor.utils.io.ByteBufferChannel.resumeReadOp
  4850000000    0.51%      485  kotlinx.coroutines.scheduling.WorkQueue.pollBuffer
  4780000000    0.51%      478  Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*)
  4610000000    0.49%      461  Parker::park(bool, long)
  4440000000    0.47%      444  java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet
  3550000000    0.38%      355  internal_catch_exc_subsystem
  3430000000    0.36%      343  mach_absolute_time
  3120000000    0.33%      312  jdk.internal.misc.Unsafe.unpark
  2680000000    0.28%      268  kotlinx.coroutines.scheduling.WorkQueue.poll
  2590000000    0.27%      259  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker
  2520000000    0.27%      252  ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**)
  2370000000    0.25%      237  __psynch_cvclrprepost
  2270000000    0.24%      227  kotlin.coroutines.jvm.internal.Boxing.boxBoolean
  2250000000    0.24%      225  sun.nio.ch.FileDispatcherImpl.read0
  2110000000    0.22%      211  [unknown]
  1970000000    0.21%      197  kotlinx.coroutines.internal.ThreadContextKt.updateThreadContext
  1700000000    0.18%      170  itable stub
  1690000000    0.18%      169  ThreadsListHandle::ThreadsListHandle(Thread*)
  1670000000    0.18%      167  java.nio.DirectByteBuffer.duplicate
  1620000000    0.17%      162  kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith
  1570000000    0.17%      157  kotlinx.coroutines.internal.ThreadContextKt.threadContextElements
  1520000000    0.16%      152  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryAcquireCpuPermit
  1420000000    0.15%      142  jdk.internal.misc.Unsafe.checkOffset
  1320000000    0.14%      132  kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark
  1310000000    0.14%      131  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.inStack
  1280000000    0.14%      128  java.nio.Buffer.<init>
  1200000000    0.13%      120  Mutex::lock_without_safepoint_check()
  1200000000    0.13%      120  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ull, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ull>::oop_access_barrier(void*)
  1170000000    0.12%      117  io.ktor.utils.io.core.BufferSharedState.setReadPosition
  1140000000    0.12%      114  kotlinx.coroutines.internal.LockFreeTaskQueueCore.addLast
  1130000000    0.12%      113  jdk.internal.misc.ScopedMemoryAccess.copyMemoryInternal
  1120000000    0.12%      112  JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool)
  1080000000    0.11%      108  kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch
  1040000000    0.11%      104  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.setNextParkedWorker
  1030000000    0.11%      103  JavaThread::threadObj() const
  1010000000    0.11%      101  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.accessCheck
  1000000000    0.11%      100  java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.accessCheck
  1000000000    0.11%      100  java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet
  1000000000    0.11%      100  kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted
  1000000000    0.11%      100  java.nio.Buffer.position
   990000000    0.11%       99  SafeThreadsListPtr::release_stable_list()
   900000000    0.10%       90  kotlinx.coroutines.scheduling.CoroutineScheduler.submitToLocalQueue
   870000000    0.09%       87  __commpage_gettimeofday_internal
   860000000    0.09%       86  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.getIndexInArray
   860000000    0.09%       86  kotlinx.coroutines.internal.DispatchedContinuation.resumeWith
   840000000    0.09%       84  to_abstime(timespec*, long, bool, bool)
   820000000    0.09%       82  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park
   800000000    0.08%       80  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark
   780000000    0.08%       78  kotlin.coroutines.jvm.internal.ContinuationImpl.getContext
   780000000    0.08%       78  java.lang.invoke.VarHandleGuards.guard_LIL_V
   770000000    0.08%       77  kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch
   760000000    0.08%       76  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.nextInt
   760000000    0.08%       76  java.nio.Buffer.limit
   760000000    0.08%       76  kotlinx.coroutines.EventLoopImplBase.dequeue
   740000000    0.08%       74  io.ktor.utils.io.ByteBufferChannel.readAsMuchAsPossible
   730000000    0.08%       73  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryReleaseCpu
   700000000    0.07%       70  java.lang.invoke.VarHandleGuards.guard_LLL_Z
   690000000    0.07%       69  Java_sun_nio_ch_FileDispatcherImpl_read0
   680000000    0.07%       68  mach_host_special_port_for_id.hsp_ids
   680000000    0.07%       68  io.ktor.util.cio.FileChannelsKt$readChannel$1$3$1.invokeSuspend
   670000000    0.07%       67  io.ktor.utils.io.ByteBufferChannel.setupStateForRead
   630000000    0.07%       63  java_lang_Thread::set_thread_status(oopDesc*, JavaThreadStatus)
   630000000    0.07%       63  sun.nio.ch.NativeThread.current
   610000000    0.06%       61  java.nio.ByteBuffer.<init>
   600000000    0.06%       60  io.ktor.utils.io.ByteBufferChannel.suspensionForSize
   590000000    0.06%       59  java.util.concurrent.atomic.AtomicReferenceArray.get
   570000000    0.06%       57  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.pollGlobalQueues
   560000000    0.06%       56  kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue
   560000000    0.06%       56  kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop
   560000000    0.06%       56  io.ktor.benchmarks.FileBenchmarks$testFilesReadChannel100$1$1$1.invokeSuspend
   510000000    0.05%       51  java.lang.invoke.VarHandle.hasInvokeExactBehavior
   510000000    0.05%       51  io.ktor.utils.io.ByteBufferChannel.getClosed
   500000000    0.05%       50  mach_task_special_port_for_id.tsp_ids
   490000000    0.05%       49  io.ktor.utils.io.internal.RingBufferCapacity.tryReadAtMost
   470000000    0.05%       47  kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull
   470000000    0.05%       47  oopDesc::address_field(int) const
   470000000    0.05%       47  kotlinx.coroutines.internal.LockFreeTaskQueue.addLast
   440000000    0.05%       44  __commpage_gettimeofday
   440000000    0.05%       44  kotlinx.coroutines.EventLoopImplBase.enqueueImpl
   420000000    0.04%       42  java.lang.invoke.VarForm.getMemberName
   420000000    0.04%       42  JavaThread::is_interrupted(bool)
   410000000    0.04%       41  SystemDictionaryShared::validate_before_archiving(InstanceKlass*) (.cold.1)
   410000000    0.04%       41  kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush
   410000000    0.04%       41  java.lang.Thread.blockedOn
   380000000    0.04%       38  io.ktor.utils.io.internal.RingBufferCapacity.completeRead
   370000000    0.04%       37  gCRAnnotations
   350000000    0.04%       35  jdk.internal.misc.Unsafe.copyMemoryChecks
   350000000    0.04%       35  jdk.internal.misc.Unsafe.checkPrimitivePointer
   340000000    0.04%       34  kotlinx.coroutines.DispatchedTask.run
   330000000    0.04%       33  kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource
   330000000    0.04%       33  java.lang.invoke.VarHandleReferences$Array.runtimeTypeCheck
   320000000    0.03%       32  JavaThread::is_Java_thread() const
   320000000    0.03%       32  kotlinx.coroutines.EventLoopImplBase.processNextEvent
   310000000    0.03%       31  kotlinx.coroutines.scheduling.WorkQueue.tryStealLastScheduled
   310000000    0.03%       31  jdk.internal.misc.Unsafe.copyMemory
   310000000    0.03%       31  io.ktor.utils.io.ByteBufferChannel$readAvailableSuspend$2.invokeSuspend
   300000000    0.03%       30  fdval
   290000000    0.03%       29  java.nio.Buffer.markValue
   280000000    0.03%       28  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<544868ull, G1BarrierSet>, (AccessInternal::BarrierType)2, 544868ull>::oop_access_barrier(void*)
   280000000    0.03%       28  Parker::unpark()
   270000000    0.03%       27  kotlin.coroutines.jvm.internal.BaseContinuationImpl.<init>
   260000000    0.03%       26  kotlinx.coroutines.scheduling.LimitingDispatcher.afterTask
   260000000    0.03%       26  kotlin.coroutines.CombinedContext.get
   260000000    0.03%       26  kotlinx.coroutines.CoroutineDispatcher.get
   250000000    0.03%       25  java.util.concurrent.locks.LockSupport.unpark
   250000000    0.03%       25  java.nio.ByteBuffer.limit
   250000000    0.03%       25  kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork
   240000000    0.03%       24  java.nio.MappedByteBuffer.limit
   240000000    0.03%       24  java.lang.Math.min
   220000000    0.02%       22  err_codes_iokit_common
   200000000    0.02%       20  kotlinx.coroutines.scheduling.CoroutineScheduler.createTask
   190000000    0.02%       19  io.ktor.utils.io.ByteBufferChannel.prepareBuffer
   190000000    0.02%       19  java.lang.Object.<init>
   180000000    0.02%       18  JavaFrameAnchor::make_walkable(JavaThread*)
   180000000    0.02%       18  io.ktor.utils.io.ByteBufferChannel.tryWriteSuspend$ktor_io
   170000000    0.02%       17  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask
   160000000    0.02%       16  kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion.updateHead
   160000000    0.02%       16  kotlinx.coroutines.scheduling.CoroutineScheduler.isTerminated
   160000000    0.02%       16  io.ktor.utils.io.ByteBufferChannel.readAvailableSuspend
   150000000    0.02%       15  __psynch_mutexdrop
   150000000    0.02%       15  kotlinx.coroutines.JobSupport.get
   150000000    0.02%       15  kotlinx.coroutines.JobSupport.getState$kotlinx_coroutines_core
   150000000    0.02%       15  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.beforeTask
   140000000    0.01%       14  kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackNextIndex
   140000000    0.01%       14  io.ktor.utils.io.ByteBufferChannel.readAvailable$suspendImpl
   130000000    0.01%       13  pthread_dependency_wait_np.cold.3
   120000000    0.01%       12  io.ktor.util.BufferViewJvmKt.read
   120000000    0.01%       12  kotlin.coroutines.jvm.internal.ContinuationImpl.intercepted
   110000000    0.01%       11  java.util.concurrent.locks.LockSupport.parkNanos
   110000000    0.01%       11  java.util.concurrent.ConcurrentLinkedQueue.poll
   110000000    0.01%       11  java_lang_Thread::get_thread_status(oopDesc*)
   110000000    0.01%       11  io.ktor.utils.io.ByteBufferChannel.bytesRead
   110000000    0.01%       11  io.ktor.utils.io.core.ByteOrder.getNioOrder
   100000000    0.01%       10  kotlin.jvm.internal.Intrinsics.checkNotNull
   100000000    0.01%       10  kotlin.coroutines.ContinuationInterceptor$DefaultImpls.get
    90000000    0.01%        9  Java_sun_nio_ch_NativeThread_current
    90000000    0.01%        9  ThreadsListHandle::~ThreadsListHandle()
    90000000    0.01%        9  java.lang.Thread.interrupted
    80000000    0.01%        8  vtable stub
    80000000    0.01%        8  convertReturnVal
    80000000    0.01%        8  java.nio.DirectByteBuffer.<init>
    70000000    0.01%        7  io.ktor.utils.io.internal.CancellableReusableContinuation.completeSuspendBlock
    70000000    0.01%        7  kotlinx.coroutines.scheduling.CoroutineScheduler.currentWorker
    60000000    0.01%        6  java_lang_Thread::interrupted(oopDesc*)
    60000000    0.01%        6  io.ktor.utils.io.internal.WriteSessionImpl.tryAwait
    60000000    0.01%        6  kotlinx.coroutines.internal.DispatchedContinuation.takeState$kotlinx_coroutines_core
    60000000    0.01%        6  java_lang_Thread::thread(oopDesc*)
    60000000    0.01%        6  kotlinx.coroutines.CoroutineDispatcher.releaseInterceptedContinuation
    60000000    0.01%        6  JNI_OnLoad
    60000000    0.01%        6  sun.nio.ch.FileChannelImpl.read
    50000000    0.01%        5  java.nio.Buffer.clear
    50000000    0.01%        5  io.ktor.utils.io.core.Buffer.setWritePosition
    50000000    0.01%        5  java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.addAndGet
    50000000    0.01%        5  kotlin.jvm.internal.Intrinsics.checkNotNullParameter
    50000000    0.01%        5  unsafe_arraycopy
    50000000    0.01%        5  java.nio.ByteBuffer.order
    50000000    0.01%        5  Mutex::unlock()
    40000000    0.00%        4  java.nio.MappedByteBuffer.position
    40000000    0.00%        4  kotlin.coroutines.jvm.internal.ContinuationImpl.<init>
    40000000    0.00%        4  io.ktor.utils.io.ByteBufferChannel.access$setupStateForRead
    40000000    0.00%        4  java.nio.ByteBuffer.put
    40000000    0.00%        4  kotlin.coroutines.jvm.internal.Boxing.boxInt
    30000000    0.00%        3  java.nio.Buffer.hasRemaining
    30000000    0.00%        3  io.ktor.utils.io.ByteBufferChannel.readSuspend
    30000000    0.00%        3  sun.nio.ch.NativeThreadSet.add
    30000000    0.00%        3  java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet
    30000000    0.00%        3  kotlinx.coroutines.CoroutineDispatcher.interceptContinuation
    30000000    0.00%        3  kotlin.ranges.RangesKt___RangesKt.coerceAtMost
    30000000    0.00%        3  kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely
    30000000    0.00%        3  java.lang.Class.getComponentType
    30000000    0.00%        3  java.util.concurrent.atomic.AtomicReferenceArray.set
    30000000    0.00%        3  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.trySteal
    30000000    0.00%        3  io.ktor.utils.io.internal.RingBufferCapacity.tryWriteAtLeast
    30000000    0.00%        3  io.ktor.utils.io.ByteBufferChannel$writeSuspension$1.invoke
    30000000    0.00%        3  kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.getNextParkedWorker
    30000000    0.00%        3  io.ktor.utils.io.ByteBufferChannel.access$getWriteSuspensionSize$p
    30000000    0.00%        3  io.ktor.utils.io.ByteBufferChannel.access$writeSuspendPredicate
    30000000    0.00%        3  io.ktor.utils.io.ByteBufferChannel.getReadByteOrder
    30000000    0.00%        3  kotlin.Result.exceptionOrNull-impl
    20000000    0.00%        2  kotlinx.coroutines.BlockingCoroutine.joinBlocking
    20000000    0.00%        2  java.lang.invoke.VarHandleReferences$FieldInstanceReadWrite.compareAndSet

